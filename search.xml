<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【51NOD刷题】1283 最小周长</title>
    <url>/posts/37987.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMjgz" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1283"><strong>1283 最小周长</strong><i class="fa fa-external-link"></i></span><br>题目来源： Codility<br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题<br>一个矩形的面积为S，已知该矩形的边长都是整数，求所有满足条件的矩形中，周长的最小值。例如：S = 24，那么有{1 24} {2 12} {3 8} {4 6}这4种矩形，其中{4 6}的周长最小，为20。</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>输入1个数S(1 &lt;= S &lt;= 10^9)。</p><p><strong>Output</strong><br>输出最小周长。</p><p><strong>Input示例</strong></p><blockquote><p>24</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>20</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这个题可以说是相当眼熟了，相比在过去的义务教育期间一定做过类似的题目，只不过题目并没有要求矩形的边长是整数。<br>我们按照边长不一定是整数做一次推倒：<br>设矩形的长和宽分别是x、y，已知举行的面积为S，求周长l的最小值。</p><p>$S=x*y$</p><p>$l=2(x+y)&gt;=4\sqrt{xy}=4\sqrt{S}$</p><p>$l&gt;=4\sqrt{S}$</p><p>所以若不要求边长为整数，则最小周长为$4\sqrt{S}$。</p><p>当要求边长为整数时，对S开二次根的到数字w，找到在比w小的整数中，用S可以整除的最大的数，此时的w和S/w组成的矩形则为最小周长。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> s = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> w = Math.Sqrt(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = (<span class="keyword">int</span>)w; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> res = s * <span class="number">1.0</span> / i;</span><br><span class="line">            <span class="keyword">if</span> (!(Math.Abs(res - (<span class="keyword">int</span>) res) &lt; <span class="number">0.000001</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            Console.WriteLine((<span class="keyword">int</span>)((i + res) * <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C# TextBox Ctrl+A全选</title>
    <url>/posts/15970.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Winform程序中光标在TextBox控件中时按下 Ctrl + A 快捷键，并不能选中全部文字，而是会发出警告音。本文给出实现方法。</p><a id="more"></a><p>在TextBox控件中使用快捷键，一般要求按下快捷键立刻产生效果，KeyUp事件显然不符合我们的要求，而KeyPress事件中不支持使用组合件，所以我们选用KeyDown事件，具体代码实现如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tBBefore_KeyDown</span>(<span class="params"><span class="keyword">object</span> sender, KeyEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.Control &amp;&amp; e.KeyCode == Keys.A)</span><br><span class="line">    &#123;</span><br><span class="line">        ((TextBox)sender).SelectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Winform</tag>
      </tags>
  </entry>
  <entry>
    <title>C#激爽特性——扩展方法</title>
    <url>/posts/35525.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在最近的学习中，发现了一种用起来特别爽的C#特性——扩展方法，之前拜读《大话设计模式》一书的时候，书中提到这样一句话：“反射，反射，程序员的快乐”，本人菜鸟一只，到现在还未曾使用过反射，对于其是否真的快乐自然无从体会，不过扩展方法用起来称得上是相当快乐！</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>下面是MSDN中对于扩展方法的解释</p><blockquote><p>扩展方法使你能够向现有类型”添加“方法,而无需创建新的派生类型、重新编译或以其他方法修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实力方法一样进行调用。对于C#和Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。</p></blockquote><p>刚开始学习C#的时候,经常碰到各种需要状态转换的场合,那个时候代码里常常是大坨大坨的Convert.ToXX();当时非常羡慕String类可以直接调用ToString方法,省时省力,代码看起来还特别美观,之后学会了把Convert.ToXX()打包到一个方法里,代码不那么冗余了,但还是不甚美观,且费时费力,直到今天,我发现了C#中这个让人激爽无比的特性,这件事情终于有了完美的解决方案!</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>下面来看一下基本的语法:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回类型 方法名(<span class="keyword">this</span> 需要添加扩展方法的类名 变量名,,,)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先我们写这样一个类:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ExtensionMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ToInt</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Convert.ToInt32(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后只需要在另一个类中引用这个类的命名空间，就可以方便地使用我们写好的扩展方法进行类型转换了:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ExtensionMethods;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">xxx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">xxxx</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="string">"123"</span>.ToInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么样？是不是感觉一股凉气当头灌下——<strong>真爽啊！</strong><br>别急，光这样怎么能够满足我们的需求呢，接下来我们继续优化。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>以上已经方便了不少，但还是有以下两个问题：</p><blockquote><p>** 每次还需要引用命名空间，太浪费时间精力。**</p></blockquote><p>解决方案：将扩展方法直接放到类型所在的命名空间下<br>依旧以上面的代码为例，就是：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtensionMethods</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ToInt</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Convert.ToInt32(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>如果输入的String并不能转化为数字,会报错。</strong></p></blockquote><p>解决方案：加入另一个参数为默认值，若不能转化成功，则返回默认值。<br>代码如下:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ToInt32</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> s, <span class="keyword">int</span> def = <span class="keyword">default</span>(<span class="keyword">int</span></span>))</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">return</span> Int32.TryParse(s, <span class="keyword">out</span> result) ? result : def;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面的思路,我们可以打包一个包含各种常用类型转换的类,写程序的时候只要直接加入这个类,就可以方便地进行各种进制转换了.</p><p>下面提供一个自用的Convert类<span class="exturl" data-url="aHR0cHM6Ly9xaW5pdWNkbi53YXluZXNoYW8uY29tL0NvbnZlcnQuemlw" title="https://qiniucdn.wayneshao.com/Convert.zip">Convert.zip<i class="fa fa-external-link"></i></span></p>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>特性</tag>
        <tag>扩展方法</tag>
      </tags>
  </entry>
  <entry>
    <title>C#线性筛法快速求出范围内的所有质数</title>
    <url>/posts/1416.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的数。本文列举了几种求区间内所有质数的算法。</p><a id="more"></a><h2 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h2><h3 id="验证质数"><a href="#验证质数" class="headerlink" title="验证质数"></a>验证质数</h3><p>我们根据<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzE3NjcuaHRt" title="http://baike.baidu.com/view/1767.htm">质数<i class="fa fa-external-link"></i></span>的定义可以对某一自然数进行检测，方法如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断自然数是否是质数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="n"&gt;</span>需要判断的数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是/否<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsPrime</span>(<span class="params"><span class="keyword">int</span> n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = n - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//n除以每个比n小比1大的自然数</span></span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果有能被整除的，则不是质数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则则为质数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取范围内质数"><a href="#获取范围内质数" class="headerlink" title="获取范围内质数"></a>获取范围内质数</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取自然数区间内的所有质数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startInt"&gt;</span>自然数区间起始点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="endInt"&gt;</span>自然数区间终点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>自然数区间内的所有质数的集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetPrimes</span>(<span class="params"><span class="keyword">int</span> startInt, <span class="keyword">int</span> endInt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = startInt; i &lt;= endInt; i++)</span><br><span class="line">        <span class="keyword">if</span> (IsPrime(i))</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h2><h3 id="什么是筛法"><a href="#什么是筛法" class="headerlink" title="什么是筛法"></a>什么是筛法</h3><p>科普篇:筛法是一种简单检定<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzE3NjcuaHRt" title="http://baike.baidu.com/view/1767.htm">质数<i class="fa fa-external-link"></i></span>的算法。据说是古希腊的<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS9zdWJ2aWV3LzQ2MDE1LzQ2MDE1Lmh0bQ==" title="http://baike.baidu.com/subview/46015/46015.htm">埃拉托斯特尼（Eratosthenes）<i class="fa fa-external-link"></i></span>发明的，又称<span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNvbS92aWV3LzE0MjUzNzkuaHRt" title="http://baike.baidu.com/view/1425379.htm">埃拉托斯特尼筛法（sieve of Eratosthenes）<i class="fa fa-external-link"></i></span>.</p><h3 id="使用筛法求某上限内所有质数"><a href="#使用筛法求某上限内所有质数" class="headerlink" title="使用筛法求某上限内所有质数"></a>使用筛法求某上限内所有质数</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 求某上限内的所有质数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="j"&gt;</span>上限自然数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>上限内所有质数<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GenPrime</span>(<span class="params"><span class="keyword">int</span> j</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bts = <span class="keyword">new</span> BitArray(j + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">2</span>; x &lt; bts.Length / <span class="number">2</span>; x++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> y = x + <span class="number">1</span>; y &lt; bts.Length; y++)</span><br><span class="line">            <span class="keyword">if</span> (bts[y] == <span class="literal">false</span> &amp;&amp; y % x == <span class="number">0</span>)</span><br><span class="line">                bts[y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">2</span>; x &lt; bts.Length; x++)</span><br><span class="line">        <span class="keyword">if</span> (bts[x] == <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用筛法求某自然数区间内所有质数"><a href="#使用筛法求某自然数区间内所有质数" class="headerlink" title="使用筛法求某自然数区间内所有质数"></a>使用筛法求某自然数区间内所有质数</h3><p>使用两次上面的方法分别求取区间起始点和终点作为上限的所有质数后取差集</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取自然数区间内的所有质数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startInt"&gt;</span>自然数区间起始点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="endInt"&gt;</span>自然数区间终点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>自然数区间内的所有质数的集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GenPrimes</span>(<span class="params"><span class="keyword">int</span> startInt, <span class="keyword">int</span> endInt</span>)</span> =&gt; </span><br><span class="line">    GenPrime(endInt).Except(GenPrime(startInt));</span><br></pre></td></tr></table></figure><h3 id="快速线性筛法实现"><a href="#快速线性筛法实现" class="headerlink" title="快速线性筛法实现"></a>快速线性筛法实现</h3><p>在某位高手的博文中发现了复杂度更低的线性筛法</p><blockquote><p><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGlub3NvZnQvYXJ0aWNsZS9kZXRhaWxzLzU4Mjk1NTAjdDM=" title="http://blog.csdn.net/dinosoft/article/details/5829550#t3">一般筛法求素数+快速线性筛法求素数<i class="fa fa-external-link"></i></span></p></blockquote><p>下面是C#的实现</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 求某上限内的所有质数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x"&gt;</span>上限自然数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>上限内所有质数<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">LinearGenPrime</span>(<span class="params"><span class="keyword">int</span> x</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numPrime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ints = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="keyword">var</span> isNotPrime = <span class="keyword">new</span> BitArray(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isNotPrime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">            numPrime++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; numPrime &amp;&amp; i * ints[j] &lt; x; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isNotPrime[i * ints[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!Convert.ToBoolean(i % ints[j]))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>质数</tag>
      </tags>
  </entry>
  <entry>
    <title>C#读取CPU序列号、硬盘ID、网卡MAC地址，生成机器码</title>
    <url>/posts/13625.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>话不多说，直接上代码，类库中的机器码使用序列号、硬盘ID、网卡MAC地址组合取MD5生成。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Management;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WayneShao.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MachineCode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> _machineCodeString;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Value</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(_machineCodeString))</span><br><span class="line">                    _machineCodeString = GetMD5(<span class="string">$"<span class="subst">&#123;CPUCode&#125;</span>_<span class="subst">&#123;HDId&#125;</span>_<span class="subst">&#123;MacAddress&#125;</span>"</span>);</span><br><span class="line">                <span class="keyword">return</span> _machineCodeString;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> _cpuCode;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> CPUCode =&gt; _cpuCode ?? (_cpuCode = GetCPUInfo());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> _hdId;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> HDId =&gt; _hdId ?? (_hdId = GetHDid());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> _macAddress;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> MacAddress =&gt; _macAddress ?? (_macAddress = GetMACAddress());</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   获取cpu序列号     </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;returns&gt;</span> string <span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetCPUInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cimobject = <span class="keyword">new</span> ManagementClass(<span class="string">"Win32_Processor"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> hdids = cimobject.GetInstances().Cast&lt;ManagementObject&gt;().Select(o =&gt; o.Properties[<span class="string">"ProcessorId"</span>].Value).Cast&lt;<span class="keyword">string</span>&gt;().ToArray();</span><br><span class="line">                <span class="keyword">return</span> hdids.Any() ? hdids.First() : <span class="keyword">string</span>.Empty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   获取硬盘ID     </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;returns&gt;</span> string <span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetHDid</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cimobject1 = <span class="keyword">new</span> ManagementClass(<span class="string">"Win32_DiskDrive"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> hdids = cimobject1.GetInstances().Cast&lt;ManagementObject&gt;().Select(o =&gt; o.Properties[<span class="string">"Model"</span>].Value).Cast&lt;<span class="keyword">string</span>&gt;().ToArray();</span><br><span class="line">                <span class="keyword">return</span> hdids.Any() ? hdids.First() : <span class="keyword">string</span>.Empty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   获取网卡硬件地址 </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;returns&gt;</span> string <span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetMACAddress</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> mc = <span class="keyword">new</span> ManagementClass(<span class="string">"Win32_NetworkAdapterConfiguration"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> macs = mc.GetInstances().Cast&lt;ManagementObject&gt;().Where(o =&gt; (<span class="keyword">bool</span>)o[<span class="string">"IPEnabled"</span>]).Select(o =&gt; o[<span class="string">"MacAddress"</span>].ToString()).ToArray();</span><br><span class="line">                <span class="keyword">return</span> macs.Any() ? macs.First() : <span class="keyword">string</span>.Empty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   获取字符串的MD5值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;returns&gt;</span> string <span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetMD5</span>(<span class="params"><span class="keyword">string</span> source</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = Encoding.Default.GetBytes(source);</span><br><span class="line">            <span class="keyword">var</span> md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> output = md5.ComputeHash(result);</span><br><span class="line">            <span class="keyword">return</span> BitConverter.ToString(output).Replace(<span class="string">"-"</span>, <span class="string">""</span>).ToLower();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另附MSDN中关于 WMI Class 的文档供大家参考<br><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vemgtY24vbGlicmFyeS9hYTM5NDE3MyhWUy44NSkuYXNweA==" title="https://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx">https://msdn.microsoft.com/zh-cn/library/aa394173(VS.85).aspx<i class="fa fa-external-link"></i></span></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>硬件信息</tag>
      </tags>
  </entry>
  <entry>
    <title>【下载】C# 调用迅雷、IDM下载方法汇总</title>
    <url>/posts/46213.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在开发桌面软件时常常有下载文件的需求，小文件、少文件可以自己做相应的网络请求，但是当文件的大小或者数量达到一定规模时，自己封装网络请求就不是很划算的事情了，这时我们可以采取调用迅雷或者IDM、aria2c之类的专业下载软件来进行下载。</p><a id="more"></a><h2 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h2><h3 id="直接调用迅雷"><a href="#直接调用迅雷" class="headerlink" title="直接调用迅雷"></a>直接调用迅雷</h3><ol><li><p>安装迅雷后可以再引用的com组件中找到名为 “ThunderAgent 1.0 Type Library” 的com组件，勾选引用之后，把类库属性中的嵌入互操作类型修改为false。<br><img src="https://qiniucdn.wayneshao.com/20180307172636630/20180307054659587.png" alt></p></li><li><p>使用代码调用AgentLib直接在迅雷中增加新任务</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ThunderAgentLib.AgentClass().AddTask(<span class="string">"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar"</span>);</span><br></pre></td></tr></table></figure><p>以上为最简单的调用方式，只是传入了下载地址，其他的属性为默认值，传入后续的几个参数或者才用AddTask2方法就可以手动修改任务属性。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">AddTask</span>(<span class="params">[MarshalAs(UnmanagedType.BStr</span>), In] <span class="keyword">string</span> bstrUrl, [<span class="title">MarshalAs</span>(<span class="params">UnmanagedType.BStr</span>), In] <span class="keyword">string</span> bstrFileName</span> = <span class="string">""</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrPath = <span class="string">""</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrComments = <span class="string">""</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrReferUrl = <span class="string">""</span>, [In] <span class="keyword">int</span> nStartMode = <span class="number">-1</span>, [In] <span class="keyword">int</span> nOnlyFromOrigin = <span class="number">0</span>, [In] <span class="keyword">int</span> nOriginThreadCount = <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">AddTask2</span>(<span class="params">[MarshalAs(UnmanagedType.BStr</span>), In] <span class="keyword">string</span> bstrUrl, [<span class="title">MarshalAs</span>(<span class="params">UnmanagedType.BStr</span>), In] <span class="keyword">string</span> bstrFileName</span> = <span class="string">""</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrPath = <span class="string">""</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrComments = <span class="string">""</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrReferUrl = <span class="string">""</span>, [In] <span class="keyword">int</span> nStartMode = <span class="number">-1</span>, [In] <span class="keyword">int</span> nOnlyFromOrigin = <span class="number">0</span>, [In] <span class="keyword">int</span> nOriginThreadCount = <span class="number">-1</span>, [MarshalAs(UnmanagedType.BStr), In] <span class="keyword">string</span> bstrCookie = <span class="string">""</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="迅雷开放平台"><a href="#迅雷开放平台" class="headerlink" title="迅雷开放平台"></a>迅雷开放平台</h3><p>迅雷官方曾经开放过一个mini版下载SDK，相当于一个无界面版本的mini迅雷，可以供程序直接调用，现在虽然已经停止服务，但是网上仍然有它的传说，<br>优点是不用下载迅雷，软件+dll总共只有1mb+，缺点就是没有迅雷完整版的那些加速功能，没有那么快。<br>我按照自己的理解把SDK封装了一下：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dheW5lU2hhby9UaHVuZGVyU2Rr" title="https://github.com/WayneShao/ThunderSdk">https://github.com/WayneShao/ThunderSdk<i class="fa fa-external-link"></i></span><br>下面是调用代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ThunderSdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThunderSdkDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> manager = <span class="keyword">new</span> DownloadManager(<span class="number">1</span>, <span class="string">@"D:\"</span>);</span><br><span class="line">            manager.CreateNewTask(<span class="string">"https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=770549720,375505130&amp;fm=173&amp;s=612A66F94AA394CE4A84E71B030050D7&amp;w=218&amp;h=146&amp;img.JPEG"</span>,</span><br><span class="line">                <span class="string">"2018-1-30-5ZD6R0BZZ.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            manager.TaskDownload += (s, e) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(s <span class="keyword">is</span> DownFileInfo info)) <span class="keyword">return</span>;</span><br><span class="line">                Console.WriteLine(info.TaskInfo.Percent);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            manager.TaskCompleted += (s, e) =&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">if</span> (!(s <span class="keyword">is</span> DownFileInfo info)) <span class="keyword">return</span>;</span><br><span class="line">                  Console.WriteLine(info.FileName + <span class="string">"下载完成"</span>);</span><br><span class="line">              &#125;;</span><br><span class="line"></span><br><span class="line">            manager.StartAllTask();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Internet-Download-Manager"><a href="#Internet-Download-Manager" class="headerlink" title="Internet Download Manager"></a>Internet Download Manager</h2><p>这个是我用过之后体验最好的，推荐使用。<br>使用方法如下：</p><h3 id="获取DLL文件"><a href="#获取DLL文件" class="headerlink" title="获取DLL文件"></a>获取DLL文件</h3><ol><li><p>下载 <span class="exturl" data-url="aHR0cDovL3d3dy5pbnRlcm5ldGRvd25sb2FkbWFuYWdlci5jb20vc3VwcG9ydC9kb3dubG9hZC9JRE1DT01BUEkuemlw" title="http://www.internetdownloadmanager.com/support/download/IDMCOMAPI.zip">IDMCOMAPI.zip<i class="fa fa-external-link"></i></span>。</p></li><li><p>解压 IDManTypeInfo.tlb 文件到任意位置。</p></li><li><p>打开 Visual Studio安装时附带的命令行工具。（任选一个即可，推荐第一个）<br><img src="https://qiniucdn.wayneshao.com/20180308000415303/20180308121452182.png" alt></p></li><li><p>使用 类型库导入程序 (Tlbimp.exe)将tlb文件转换成dll文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TlbImp IDManTypeInfo.tlb</span><br></pre></td></tr></table></figure><blockquote><p>Microsoft (R) .NET Framework Type Library to Assembly Converter 3.5.30729.1<br>Copyright (C) Microsoft Corporation. All rights reserved.</p></blockquote><blockquote><p>Type library imported to ![IDManLib.dll]<br>This will create an IDManLib.dll</p></blockquote></li></ol><p>如果懒得完成上面的步骤，也可以直接下载我已经导入好的文件<span class="exturl" data-url="aHR0cHM6Ly9xaW5pdWNkbi53YXluZXNoYW8uY29tLzIwMTgwMzA4MDAwNDE1MzAzL0lETWFuTGliLjd6" title="https://qiniucdn.wayneshao.com/20180308000415303/IDManLib.7z">IDManLib.7z<i class="fa fa-external-link"></i></span></p><h2 id="引用DLL文件"><a href="#引用DLL文件" class="headerlink" title="引用DLL文件"></a>引用DLL文件</h2><p>手动选择 IDManLib.dll 文件进行引用，引用后同样也要把类库属性中的嵌入互操作类型修改为false，编译平台最好选择x86。</p><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>和迅雷的类似，将下载地址、文件路劲、文件名等参数传入方法中即可成功在IDM中建立新任务。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> IDManLib.CIDMLinkTransmitterClass().SendLinkToIDM(<span class="string">"http://s1.static.haoke258.info/attach_2/2018-1-30-5ZD6R0BZZ.rar"</span>, <span class="string">"http://ailushe95.info/"</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">@"D:\Backup\Downloads\LULULU"</span>, <span class="string">"【感謝擼友投稿】無名小姐姐 2V.rar"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>下载</tag>
        <tag>IDM</tag>
        <tag>迅雷</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8 使用 Docker 部署 GitLab-CE</title>
    <url>/posts/51370.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="最近需要在公司的CentOS7服务器上部署一套GitLab服务，打算采用Docker来完成，记录一下部署过程。"><a href="#最近需要在公司的CentOS7服务器上部署一套GitLab服务，打算采用Docker来完成，记录一下部署过程。" class="headerlink" title="最近需要在公司的CentOS7服务器上部署一套GitLab服务，打算采用Docker来完成，记录一下部署过程。"></a>最近需要在公司的CentOS7服务器上部署一套GitLab服务，打算采用Docker来完成，记录一下部署过程。</h2><p>2021-07-05<br>更新：</p><ol><li>系统升级为CentOS8</li><li>因为GitLab新版本直接支持了中文且GitLab-CE-CN一直没有更新，故而镜像换成了GitLab-CE</li><li>redis 升级为最新版</li><li>实践中发现默认源安装的pip版本安装docker-compose时必然出错，故而加入更新pip步骤</li><li>实际使用过程中发现docker网段在阿里云非常容易和企业内网网段冲突，故而新建网络时增加指定生僻网段<a id="more"></a><h2 id="安装-Docker-与-Docker-Compose"><a href="#安装-Docker-与-Docker-Compose" class="headerlink" title="安装 Docker 与 Docker Compose"></a>安装 Docker 与 Docker Compose</h2><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><h4 id="卸载旧版本-新机可忽略"><a href="#卸载旧版本-新机可忽略" class="headerlink" title="卸载旧版本(新机可忽略)"></a>卸载旧版本(新机可忽略)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove -y docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">                    device-mapper-persistent-data \</span><br><span class="line">                    lvm2</span><br></pre></td></tr></table></figure><h4 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine Community"></a>安装 Docker Engine Community</h4><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce \</span><br><span class="line">                 docker-ce-cli \</span><br><span class="line">                 containerd.io</span><br></pre></td></tr></table></figure><p>如果提示接受 GPG 密钥，选yes。</p><h4 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker -v</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>正确输出如下<br><img src="https://qiniucdn.wayneshao.com/centos-docker-gitlab20191213110159557.png" alt></p><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><h4 id="安装企业Linux的额外软件包"><a href="#安装企业Linux的额外软件包" class="headerlink" title="安装企业Linux的额外软件包"></a>安装企业Linux的额外软件包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure><h4 id="安装并更新-python3-pip"><a href="#安装并更新-python3-pip" class="headerlink" title="安装并更新 python3-pip"></a>安装并更新 python3-pip</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y python3-pip</span><br><span class="line">python3 -m pip install -U pip</span><br></pre></td></tr></table></figure><h4 id="安装-Docker-Compose-1"><a href="#安装-Docker-Compose-1" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install docker-compose</span><br></pre></td></tr></table></figure><h4 id="验证安装-1"><a href="#验证安装-1" class="headerlink" title="验证安装"></a>验证安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><p>正确输出如下<br><img src="https://qiniucdn.wayneshao.com/centos-docker-gitlab20191213110723662.png" alt></p><h2 id="安装-Redis-和-GitLab"><a href="#安装-Redis-和-GitLab" class="headerlink" title="安装 Redis 和 GitLab"></a>安装 Redis 和 GitLab</h2><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>我这边预计会复用Redis，所以要创建单独的Redis镜像，那么在创建之前，需要先见一个 network 用于将多个镜像放置在同一网络环境下。（如果局域网中已经存在对应网段，请自行替换）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker network create \</span><br><span class="line">  --driver=bridge \</span><br><span class="line">  --subnet=192.112.0.0/16 \</span><br><span class="line">  --ip-range=192.112.5.0/24 \</span><br><span class="line">  --gateway=192.112.5.254 \</span><br><span class="line">  net_default</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>下面创建 Redis，我这里使用 Docker Compose 来完成。<br>新建一个文件夹并将其重命名为 Redis，在 Redis 文件夹中创建 config 文件夹，而后在 config 文件夹中创建 Redis 的配置文件 redis.conf</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#redis的databases数量</span></span><br><span class="line"><span class="attribute">databases</span> <span class="number">32</span></span><br><span class="line"><span class="comment">#redis密码</span></span><br><span class="line">requirepass qm4Cqd3srYK0MHTPEZmf</span><br></pre></td></tr></table></figure><p>在 Redis 目录中新建 docker-compose.yml 脚本:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">db-redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net_default</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/docker/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/docker/config/redis.conf</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net_default:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在 docker-compose.yml 所在目录下<br>接下来，在 docker-compose.yml 所在目录运行 docker-compose:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/centos-docker-gitlab20191213055427131.png" alt></p><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p>新建一个文件夹并将其重命名为 GitLab，在 GitLab 文件夹中创建 config 文件夹，在 config 文件夹中创建 ssl 文件夹，而后将我们的 SSL 证书拷贝到 ssl 目录中。<br><img src="https://qiniucdn.wayneshao.com/centos-docker-gitlab20191213055037651.png" alt><br>而后回到 GitLab 文件夹开始编写我们的 docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab-ce:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'gitlab/gitlab-ce:13.0.14-ce.0'</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab-ce</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">external_url</span> <span class="string">'https://gitlab.apukj.com'</span></span><br><span class="line">        <span class="string">nginx['redirect_http_to_https']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">nginx['ssl_certificate']</span> <span class="string">=</span> <span class="string">"/etc/gitlab/ssl/5216854__apukj.com.pem"</span></span><br><span class="line">        <span class="string">nginx['ssl_certificate_key']</span> <span class="string">=</span> <span class="string">"/etc/gitlab/ssl/5216854__apukj.com.key"</span></span><br><span class="line">        <span class="string">gitlab_rails['time_zone']</span> <span class="string">=</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">        <span class="string">gitlab_rails['smtp_enable']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_address']</span> <span class="string">=</span> <span class="string">'smtp.exmail.qq.com'</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_port']</span> <span class="string">=</span> <span class="number">465</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_user_name']</span> <span class="string">=</span> <span class="string">'admin@apukj.com'</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_password']</span> <span class="string">=</span> <span class="string">'FmSM8juiYywqJnXv'</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_domain']</span> <span class="string">=</span> <span class="string">'smtp.exmail.qq.com'</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_authentication']</span> <span class="string">=</span> <span class="string">'login'</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_enable_starttls_auto']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">gitlab_rails['smtp_tls']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_email_enabled']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_email_from']</span> <span class="string">=</span> <span class="string">'admin@apukj.com'</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_email_display_name']</span> <span class="string">=</span> <span class="string">'阿铺科技源码服务'</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_email_reply_to']</span> <span class="string">=</span> <span class="string">'admin@apukj.com'</span></span><br><span class="line">        <span class="string">user["git_user_email"]</span> <span class="string">=</span> <span class="string">'admin@apukj.com'</span></span><br><span class="line">        <span class="comment">#修改sidekiq的数量，减少内存占用，默认为15，也可以不填</span></span><br><span class="line">        <span class="string">sidekiq['concurrency']</span> <span class="string">=</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#使用外部redis所需设置，根据刚刚生成的redis设置修改</span></span><br><span class="line">        <span class="string">gitlab_rails['redis_port']</span> <span class="string">=</span> <span class="number">6379</span></span><br><span class="line">        <span class="string">gitlab_rails['redis_host']</span> <span class="string">=</span> <span class="string">'db-redis'</span></span><br><span class="line">        <span class="string">gitlab_rails['redis_password']</span> <span class="string">=</span> <span class="string">'edHtDM44XbOzsQcEXlaR'</span></span><br><span class="line">        <span class="string">gitlab_rails['redis_database']</span> <span class="string">=</span> <span class="string">'1'</span></span><br><span class="line">        <span class="comment">#因为22端口被占用，修改映射的端口号时，同时修改在Gitlab项目中的ssh地址加上端口号</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">24</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'24:22'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'5432:5432'</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net_default</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/var/log/gitlab</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net_default:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>接下来，在 docker-compose.yml 所在目录运行 docker-compose:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/centos-docker-gitlab20191213055352508.png" alt><br>至此，我们完成了使用 Docker 搭建 GitLab 的全过程，直接访问HTTP对应服务器的80/443端口接口即可：<br><img src="https://qiniucdn.wayneshao.com/centos-docker-gitlab20191213055609985.png" alt></p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="docker端口映射或启动容器时报错Error-response-from-daemon-driver-failed-programming-external-connectivity-on-endpoint"><a href="#docker端口映射或启动容器时报错Error-response-from-daemon-driver-failed-programming-external-connectivity-on-endpoint" class="headerlink" title="docker端口映射或启动容器时报错Error response from daemon: driver failed programming external connectivity on endpoint"></a>docker端口映射或启动容器时报错Error response from daemon: driver failed programming external connectivity on endpoint</h3><p>docker服务启动时定义的自定义链DOCKER由于某种原因被清掉<br>重启docker服务及可重新生成自定义链DOCKER</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="SMTP-验证失败"><a href="#SMTP-验证失败" class="headerlink" title="SMTP 验证失败"></a>SMTP 验证失败</h3><p>163、QQ等邮箱在开启了授权码之后，需要使用授权码做协议登陆。</p><h3 id="阿里云，启动以后无法通过外部访问"><a href="#阿里云，启动以后无法通过外部访问" class="headerlink" title="阿里云，启动以后无法通过外部访问"></a>阿里云，启动以后无法通过外部访问</h3><p>首先需要排除防火墙问题，firewall 和 iptables 均需要处理，处理后如果仍然不行，那可能是阿里云自身的安全策略问题，需要在管理后台设置。</p><h3 id="阿里云，邮件无法发送"><a href="#阿里云，邮件无法发送" class="headerlink" title="阿里云，邮件无法发送"></a>阿里云，邮件无法发送</h3><p>可能是阿里云对 25 端口做了屏蔽，可以按照我给出的配置，使用 SSL 的 SMTP 端口 465 。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab 非 Docker .NET Core CI/CD搭建</title>
    <url>/posts/33677.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>公司的 GitLab 服务部署完了，但是领导出于性能方面的考虑，希望测试和生产环境不用 Docker 来部署，遂搭建了一套不基于Docker 的 GitLab CI/CD 负载均衡测试环境。</p><a id="more"></a><h2 id="注册-GitLab-Runner"><a href="#注册-GitLab-Runner" class="headerlink" title="注册 GitLab-Runner"></a>注册 GitLab-Runner</h2><h3 id="安装-GitLab-Runner"><a href="#安装-GitLab-Runner" class="headerlink" title="安装 GitLab-Runner"></a>安装 GitLab-Runner</h3><p>这里我没有按照官方教程来直接下载对应系统的包安装，而是使用了<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3IudHVuYS50c2luZ2h1YS5lZHUuY24vaGVscC9naXRsYWItcnVubmVyLw==" title="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-runner/">清华大学开源镜像站的方法<i class="fa fa-external-link"></i></span>:<br><img src="https://qiniucdn.wayneshao.com/20191217060322268.png" alt></p><h3 id="注册启用-GitLab-Runner"><a href="#注册启用-GitLab-Runner" class="headerlink" title="注册启用 GitLab-Runner"></a>注册启用 GitLab-Runner</h3><p>转到搭建好的GitLab的具体项目CICD项目设置页<br><span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIueHh4L3VzZXIvcHJvamVjdC9zZXR0aW5ncy9jaV9jZA==" title="https://gitlab.xxx/user/project/settings/ci_cd">https://gitlab.xxx/user/project/settings/ci_cd<i class="fa fa-external-link"></i></span><br><img src="https://qiniucdn.wayneshao.com/20191217060555653.png" alt><br>然后用GitLab提供的令牌和地址对GitLab进行注册：<br><img src="https://qiniucdn.wayneshao.com/20191217060735087.png" alt></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-runner register</span><br><span class="line">gitlab.xxx</span><br><span class="line">xxxxx</span><br><span class="line">shell</span><br></pre></td></tr></table></figure><h2 id="测试机负载均衡和Daemon"><a href="#测试机负载均衡和Daemon" class="headerlink" title="测试机负载均衡和Daemon"></a>测试机负载均衡和Daemon</h2><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡方面，国际惯例，还用 nginx 来做</p><p>直接用 yum 安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 待选服务器列表</span></span><br><span class="line">    <span class="attribute">upstream</span> myproject&#123;</span><br><span class="line">        <span class="comment"># ip_hash;</span></span><br><span class="line">        <span class="attribute">server</span> Y.Y.Y.Y:<span class="number">4411</span> weight=<span class="number">7</span>;</span><br><span class="line">        <span class="attribute">server</span> X.X.X.X:<span class="number">4411</span> weight=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># HTTP 配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://myproject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line">   <span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">443</span> ssl http2;</span><br><span class="line">       <span class="attribute">listen</span>       [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">ssl_certificate</span> <span class="string">"/etc/nginx/ssl/ssl_certificate.pem"</span>;</span><br><span class="line">       <span class="attribute">ssl_certificate_key</span> <span class="string">"/etc/nginx/ssl/ssl_certificate_key.key"</span>;</span><br><span class="line">       <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>;</span><br><span class="line">       <span class="attribute">ssl_session_timeout</span>  <span class="number">10m</span>;</span><br><span class="line">       <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">       <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://myproject;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Daemon"><a href="#Daemon" class="headerlink" title="Daemon"></a>Daemon</h3><p>Daemon 方面，用过的几个里，个人觉得使用舒适度从低到高是 Systemd &lt; Supervisor &lt; PM2，直接选PM2了，原理一样，可以很方便的更换其他。<br>在做了负载均衡的两台服务器上做以下相同配置：</p><ol><li>安装 NodeJS<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y nodejs gcc-c++ make yarn</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://qiniucdn.wayneshao.com/GitLab%E9%9D%9EDockerNETCoreCICD%E6%90%AD%E5%BB%BA/20191217054930495.png" alt><br>2. 切换 Registry</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/GitLab%E9%9D%9EDockerNETCoreCICD%E6%90%AD%E5%BB%BA/20191217055207670.png" alt><br>3. 安装 PM2</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/GitLab%E9%9D%9EDockerNETCoreCICD%E6%90%AD%E5%BB%BA/20191217055334058.png" alt><br>4. 配置 PM2 自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 startup</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/GitLab%E9%9D%9EDockerNETCoreCICD%E6%90%AD%E5%BB%BA/20191217055400554.png" alt><br>5. 新建 dotnet 守护服务，保存 pm2 守护列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start <span class="string">"dotnet test-ci.dll"</span> --name testCI</span><br><span class="line">pm2 save</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/GitLab%E9%9D%9EDockerNETCoreCICD%E6%90%AD%E5%BB%BA/20191217055600544.png" alt><br><img src="https://qiniucdn.wayneshao.com/GitLab%E9%9D%9EDockerNETCoreCICD%E6%90%AD%E5%BB%BA/20191217055718569.png" alt></p><h2 id="GitLab-CI-CD"><a href="#GitLab-CI-CD" class="headerlink" title="GitLab CI/CD"></a>GitLab CI/CD</h2><h3 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h3><p><img src="https://qiniucdn.wayneshao.com/20191217055906645.png" alt></p><h3 id="在项目源码更目录增加-gitlab-ci-yml"><a href="#在项目源码更目录增加-gitlab-ci-yml" class="headerlink" title="在项目源码更目录增加 .gitlab-ci.yml"></a>在项目源码更目录增加 .gitlab-ci.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy_dev</span></span><br><span class="line"><span class="attr">build_job:</span></span><br><span class="line">    <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cd</span> <span class="string">test-ci</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">restore</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">build</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">export</span> <span class="string">COMMIT_TIME=$(git</span> <span class="string">show</span> <span class="string">-s</span> <span class="string">--format=%ct</span> <span class="string">$CI_COMMIT_SHA)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">export</span> <span class="string">COMMIT_TIME_STR=$(date</span> <span class="string">-d</span> <span class="string">@$COMMIT_TIME</span> <span class="string">+%Y%m%d%k%M%S)</span></span><br><span class="line"><span class="attr">deploy_master_job:</span></span><br><span class="line">    <span class="attr">stage:</span> <span class="string">deploy_dev</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">development</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">script:</span></span><br><span class="line">        <span class="comment"># 发布程序并部署运行</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cd</span> <span class="string">test-ci</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"version:$COMMIT_TIME_STR"</span></span><br><span class="line">        <span class="comment"># 发布</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">publish</span> <span class="string">-c</span> <span class="string">Release</span> <span class="string">--output</span> <span class="string">bin/publish</span></span><br><span class="line">        <span class="comment"># 压缩</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cd</span> <span class="string">bin/publish</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zip</span> <span class="string">-r</span> <span class="string">$COMMIT_TIME_STR.zip</span> <span class="string">./</span></span><br><span class="line">        <span class="comment"># 备份</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span> <span class="string">$COMMIT_TIME_STR.zip</span> <span class="string">/opt/backup-cd/test-ci/</span></span><br><span class="line">        <span class="comment"># 部署服务一</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">lftp</span> <span class="string">sftp://$DEV_URL_1</span> <span class="string">-e</span> <span class="string">"user $DEV_USER $DEV_PASS; cd /root/test-ci; put $COMMIT_TIME_STR.zip; bye"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">"$DEV_PASS"</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$DEV_USER@$DEV_URL_1</span> <span class="string">"cd /root/test-ci;unzip -o ./$COMMIT_TIME_STR.zip;rm -Rf ./$COMMIT_TIME_STR.zip;"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">"$DEV_PASS"</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$DEV_USER@$DEV_URL_1</span> <span class="string">"pm2 restart testCI;pm2 status;"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 部署服务二</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">lftp</span> <span class="string">sftp://$DEV_URL_2</span> <span class="string">-e</span> <span class="string">"user $DEV_USER $DEV_PASS; cd /root/test-ci; put $COMMIT_TIME_STR.zip; bye"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">"$DEV_PASS"</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$DEV_USER@$DEV_URL_2</span> <span class="string">"cd /root/test-ci;ls;unzip -o ./$COMMIT_TIME_STR.zip;rm -Rf ./$COMMIT_TIME_STR.zip"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">"$DEV_PASS"</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$DEV_USER@$DEV_URL_2</span> <span class="string">"pm2 restart testCI;pm2 status;"</span></span><br><span class="line">        <span class="comment"># 删除压缩包</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-Rf</span> <span class="string">./$COMMIT_TIME_STR.zipx</span></span><br></pre></td></tr></table></figure><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><p>使用 yum 安装的官方提供的 NodeJS 最新版本为6.X，使用nrm会报错，属于低版本NodeJS本身对coffeescript的兼容问题，想要安装新版的NodeJS可以参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnBzMnRhby9wLzk5NTYxMzkuaHRtbA==" title="https://www.cnblogs.com/fps2tao/p/9956139.html">这篇文章<i class="fa fa-external-link"></i></span>，我用的方法是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25vZGVzb3VyY2UvZGlzdHJpYnV0aW9ucw==" title="https://github.com/nodesource/distributions">nodesource/distributions<i class="fa fa-external-link"></i></span>：<br><img src="https://qiniucdn.wayneshao.com/20191217055906645.png" alt></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>GitLab</tag>
        <tag>CI/CD</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>ListBox 扩展方法-获取所有Item构成的集合</title>
    <url>/posts/5516.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天在实现一个小功能 “插入更新 ListBox 中的 Item ”时，发现 <code>ListBox.Items</code> 的类型 <code>ListBox.ObjectCollection</code> 实现了 <code>IList</code>, <code>ICollection</code>, <code>IEnumerable</code>三个接口，整体的方法已经非常接近一个数组，但是方便程度跟数据确实差距较大，Linq 也完全不能使用，故封装一个扩展方法实现直接获取 <code>ListBox.Items</code>中所储存的数据的集合。</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System.Windows.Forms</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ListBoxExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取 ListBox.Items 中的数据构成的集合</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>ListBox.Items中储存的数据的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="listbox"&gt;</span>ListBox对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;T&gt; GetItems&lt;T&gt;(<span class="keyword">this</span> ListBox listbox) <span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> items = <span class="keyword">new</span> <span class="keyword">object</span>[listbox.Items.Count];</span><br><span class="line">            listbox.Items.CopyTo(items, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> current = items.Select(i =&gt; i <span class="keyword">as</span> T).Where(i =&gt; i != <span class="literal">null</span>).ToList();</span><br><span class="line">            <span class="keyword">if</span> (listbox.Items.Count != current.Count)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$"并非所有元素都为<span class="subst">&#123;<span class="keyword">typeof</span>(T).Name&#125;</span>类型"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> current.ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC学习笔记索引帖</title>
    <url>/posts/375.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="MVC学习笔记索引帖"><a href="#MVC学习笔记索引帖" class="headerlink" title="MVC学习笔记索引帖"></a>MVC学习笔记索引帖</h1><a id="more"></a><p><a href="cjdsu1gvb000mjgkbaiuicjql.html">【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现</a></p><p><a href="cjdsuiiy8000qjgkbr90ccd59.html">【MVC学习笔记】2.使用T4模板生成其他类的具体实现</a></p><p><a href="cjdsursww000tjgkbwkx2jcyr.html">【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）</a></p><p><a href="cjdsvb5540010jgkbpzf0p0be.html">【MVC学习笔记】4.使用Log4Net来进行错误日志的记录</a></p><p><a href="cjdsvhlwr0015jgkb4dxozvxi.html">【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）</a></p><p><a href="cjdsvqsvv001ajgkbjw972ezv.html">【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态</a></p><p><a href="cjdswd091001mjgkbhuo2l56k.html">【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码</a></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>EFCore MySQL System.TypeLoadException occurred 问题解决</title>
    <url>/posts/11533.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　今天在使用 EFCore + MySQL 搭一个小Demo的时候,在 Migration 环节遇到了这样一个问题。</p><blockquote><p>System.TypeLoadException occurred<br>HResult=0x80131522<br>Message=Method ‘Clone’ in type ‘MySQL.Data.EntityFrameworkCore.Infraestructure.Internal.MySQLOptionsExtension’ from assembly ‘MySql.Data.EntityFrameworkCore, Version=8.0.8.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d’ does not have an implementation.</p></blockquote><a id="more"></a><p>几经排查无果之后求助了Google，发现了一条状况相同的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phc29uc3R1cmdlcy9teXNxbC1kb3RuZXQtY29yZS9pc3N1ZXMvMQ==" title="https://github.com/jasonsturges/mysql-dotnet-core/issues/1">Issue<i class="fa fa-external-link"></i></span><br>项目作者的回复如下</p><blockquote><p>　　@lixiandai Hi, yes, this is frustrating - Oracle’s MySQL does not yet fully support .NET Core 2.</p></blockquote><blockquote><p>　　In the interim, I suggest using Pomelo, which can be installed by executing the following command:</p></blockquote><blockquote><p>　　$ dotnet add package Pomelo.EntityFrameworkCore.MySql –version 2.0.0-rtm-10062<br>Or, add the following line to your .csproj ItemGroup</p></blockquote><blockquote><p>　　<packagereference include="Pomelo.EntityFrameworkCore.MySql" version="2.0.0-rtm-10062"></packagereference></p></blockquote><p>　　所以其实是MySQL的官方驱动包的锅喽?</p><p>　　按照作者的推荐选择了一位国内大佬的项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BvbWVsb0ZvdW5kYXRpb24vUG9tZWxvLkVudGl0eUZyYW1ld29ya0NvcmUuTXlTcWw=" title="https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql">Pomelo.EntityFrameworkCore.MySql<i class="fa fa-external-link"></i></span>，成功解决问题。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>EFCore</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法复习】贪心算法之最小生成树Prim算法</title>
    <url>/posts/44726.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最小生成树的Prim算法也是贪心算法的一大经典应用。Prim算法的特点是时刻维护一棵树，算法不断加边，加的过程始终是一棵树。</p><a id="more"></a><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Prim算法过程：</p><p>一条边一条边地加， 维护一棵树。</p><p>初始 E ＝ ｛｝空集合， V = ｛任意节点｝</p><p>循环（n – 1）次，每次选择一条边（v1,v2）， 满足：v1属于V , v2不属于V。且（v1,v2）权值最小。</p><p>E = E + （v1,v2）<br>V = V + v2</p><p>最终E中的边是一棵最小生成树， V包含了全部节点。</p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>以下图为例介绍Prim算法的执行过程。<br><img src="https://qiniucdn.wayneshao.com/20180228211614459/20180228092129488.png" alt><br>Prim算法的过程从A开始 V = {A}, E = {}<br><img src="https://qiniucdn.wayneshao.com/20180228211614459/20180228092216396.png" alt><br>选中边AF , V = {A, F}, E = {(A,F)}<br><img src="https://qiniucdn.wayneshao.com/20180228211614459/20180228092234421.png" alt><br>选中边FB, V = {A, F, B}, E = {(A,F), (F,B)}<br><img src="https://qiniucdn.wayneshao.com/20180228211614459/20180228092252771.png" alt><br>选中边BD, V = {A, B, F, D}, E = {(A,F), (F,B), (B,D)}<br><img src="https://qiniucdn.wayneshao.com/20180228211614459/20180228092305430.png" alt><br>选中边DE, V = {A, B, F, D, E}, E = {(A,F), (F,B), (B,D), (D,E)}<br><img src="https://qiniucdn.wayneshao.com/20180228211614459/20180228092428701.png" alt><br>选中边BC, V = {A, B, F, D, E, c}, E = {(A,F), (F,B), (B,D), (D,E), (B,C)}, 算法结束。</p><h2 id="算法证明"><a href="#算法证明" class="headerlink" title="算法证明"></a>算法证明</h2><p>Prim算法的证明：假设Prim算法得到一棵树P，有一棵最小生成树T。假设P和T不同，我们假设Prim算法进行到第(K – 1)步时选择的边都在T中，这时Prim算法的树是P’, 第K步时,Prim算法选择了一条边e = (u, v)不在T中。假设u在P’中，而v不在。</p><p>因为T是树，所以T中必然有一条u到v的路径，我们考虑这条路径上第一个点u在P’中，最后一个点v不在P’中，则路径上一定有一条边f = (x,y)，x在P’中，而且y不在P’中。<br>我们考虑f和e的边权w(f)与w(e)的关系：</p><p>若w(f) &gt; w(e)，在T中用e换掉f （T中加上e去掉f)，得到一个权值和更小的生成树，与T是最小生成树矛盾。<br>若w(f) &lt; w(e), Prim算法在第K步时应该考虑加边f，而不是e,矛盾。</p><p>因此只有w(f) = w(e),我们在T中用e换掉f，这样Prim算法在前K步选择的边在T中了，有限步之后把T变成P,而树权值和不变， 从而Prim算法是正确的。<br>请仔细理解Prim算法——时刻维护一棵生成树。我们的证明构造性地证明了所有地最小生成树地边权（多重）集合都相同！</p><h2 id="题目测试"><a href="#题目测试" class="headerlink" title="题目测试"></a>题目测试</h2><p>最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。</p><p><strong>输入</strong></p><p>第1行：2个数N,M中间用空格分隔，N为点的数量，M为边的数量。（2 &lt;= N &lt;= 1000, 1 &lt;= M &lt;= 50000)<br>第2 - M + 1行：每行3个数S E W，分别表示M条边的2个顶点及权值。(1 &lt;= S, E &lt;= N，1 &lt;= W &lt;= 10000)</p><p><strong>输出</strong></p><p>输出最小生成树的所有边的权值之和。</p><p><strong>输入示例</strong></p><blockquote><p>9 14<br>1 2 4<br>2 3 8<br>3 4 7<br>4 5 9<br>5 6 10<br>6 7 2<br>7 8 1<br>8 9 7<br>2 8 11<br>3 9 2<br>7 9 6<br>3 6 4<br>4 6 14<br>1 8 8</p></blockquote><p>输出示例</p><blockquote><p>37</p></blockquote><p>请选取你熟悉的语言，并在下面的代码框中完成你的程序，注意数据范围，最终结果会造成Int32溢出，这样会输出错误的答案。<br>不同语言如何处理输入输出，请查看下面的语言说明。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>声明一个结构类型储存“边”的信息。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Side</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] Endpoints;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Side</span>(<span class="params"><span class="keyword">int</span> endpoint1, <span class="keyword">int</span> endpoint2, <span class="keyword">int</span> weight</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Endpoints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>] &#123; endpoint1, endpoint2 &#125;;</span><br><span class="line">        Weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先读入总边数和总点数</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> line1 = Console.ReadLine().Split(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">var</span> n = Convert.ToInt32(line1[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">var</span> m = Convert.ToInt32(line1[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>读入所有“边”，储存在数组中</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sides = <span class="keyword">new</span> Side[m];</span><br><span class="line"><span class="keyword">var</span> points = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="keyword">var</span> totalWeight = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> line = Console.ReadLine().Split(<span class="string">' '</span>);</span><br><span class="line">    sides[i] = <span class="keyword">new</span> Side(Convert.ToInt32(line[<span class="number">0</span>]), Convert.ToInt32(line[<span class="number">1</span>]), Convert.ToInt32(line[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所有边按照权值排序</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> orderSides = sides.OrderBy(s =&gt; s.Weight</span><br></pre></td></tr></table></figure><p>加入起点</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">points.AddRange(orderSides[<span class="number">0</span>].Endpoints);</span><br><span class="line">totalWeight += orderSides[<span class="number">0</span>].Weight;</span><br><span class="line">orderSides.Rem</span><br></pre></td></tr></table></figure><p>Prim：<br>按权值从小到大循环遍历数组里的边，如果发现某一个边的一个端点在端点数组里有，另一个端点在端点数组里没有，就把另一端点也加入，然后累加权值。直到端点数组内端点个数等于总端点数。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (points.Count != n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; orderSides.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((!points.Contains(orderSides[i].Endpoints[<span class="number">0</span>]) &amp;&amp; !points.Contains(orderSides[i].Endpoints[<span class="number">1</span>]))||(points.Contains(orderSides[i].Endpoints[<span class="number">0</span>]) &amp;&amp; points.Contains(orderSides[i].Endpoints[<span class="number">1</span>]))) <span class="keyword">continue</span>;</span><br><span class="line">        points.Add(points.Contains(orderSides[i].Endpoints[<span class="number">0</span>]) ? orderSides[i].Endpoints[<span class="number">1</span>] : orderSides[i].Endpoints[<span class="number">0</span>]);</span><br><span class="line">        totalWeight += orderSides[i].Weight;</span><br><span class="line">        orderSides.RemoveAt(i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> Side</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] Endpoints;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Weight;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Side</span>(<span class="params"><span class="keyword">int</span> endpoint1, <span class="keyword">int</span> endpoint2, <span class="keyword">int</span> weight</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Endpoints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>] &#123; endpoint1, endpoint2 &#125;;</span><br><span class="line">            Weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> line1 = Console.ReadLine().Split(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> n = Convert.ToInt32(line1[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> m = Convert.ToInt32(line1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">var</span> sides = <span class="keyword">new</span> Side[m];</span><br><span class="line">        <span class="keyword">var</span> points = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> totalWeight = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> line = Console.ReadLine().Split(<span class="string">' '</span>);</span><br><span class="line">            sides[i] = <span class="keyword">new</span> Side(Convert.ToInt32(line[<span class="number">0</span>]), Convert.ToInt32(line[<span class="number">1</span>]), Convert.ToInt32(line[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> orderSides = sides.OrderBy(s =&gt; s.Weight).ToList();</span><br><span class="line"></span><br><span class="line">        points.AddRange(orderSides[<span class="number">0</span>].Endpoints);</span><br><span class="line">        totalWeight += orderSides[<span class="number">0</span>].Weight;</span><br><span class="line">        orderSides.RemoveAt(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (points.Count != n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; orderSides.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((!points.Contains(orderSides[i].Endpoints[<span class="number">0</span>]) &amp;&amp; !points.Contains(orderSides[i].Endpoints[<span class="number">1</span>]))||(points.Contains(orderSides[i].Endpoints[<span class="number">0</span>]) &amp;&amp; points.Contains(orderSides[i].Endpoints[<span class="number">1</span>]))) <span class="keyword">continue</span>;</span><br><span class="line">                points.Add(points.Contains(orderSides[i].Endpoints[<span class="number">0</span>]) ? orderSides[i].Endpoints[<span class="number">1</span>] : orderSides[i].Endpoints[<span class="number">0</span>]);</span><br><span class="line">                totalWeight += orderSides[i].Weight;</span><br><span class="line">                orderSides.RemoveAt(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(totalWeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
        <tag>Prim</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>Rtmp/Hls直播、点播服务器部署与配置</title>
    <url>/posts/13147.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>测试使用的系统为CentOS7.3、所有文章中涉及到的包打包在以下地址:</p><p>链接：<span class="exturl" data-url="aHR0cDovL3Bhbi5iYWlkdS5jb20vcy8xbnVGM2dMVg==" title="http://pan.baidu.com/s/1nuF3gLV">http://pan.baidu.com/s/1nuF3gLV<i class="fa fa-external-link"></i></span> 密码：fo8q</p><a id="more"></a><h2 id="Nginx-Rtmp-Module-安装"><a href="#Nginx-Rtmp-Module-安装" class="headerlink" title="Nginx-Rtmp-Module 安装"></a>Nginx-Rtmp-Module 安装</h2><p>1). 安装依赖包<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc glibc glibc-devel make nasm pkgconfig openssl-devel expat-devel gettext-devel libtool perl-Digest-SHA1.x86_64</span><br></pre></td></tr></table></figure><p></p><p>2). yum 安装相关工具包及 ffmpeg 依赖包<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install git zlib pcre openssl</span><br></pre></td></tr></table></figure><p></p><p>3). 手动编译安装工具包和依赖包<br>a). <strong>yadmi</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xzvf yamdi-1.9.tar.gz</span><br><span class="line">cd yamdi-1.9</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p></p><p>b). <strong>yasm</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xzvf yasm-1.3.0.tar.gz</span><br><span class="line">cd yasm-1.3.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p></p><p>c). <strong>x264</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xjvf x264.tar.bz2</span><br><span class="line">cd x264-snapshot-20170111-2245</span><br><span class="line">./configure --enable-shared </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p></p><p>d). <strong>lame</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> tar xzvf lame-3.99.5.tar.gz</span><br><span class="line"> cd lame-3.99.5</span><br><span class="line">./configure --enable-nasm</span><br><span class="line"> make &amp;&amp; make install</span><br><span class="line"> cd ..</span><br></pre></td></tr></table></figure><p></p><p>e). <strong>faad2</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf faad2-2.7.tar.gz</span><br><span class="line">cd faad2-2.7</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p></p><p>f). <strong>faac</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf faac-1.28.tar.gz</span><br><span class="line">cd faac-1.28</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>g). <strong>xvid</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf xvidcore-1.3.3.tar.gz</span><br><span class="line">cd xvidcore/build/generic</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>h). <strong>ffmpeg</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xjvf ffmpeg-3.2.4.tar.bz2</span><br><span class="line">cd ffmpeg-3.2.4</span><br><span class="line">./configure  --prefix=/opt/ffmpeg/ --enable-version3 --enable-libvpx --enable-libmp3lame  --enable-libvorbis --enable-libx264 --enable-libxvid --enable-shared --enable-gpl --enable-postproc--enable-nonfree  --enable-avfilter --enable-pthreads</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>i). 修改/etc/ld.so.conf如下:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include ld.so.conf.d/*.conf</span><br><span class="line">/lib</span><br><span class="line">/lib64</span><br><span class="line">/usr/lib</span><br><span class="line">/usr/lib64</span><br><span class="line">/usr/local/lib</span><br><span class="line">/usr/local/lib64</span><br><span class="line">/opt/ffmpeg/lib</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><p></p><p>4). 安装 Nginx<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf nginx-1.9.9.tar.gz</span><br><span class="line">unzip nginx-rtmp-module-master.zip</span><br><span class="line">tar zxvf openssl-1.0.2k.tar.gz</span><br><span class="line">cd nginx-1.9.9</span><br><span class="line">./configure --add-module=../nginx-rtmp-module-master --without-http_rewrite_module --with-openssl=../openssl-1.0.2k</span><br><span class="line">make &amp; make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p></p><h2 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # nginx.conf Start</span><br><span class="line">worker_processes  1;                    #  nginx对外提供 web 服务时的 worker 进程数</span><br><span class="line"></span><br><span class="line">error_log  logs/error.log debug;        # 错误日志路径</span><br><span class="line"></span><br><span class="line">pid        logs/nginx.pid;                #  pid 文件路径</span><br><span class="line">worker_rlimit_nofile 51200;                #  worker 进程的最大打开文件数限制</span><br><span class="line"></span><br><span class="line">events &#123;                                #  events 模块中包含 nginx 中所有处理连接的设置。</span><br><span class="line">    use epoll;                                # 设置用于复用客户端线程的轮询方法。</span><br><span class="line">    worker_connections  51200;                #由一个 worker 进程同时打开的最大连接数。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rtmp_auto_push on;                        # 切换自动推送(多 worker 直播流)模式</span><br><span class="line"></span><br><span class="line">rtmp_auto_push_reconnect 1s;            # 当 worker 被干掉时设置自动推送连接超时时间。默认为 100 毫秒。</span><br><span class="line"></span><br><span class="line">rtmp &#123;                                    # 保存所有 RTMP 配置的块。    </span><br><span class="line">    server &#123;                                # 声明一个 RTMP 实例。</span><br><span class="line">        listen 1935;                            # 监听的端口号</span><br><span class="line">        chunk_size 4096;                        # 流整合的最大的块大小。默认值为 4096。</span><br><span class="line"></span><br><span class="line">        application vod &#123;                        # 创建一个 RTMP 应用。</span><br><span class="line">            play /opt/media/nginxrtmp/flv;            # 点播文件路径</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        application live &#123;                        # 创建一个 RTMP 应用。</span><br><span class="line">            live on;                                # 是否直播</span><br><span class="line">            hls on;                                    # 是否开启hls</span><br><span class="line">            hls_path /usr/local/nginx/html/live;    # 设置 HLS 播放列表和分段目录。</span><br><span class="line">            hls_fragment 1s;                        # 设置 HLS 分段长度。</span><br><span class="line">            max_connections 1024;                    # 最大连接数    </span><br><span class="line">            hls_playlist_length 30s;                #  HLS 播放列表长度</span><br><span class="line">            hls_sync 100ms;                            #  HLS 时间戳同步阈值</span><br><span class="line">            meta copy;                                # 是否发送元数据到客户端    </span><br><span class="line">            recorder manual &#123;                        # 创建一个录制应用</span><br><span class="line">                record all manual;                        # 设置录制模式</span><br><span class="line">                record_suffix %Y-%m-%d-%H_%M_%S.flv;    # 设置录制文件名</span><br><span class="line">                record_max_size 6200000K;                # 设置录制文件的最大值    </span><br><span class="line">                record_path /usr/local/nginx/html/Rec;    # 指定录制的 flv 文件存放目录</span><br><span class="line">            &#125;</span><br><span class="line">            #record keyframes;</span><br><span class="line">            #record_path /tmp;</span><br><span class="line">            #record_max_size 128K;</span><br><span class="line">            #record_interval 30s;</span><br><span class="line">            #record_suffix .this.is.flv;</span><br><span class="line"></span><br><span class="line">            #on_publish http://localhost:8080/publish;</span><br><span class="line">            #on_play http://localhost:8080/play;</span><br><span class="line">            #on_record_done http://localhost:8080/record_done;</span><br><span class="line">        &#125;</span><br><span class="line">        # application hls &#123;  </span><br><span class="line">        #     live on;  </span><br><span class="line">        #     hls on;  </span><br><span class="line">        #     hls_path /tmp/app;  </span><br><span class="line">        #     hls_fragment 5s;  </span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        # application hls&#123;</span><br><span class="line">        #     live on;</span><br><span class="line">        #     hls on;</span><br><span class="line">        #     hls_path /usr/local/nginx/html/hls;</span><br><span class="line">        #     hls_fragment 5s;</span><br><span class="line">        # &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      5000;</span><br><span class="line">        keepalive_timeout  65;</span><br><span class="line">        location /stat &#123;</span><br><span class="line">            rtmp_stat all;</span><br><span class="line">            rtmp_stat_stylesheet stat.xsl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /stat.xsl &#123;</span><br><span class="line">            root /opt/nginx-rtmp-server/nginx-rtmp-module/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /control &#123;</span><br><span class="line">            rtmp_control all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /rtmp-publisher &#123;</span><br><span class="line">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test/www;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /crplayer &#123;</span><br><span class="line">            root /opt/nginx-rtmp-server/nginx-rtmp-module/test;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location /live &#123;  </span><br><span class="line">           #server hls fragments  </span><br><span class="line">            types&#123;  </span><br><span class="line">                application/vnd.apple.mpegurl m3u8;  </span><br><span class="line">                video/mp2t ts;  </span><br><span class="line">            &#125;  </span><br><span class="line">            root html;</span><br><span class="line">            expires -1;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># nginx.conf End</span><br></pre></td></tr></table></figure><h2 id="运行Nginx服务"><a href="#运行Nginx服务" class="headerlink" title="运行Nginx服务"></a>运行Nginx服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /root/nginx/nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>nginx-rtmp</tag>
        <tag>流媒体</tag>
        <tag>hls</tag>
        <tag>点播</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11系统下劫持notepad.exe的方法</title>
    <url>/posts/46308.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　在微软终于对 nodepad.exe 和 mspaint.exe 的界面下手，把这两个系统程序重构为UWP程序后，原有的镜像劫持替换 notepad.exe 的方法就直接失效了，经过研究，找到了亲测可行的替换方法，特此分享。</p><a id="more"></a><p>具体步骤如下：</p><ol><li>卸载新版本的 notepad.exe。</li><li>劫持镜像。</li><li>关闭 UseFilter 开关。</li></ol><p>以下涉及到的软件有：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p1ZnVsaXUvbm90ZXBhZDI=" title="https://github.com/zufuliu/notepad2">Notepad2（待替换的软件）<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5kYXlhbnphaS5tZS9yZWdpc3RyeS1maW5kZXIuaHRtbA==" title="http://www.dayanzai.me/registry-finder.html">Registry Finder<i class="fa fa-external-link"></i></span>（非必要，可以直接用系统自带的 regedit）</li><li>Windows PowerShell（系统自带）<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="卸载-notepad-exe-的升级UWP程序"><a href="#卸载-notepad-exe-的升级UWP程序" class="headerlink" title="卸载 notepad.exe 的升级UWP程序"></a>卸载 notepad.exe 的升级UWP程序</h2>随便用记事本打开一个文件，然后用 taskmanager 追踪文件的位置，得到一个明显是Windows程序的目录。<br><code>C:\Program Files\WindowsApps\Microsoft.WindowsNotepad_10.2102.13.0_x64__8wekyb3d8bbwe\Notepad</code><br><img src="https://qiniucdn.wayneshao.com/Windows11%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%8A%AB%E6%8C%81notepad.exe%E7%9A%84%E6%96%B9%E6%B3%95/20210706034436963.png" alt><br>直接使用 PowerShell 运行以下命令<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-AppxPackage</span> *notepad* | <span class="built_in">Remove-AppxPackage</span></span><br></pre></td></tr></table></figure></li></ul><p>执行完成之后再次用记事本打开文件，得到的目录就在<code>C:\Windows\System32</code>下了，任务管理器里记事本图标会变，记事本状态栏位置也会提示升级。<br><img src="https://qiniucdn.wayneshao.com/Windows11%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%8A%AB%E6%8C%81notepad.exe%E7%9A%84%E6%96%B9%E6%B3%95/20210706034715419.png" alt></p><h2 id="劫持镜像"><a href="#劫持镜像" class="headerlink" title="劫持镜像"></a>劫持镜像</h2><p>先下载待替换的软件，比如我上面列出来的 notepad2 到合适的目录，然后按照老方法做镜像劫持，如果使用我推荐的 notepad2 版本可以直接在设置里进行操作。脚本中的路径可以根据实际情况自行调整。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe" /v "Debugger" /t REG_SZ /d "D:\ProgramData\Notepad2\Notepad2.exe /u /l /z" /f</span><br></pre></td></tr></table></figure><h2 id="关闭-UseFilter-开关"><a href="#关闭-UseFilter-开关" class="headerlink" title="关闭 UseFilter 开关"></a>关闭 UseFilter 开关</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe" /v "UseFilter" /t REG_DWORD /d <span class="number">0</span> /f</span><br></pre></td></tr></table></figure><h2 id="原因分析（推测）"><a href="#原因分析（推测）" class="headerlink" title="原因分析（推测）"></a>原因分析（推测）</h2><p>根据具体细节推测如下：</p><ol><li>Windows 在运行 UWP 程序的时候，跟传统 win32 程序略有不同，会有检查更新的逻辑，如果新版本存在，根本不会触发镜像劫持。</li><li>UseFilter 为 1 时，会触发子目录中的 FilterFullPath 相关的逻辑，导致替换不成功，所以需要关掉。<br><img src="https://qiniucdn.wayneshao.com/Windows11%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%8A%AB%E6%8C%81notepad.exe%E7%9A%84%E6%96%B9%E6%B3%95/20210706040826216.png" alt></li></ol>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>软件心得</tag>
        <tag>notepad</tag>
        <tag>替换记事本</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下DockerCE启用K8s报错kubernetes.docker.internal no such host</title>
    <url>/posts/10324.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>在安装 Windows CE 之后，我尝试从设置菜单中启用Kubernetes，却一直处于 starting 状态不见好，查找位于 <strong><em>C:\ProgramData\DockerDesktop\service.txt</em></strong> 目录下的日志文件后，发现大片大片类似的错误日志：<br><img src="https://qiniucdn.wayneshao.com/20191007041435438.png" alt></p><a id="more"></a><p>根据错误信息</p><blockquote><p>dial tcp: lookup kubernetes.docker.internal: no such host</p></blockquote><p>可知，错误的原因是无法解析到域名 <strong>kubernetes.docker.internal</strong>，随即开始寻找解决思路。</p><h2 id="寻求解决"><a href="#寻求解决" class="headerlink" title="寻求解决"></a>寻求解决</h2><h3 id="一（失败）"><a href="#一（失败）" class="headerlink" title="一（失败）"></a>一（失败）</h3><p>首先我在 DockerCE for Windows 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9mb3Itd2luL2lzc3Vlcy8xOTYy" title="https://github.com/docker/for-win/issues/1962">issue<i class="fa fa-external-link"></i></span> 看到JoseThen提出了如下<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9mb3Itd2luL2lzc3Vlcy8xOTYyI2lzc3VlY29tbWVudC00NDc2MDkwMTg=" title="https://github.com/docker/for-win/issues/1962#issuecomment-447609018">解决方案<i class="fa fa-external-link"></i></span>：</p><blockquote><p>I was able to get this working even after restarting docker::</p></blockquote><ol><li>Change DNS to fixed and use 8.8.8.8, this is within docker for window’s settings</li><li>Remove the .kube</li><li>Add the KUBECONFIG environment variable to System Variables and have the path be C:\Users[MYUSER].kube\config. Note that before I had it set as a User Variable.</li><li>Restart Docker from the Docker for Window’s reset tab in settings.</li><li>Restart Kubernetes Cluster from the Docker for Window’s reset tab in settings (you can do this a number of times).</li><li>Afterwards just wait for some time and Kubernetes is running should display.<br>I hope this can help someone, this issue is a pain.</li></ol><p>查看之后发现 kube 的配置文件确实有配置这个路径<br>clusters[0]&gt;server:<span class="exturl" data-url="aHR0cHM6Ly9rdWJlcm5ldGVzLmRvY2tlci5pbnRlcm5hbDo2NDQz" title="https://kubernetes.docker.internal:6443">https://kubernetes.docker.internal:6443<i class="fa fa-external-link"></i></span> ，按照 JoseThen 的方法删除配置文件后重启，却并未成功解决，重新生成的文件中对应节点的值依然还是之前的地址，继续寻找解决思路。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>之后我在 DockerCE for Mac 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9mb3ItbWFjL2lzc3Vlcy8zODI5" title="https://github.com/docker/for-mac/issues/3829">issue<i class="fa fa-external-link"></i></span> 看到了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9mb3ItbWFjL2lzc3Vlcy8zODI5I2lzc3VlY29tbWVudC01MjA1MDM5NzQ=" title="https://github.com/docker/for-mac/issues/3829#issuecomment-520503974">解决方案<i class="fa fa-external-link"></i></span>，原来 kubernetes.docker.internal 应该指向的就是本机，将</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Kubernetes</span><br><span class="line">127.0.0.1 kubernetes.docker.internal</span><br></pre></td></tr></table></figure><p>加入hosts之后即成功解决。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://qiniucdn.wayneshao.com/Windows%E4%B8%8BDockerCE%E5%90%AF%E7%94%A8K8s%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/20191007045422970.png" alt></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>DockerCE</tag>
        <tag>K8s</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>bash脚本错误 Syntax error: else unexpected (expecting then)解决</title>
    <url>/posts/15091.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天在使用 bash 脚本发布程序时，发生了这样的错误</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx.sh: Syntax error: <span class="string">"else"</span> unexpected (expecting <span class="string">"then"</span>)</span><br></pre></td></tr></table></figure><p>到处搜索资料尝试无果之后想到会不会是编码问题导致，<br>dos2unix 处理后测试果然可以</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install dos2unix</span><br></pre></td></tr></table></figure><p>处理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dos2unix xxx.sh</span><br><span class="line">dos2unix: converting file xxx.sh to Unix format ...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>编码</tag>
        <tag>dos2unix</tag>
      </tags>
  </entry>
  <entry>
    <title>var str = new string(string)问题</title>
    <url>/posts/22967.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>前几日，广州群有小伙伴遇到了这样一道面试题<br><img src="https://qiniucdn.wayneshao.com/20191023021342980.png" alt></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>关于以上语句到底创建了几个对象呢？由于印象里这种使用 string 来初始化 string 的操作并不常见，推测以下，应该是类似于 copy 的操作产生一个新的对象，所以我先盲猜，不考虑有上下文，只针对这一句语句，应该是2个。</p><p>下面来试验：</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>string 属于引用类型，所以我们把单个 string 定义为堆中的对象，两个或多个引用类型变量引用同一个对象时，依然认为只有一个对象。</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="文档分析"><a href="#文档分析" class="headerlink" title="文档分析"></a>文档分析</h3><p>　　首先，事实证明了不是我对 string 了解太少，而是被公司从策划 diss 了几次的升级计划导致我常用的 .NET Core 版本一直是 1.1 ，而用 string 初始化 string 的用法只有在 .NET Core 2.1 及以上版本才有，确切的说，只有 .NET Core 2.1、.NET Core 2.2、.NET Core 3.0 三个版本才有，以上结论来自官方文档并经过实际测试，文档如下：<br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0uc3RyaW5nLi1jdG9yP3ZpZXc9bmV0Y29yZS0yLjAjU3lzdGVtX1N0cmluZ19fY3Rvcl9TeXN0ZW1fUmVhZE9ubHlTcGFuX1N5c3RlbV9DaGFyX18=" title="https://docs.microsoft.com/en-us/dotnet/api/system.string.-ctor?view=netcore-2.0#System_String__ctor_System_ReadOnlySpan_System_Char__">** .NET Core 2.0 String Constructors**<i class="fa fa-external-link"></i></span><br><img src="https://qiniucdn.wayneshao.com/new_string%E9%97%AE%E9%A2%98/20191023023611480.png" alt></p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0uc3RyaW5nLi1jdG9yP3ZpZXc9bmV0Y29yZS0yLjEjU3lzdGVtX1N0cmluZ19fY3Rvcl9TeXN0ZW1fUmVhZE9ubHlTcGFuX1N5c3RlbV9DaGFyX18=" title="https://docs.microsoft.com/en-us/dotnet/api/system.string.-ctor?view=netcore-2.1#System_String__ctor_System_ReadOnlySpan_System_Char__">** .NET Core 2.1 String Constructors**<i class="fa fa-external-link"></i></span><br><img src="https://qiniucdn.wayneshao.com/new_string%E9%97%AE%E9%A2%98/20191023023640662.png" alt></p><p>由官方文档可知，.NET Core 从 2.0 升级为 2.1 时，增加了一个构造函数<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0uc3RyaW5nLi1jdG9yP3ZpZXc9bmV0Y29yZS0yLjEjU3lzdGVtX1N0cmluZ19fY3Rvcl9TeXN0ZW1fUmVhZE9ubHlTcGFuX1N5c3RlbV9DaGFyX18=" title="https://docs.microsoft.com/en-us/dotnet/api/system.string.-ctor?view=netcore-2.1#System_String__ctor_System_ReadOnlySpan_System_Char__"><code>String(ReadOnlySpan&lt;Char&gt;)</code><i class="fa fa-external-link"></i></span><br><img src="https://qiniucdn.wayneshao.com/new_string%E9%97%AE%E9%A2%98/20191023024029871.png" alt><br>题目中的 new(“qqq”)使用的正式这一构造函数，入参为 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0ucmVhZG9ubHlzcGFuLTE/dmlldz1uZXRjb3JlLTIuMQ==" title="https://docs.microsoft.com/en-us/dotnet/api/system.readonlyspan-1?view=netcore-2.1"><code>ReadOnlySpan&lt;Char&gt;</code>结构体泛型<i class="fa fa-external-link"></i></span>，而这一类型也正是从 .NET Core 2.1 版本才新引入的。</p><p>故，<strong>这一题目在 <code>.NET Core 2.1</code> - <code>.NET Core 3.0</code> 版本成立，其余.NET 版本中均无法编译通过</strong>。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>下面开始直接代码寻找答案，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9jb3JlY2xyL2Jsb2IvbWFzdGVyL3NyYy9TeXN0ZW0uUHJpdmF0ZS5Db3JlTGliL3NoYXJlZC9TeXN0ZW0vU3RyaW5nLmNz" title="https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/String.cs">查看 String.cs 源码<i class="fa fa-external-link"></i></span></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[<span class="meta">MethodImpl(MethodImplOptions.InternalCall)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">extern</span> <span class="title">String</span>(<span class="params">ReadOnlySpan&lt;<span class="keyword">char</span>&gt; <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !CORECLR</span></span><br><span class="line"><span class="keyword">static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">string</span> <span class="title">Ctor</span>(<span class="params">ReadOnlySpan&lt;<span class="keyword">char</span>&gt; <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">value</span>.Length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> Empty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> result = FastAllocateString(<span class="keyword">value</span>.Length);</span><br><span class="line">    Buffer.Memmove(<span class="keyword">ref</span> result._firstChar, <span class="keyword">ref</span> MemoryMarshal.GetReference(<span class="keyword">value</span>), (<span class="keyword">uint</span>)<span class="keyword">value</span>.Length);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">[<span class="meta">MethodImpl(MethodImplOptions.AggressiveInlining)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> ReadOnlySpan&lt;<span class="keyword">char</span>&gt;(<span class="keyword">string</span>? <span class="keyword">value</span>) =&gt;</span><br><span class="line">    <span class="keyword">value</span> != <span class="literal">null</span> ? <span class="keyword">new</span> ReadOnlySpan&lt;<span class="keyword">char</span>&gt;(<span class="keyword">ref</span> <span class="keyword">value</span>.GetRawStringData(), <span class="keyword">value</span>.Length) : <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><p>由官方源码可知，当入参为 string 时，首先会调用隐式转换方法将入参转换为<code>ReadOnlySpan&lt;char&gt;</code>类型，而后再使用转换后的值调用构造函数<code>String(ReadOnlySpan&lt;char&gt; value)</code>，构造函数中，重新分配了新的内存空间给新字符串，将入参的值 Copy 到新字符串后返回，<strong>所以该构造函数会产生一个全新的字符串值</strong>。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>以下是试验代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> str0 = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="string">"123"</span>);</span><br><span class="line">            <span class="keyword">var</span> str2 = <span class="string">"123"</span>;</span><br><span class="line">            <span class="keyword">var</span> str3 = str2;</span><br><span class="line">            <span class="keyword">var</span> str4 = <span class="string">"123"</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;GetMemoryAddress(str0)&#125;</span> - <span class="subst">&#123;GetMemoryAddress(str1)&#125;</span> - <span class="subst">&#123;GetMemoryAddress(str2)&#125;</span> - <span class="subst">&#123;GetMemoryAddress(str3)&#125;</span> - <span class="subst">&#123;GetMemoryAddress(str4)&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">object</span>.ReferenceEquals(str0,str1)&#125;</span> - <span class="subst">&#123;<span class="keyword">object</span>.ReferenceEquals(str1,str2)&#125;</span> - <span class="subst">&#123;<span class="keyword">object</span>.ReferenceEquals(str2,str3)&#125;</span> - <span class="subst">&#123;<span class="keyword">object</span>.ReferenceEquals(str3,str4)&#125;</span>"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetMemoryAddress</span>(<span class="params"><span class="keyword">object</span> o</span>)</span></span><br><span class="line"><span class="function"></span>            =&gt;</span><br><span class="line">                <span class="string">$"0x<span class="subst">&#123;GCHandle.Alloc(o, GCHandleType.Pinned).AddrOfPinnedObject().ToString(<span class="string">"X"</span>)&#125;</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br><img src="https://qiniucdn.wayneshao.com/new_string%E9%97%AE%E9%A2%98/20191023032318413.png" alt></p><h3 id="IL代码"><a href="#IL代码" class="headerlink" title="IL代码"></a>IL代码</h3><p><img src="https://qiniucdn.wayneshao.com/new_string%E9%97%AE%E9%A2%98/20191023031520047.png" alt><br>由 IL 代码可知，的确是先调用了隐式转换函数，而后再使用转换后的值调用构造函数<code>String(ReadOnlySpan&lt;char&gt; value)</code>。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>这一题目在 <code>.NET Core 2.1</code> - <code>.NET Core 3.0</code> 版本成立，其余.NET 版本中均无法编译通过。</li><li>如果传入的字符串已在字符串常量池中，那么该语句只会产生一个新的 string 对象。</li><li>如果传入的字符串未在字符串常量池中，那么该语句会产生两个新的string对象。</li></ol>]]></content>
      <categories>
        <category>面试笔记</category>
      </categories>
      <tags>
        <tag>string</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>redhat7.3配置163 yum源</title>
    <url>/posts/12206.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>redhat 的更新包只对注册的用户生效，所以我们需要自己手动更改成CentOS 的更新包，CentOS几乎和redhat是一样的，所以无需担心软件包是否可安装，安装之后是否有问题。</p><a id="more"></a><h2 id="删除redhat原有的yum"><a href="#删除redhat原有的yum" class="headerlink" title="删除redhat原有的yum"></a>删除redhat原有的yum</h2><p>首先删除redhat原有的yum ，因为redhat 原本的yum 没有注册为redhat用户是用不了的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -aq|grep yum|xargs rpm -e --nodeps </span><br><span class="line">rpm -aq|grep python-iniparse|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h2 id="下载163的yum-安装包"><a href="#下载163的yum-安装包" class="headerlink" title="下载163的yum 安装包"></a>下载163的yum 安装包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-3.4.3-150.el7.centos.noarch.rpm</span><br><span class="line">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class="line">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class="line">wget http://mirrors.163.com/centos/7.3.1611/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-40.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="安装下载的rpm包"><a href="#安装下载的rpm包" class="headerlink" title="安装下载的rpm包"></a>安装下载的rpm包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure><h3 id="创建文件-etc-yum-repos-d-rhel-debuginfo-repo并写入"><a href="#创建文件-etc-yum-repos-d-rhel-debuginfo-repo并写入" class="headerlink" title="创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入"></a>创建文件/etc/yum.repos.d/rhel-debuginfo.repo并写入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7.3.1611/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#released updates</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7.3.1611/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7.3.1611/extras//$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/7.3.1611/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7.3.1611/centosplus//$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br></pre></td></tr></table></figure><h3 id="yum-clean-all"><a href="#yum-clean-all" class="headerlink" title="yum clean all"></a>yum clean all</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h3 id="yum-update-测试。"><a href="#yum-update-测试。" class="headerlink" title="yum update 测试。"></a>yum update 测试。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h3 id="安装-epel-源"><a href="#安装-epel-源" class="headerlink" title="安装 epel 源"></a>安装 epel 源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>redhat</tag>
        <tag>yum源</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1182 完美字符串</title>
    <url>/posts/52125.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMTgy" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1182">*<em>1182 完美字符串 *</em><i class="fa fa-external-link"></i></span><br>题目来源： Facebook Hacker Cup选拔<br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题</p><p>约翰认为字符串的完美度等于它里面所有字母的完美度之和。每个字母的完美度可以由你来分配，不同字母的完美度不同，分别对应一个1-26之间的整数。<br>约翰不在乎字母大小写。（也就是说字母F和f）的完美度相同。给定一个字符串，输出它的最大可能的完美度。例如：dad，你可以将26分配给d，25分配给a，这样整个字符串完美度为77。</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>输入一个字符串S(S的长度 &lt;= 10000)，S中没有除字母外的其他字符。</p><p><strong>Output</strong><br>由你将1-26分配给不同的字母，使得字符串S的完美度最大，输出这个完美度。</p><p><strong>Input示例</strong></p><blockquote><p>dad</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>77</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题很简单，可以自主赋予权值，则吧字符串中每个字母出现的次数统计出来，再按照次数降序排序，从第一个元素开始到次数不为0的最后一个元素n分别讲数量乘以26-n+1，之后将所有运算结果相加即为最终结果。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><p>```csharp<br>using System;<br>using System.Collections.Generic;<br>using System.Linq;</p><p>public class Sum<br>{<br>public static void Main()<br>{<br>var str = Console.ReadLine();<br>var countDic = new Dictionary&lt;char, int&gt;();</p><pre><code>    foreach (var c in str.ToCharArray())
        if (countDic.ContainsKey(c))
            countDic[c]++;
        else
            countDic.Add(c, 1);

    var countE = countDic.Where(i =&gt; i.Key &gt; 0).Select(i =&gt; i.Value).OrderByDescending(i =&gt; i).ToArray();

    var s = 0;
    for (var i = 0; i &lt; countE.Count(); i++)
        s += countE[i] * (26 - i);

    Console.WriteLine(s);
}</code></pre><p>}<br>```<img src="undefined" alt></p>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1284 2 3 5 7的倍数</title>
    <url>/posts/41184.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMjg0" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1284">*<em>1284 2 3 5 7的倍数 *</em><i class="fa fa-external-link"></i></span><br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题</p><p>给出一个数N，求1至N中，有多少个数不是2 3 5 7的倍数。 例如N = 10，只有1不是2 3 5 7的倍数。</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>输入1个数N(1 &lt;= N &lt;= 10^18)。<br><strong>Output</strong><br>输出不是2 3 5 7的倍数的数共有多少。<br><strong>Input示例</strong></p><blockquote><p>10</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>1</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求取1到数字N之间共有多少个数不是2 3 5 7的倍数，只需要求取1到2 3 5 7的最小公倍数210之间不是的个数48，然后再求出1到N / 210之间不是的个数mCount，即可得出最终结果N / 210 * 48 + mCount。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> input = Convert.ToInt64(Console.ReadLine());</span><br><span class="line">        <span class="keyword">var</span> m = input % <span class="number">210</span>;</span><br><span class="line">        <span class="keyword">var</span> mCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> || i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span> || i % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                mCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        Console.WriteLine(input / <span class="number">210</span> * <span class="number">48</span> + mCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1289 大鱼吃小鱼</title>
    <url>/posts/28398.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMjg5" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1289">*<em>1289 大鱼吃小鱼 *</em><i class="fa fa-external-link"></i></span><br>题目来源： <span class="exturl" data-url="aHR0cHM6Ly9jb2RpbGl0eS5jb20v" title="https://codility.com/">Codility<i class="fa fa-external-link"></i></span><br>基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题<br>有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数N，表示鱼的数量(1 &lt;= N &lt;= 100000)。<br>第2 - N + 1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 &lt;= A[i] &lt;= 10^9，B[i] = 0 或 1，0表示向左，1表示向右）。<br><strong>Output</strong><br>输出1个数，表示最终剩下的鱼的数量。<br><strong>Input示例</strong></p><blockquote><p>5<br>4 0<br>3 1<br>2 0<br>1 0<br>5 0</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题目确切来讲有点不太严谨，比如每条鱼的起始位置、相同大小的鱼相遇后的情况就并未提供，这两个条件也会影响最终的结果。</p><p>我们按照从左到右依次摆放所有鱼、两条相同的鱼相遇后只会有一条胜出来计算，则可以使用Stack完美的解决这个问题。如果鱼向右走则入栈，如果鱼向左走则循环判断它和栈顶元素的大小关系，若比栈顶元素大，则移除元素继续循环，如果栈内无元素则记录左鱼幸存条数++并跳出循环，如果比栈顶元素小则直接跳出循环。最终统计栈内元素个数和左鱼幸存条数的和即为最终幸存的鱼的数量。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class="line">        <span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class="line">        <span class="keyword">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class="line">        <span class="keyword">var</span> leftFishs = <span class="keyword">new</span> Stack&lt;<span class="keyword">long</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> input = sr.ReadLine().Split(<span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">var</span> dx = Convert.ToInt64(input[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> fx = Convert.ToInt32(input[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (fx == <span class="number">1</span>)</span><br><span class="line">                leftFishs.Push(dx);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                    <span class="keyword">if</span> (leftFishs.Count &gt; <span class="number">0</span> &amp;&amp; leftFishs.Peek() &lt;= dx)</span><br><span class="line">                        leftFishs.Pop();</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (leftFishs.Count == <span class="number">0</span>)</span><br><span class="line">                            left++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sw.WriteLine(leftFishs.Count + left);</span><br><span class="line">        sw.Flush();</span><br><span class="line">        sr.Close();</span><br><span class="line">        sw.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1305 Pairwise Sum and Divide</title>
    <url>/posts/34469.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMzA1" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1305">*<em>1305 Pairwise Sum and Divide *</em><i class="fa fa-external-link"></i></span></p><p>题目来源： HackerRank<br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有这样一段程序，fun会对整数数组A进行求值，其中Floor表示向下取整：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fun(A)</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to A.length</span><br><span class="line">        <span class="keyword">for</span> j = i+<span class="number">1</span> to A.length</span><br><span class="line">            sum = sum + Floor((A[i]+A[j])/(A[i]*A[j])) </span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>给出数组A，由你来计算fun(A)的结果。例如：A = {1, 4, 1}，fun(A) = [5/4] + [2/1] + [5/4] = 1 + 2 + 1 = 4。</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数N，表示数组A的长度(1 &lt;= N &lt;= 100000)。<br>第2 - N + 1行：每行1个数A[i]（1 &lt;= A[i] &lt;= 10^9)。<br><strong>Output</strong><br>输出fun(A)的计算结果。<br><strong>Input示例</strong></p><blockquote><p>3<br>1<br>4<br>1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>4</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为题目给出的已经是近乎伪代码了，所以初始很容易直接按照程序中给出的逻辑来提交，然而可能是C#的效率问题，差不多一般的测试都超时了，下面是第一版的代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class="line">        <span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class="line">        <span class="keyword">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="keyword">long</span>[count];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">            list[i] = Convert.ToInt64(sr.ReadLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; count; j++)</span><br><span class="line">                sum += (list[i] + list[j]) / (list[i] * list[j]);</span><br><span class="line">        sw.WriteLine(sum);</span><br><span class="line">        sw.Flush();</span><br><span class="line">        sr.Close();</span><br><span class="line">        sw.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候返回来分析题目，100,000次输入操作，之后双层循环差不多10,000,000,000次循环内操作，C#在1.5s内确实不大可能完的成，只能从题目入手重新分析了。</p><p>题目总的来分析就是每个数和集合中的所有其他数做一次和除以积取整的操作后的和。</p><p>仔细考虑后不难发现，其实所有的数里只有1和2是可以做有效贡献的，其他数做上述运算一定是0，所以其实只需要统计1和2的数量即可。<br>其中，1和1的运算结果为2，1和其他数的计算结果是1，2和2的计算结果是1。设一个长度为n的集合里，1的个数为a，2的个数为b，则这个集合的运算结果公式为：</p><p>$C_a^2+a(n-a)+C_b^2$</p><p>化简可得：</p><p>$a(a-1)+a(n-a)+\frac{1}{2}(b*(b-1))$</p><p>PS.因为每个数的范围最大可达$10^9$，所以我们使用64位的long类型来接收和运算。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class="line">        <span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class="line">        <span class="keyword">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> s = Convert.ToInt64(sr.ReadLine());</span><br><span class="line">            <span class="keyword">switch</span> (s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    a++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    b++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum = a * (a - <span class="number">1</span>) + a * (count - a) + (b * (b - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        sw.WriteLine(sum);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">        sw.Flush();</span><br><span class="line">        sr.Close();</span><br><span class="line">        sw.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1344 走格子</title>
    <url>/posts/16190.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMzQ0" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1344"><strong>1344 走格子</strong><i class="fa fa-external-link"></i></span></p><p>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有编号1-n的n个格子，机器人从1号格子顺序向后走，一直走到n号格子，并需要从n号格子走出去。机器人有一个初始能量，每个格子对应一个整数A[i]，表示这个格子的能量值。如果A[i] &gt; 0，机器人走到这个格子能够获取A[i]个能量，如果A[i] &lt; 0，走到这个格子需要消耗相应的能量，如果机器人的能量 &lt; 0，就无法继续前进了。问机器人最少需要有多少初始能量，才能完成整个旅程。</p><p>例如：n = 5。{1，-2，-1，3，4} 最少需要2个初始能量，才能从1号走到5号格子。途中的能量变化如下3 1 0 3 7。</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>第1行：1个数n，表示格子的数量。(1 &lt;= n &lt;= 50000)<br>第2 - n + 1行：每行1个数A[i]，表示格子里的能量值(-1000000000 &lt;= A[i] &lt;= 1000000000)<br><strong>Output</strong><br>输出1个数，对应从1走到n最少需要多少初始能量。<br><strong>Input示例</strong></p><blockquote><p>5<br>1<br>-2<br>-1<br>3<br>4</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题的主要问题主要是需要考虑到精度问题，格子数最多为50,000，每个格子能量范围为 -1,000,000,000 &lt;= NL &lt;= 1,000,000,000，总能量范围则为 -50,000,000,000,000 &lt;= MaxNL &lt;= 50,000,000,000,000，超出了Int32类型的范围-2147483648 &lt;= Int32 &lt;= 2147483647。需要使用Int64类型。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> count = Convert.ToInt64(Console.ReadLine());</span><br><span class="line">        <span class="keyword">var</span> nl = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">var</span> zxnl = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            nl += Convert.ToInt64(Console.ReadLine());</span><br><span class="line">            zxnl = nl &lt; zxnl ? nl : zxnl;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(zxnl &gt; <span class="number">0</span> ? <span class="number">0</span> : <span class="number">0</span> - zxnl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1347 旋转字符串</title>
    <url>/posts/40433.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMzQ3" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1347"><strong>1347 旋转字符串</strong><i class="fa fa-external-link"></i></span></p><p>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>S[0…n-1]是一个长度为n的字符串，定义旋转函数Left(S)=S[1…n-1]+S[0].比如S=”abcd”,Left(S)=”bcda”.一个串是对串当且仅当这个串长度为偶数，前半段和后半段一样。比如”abcabc”是对串,”aabbcc”则不是。<br>现在问题是给定一个字符串，判断他是否可以由一个对串旋转任意次得到。</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>第1行：给出一个字符串（字符串非空串，只包含小写字母，长度不超过1000000）<br><strong>Output</strong><br>对于每个测试用例，输出结果占一行，如果能，输出YES，否则输出NO。<br><strong>Input示例</strong></p><blockquote><p>aa<br>ab</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>YES<br>NO</p></blockquote><p>C#的运行时限为：1500 ms ，空间限制为：196608 KB</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>从旋转函数定义来看，将字符串第一个字符移动到字符串的末尾，很容易想当然的以为需要进行Length-1次循环判断完所有旋转后的结果。<br>题目中输入字符串长度最多为1,000,000，最多需要500,000次判断才能得出该字符串是否为对串，如果进行Length-1次循环，那计算次数最多会达到500,000,000,000，结果必然是超时。</p><p>而实际上，当一个字符串是对串（即前半段和后半段完全相同的字符串）时，它无论经过多少次旋转都依然还是对串，所以只需要对输入字符串进行一次判断即可。</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> str = Console.ReadLine();</span><br><span class="line">        <span class="keyword">if</span> (str.Length % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> strQueue = str.ToCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; strQueue.Length / <span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strQueue[j] == strQueue[strQueue.Length / <span class="number">2</span> + j]) <span class="keyword">continue</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"NO"</span>); ;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】1381 硬币游戏</title>
    <url>/posts/59607.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0xMzgx" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1381"><strong>1381 硬币游戏</strong><i class="fa fa-external-link"></i></span><br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题</p><p>有一个简单但是很有趣的游戏。在这个游戏中有一个硬币还有一张桌子，这张桌子上有很多平行线（如下图所示）。两条相邻平行线之间的距离是1，硬币的半径是R，然后我们来抛硬币到桌子上，抛下之后硬币有时候会和一些直线相交（相切的情况也算是相交），有时候不会。<br>请你来计算一下抛一次硬币之后，该硬币和直线相交数目的期望。<br><img src="https://qiniucdn.wayneshao.com/20180305013606666/20180224023425513.png" alt></p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>第一行给出一个整数T，表示有T组数据(1&lt;=T&lt;=10000)。<br>第2行到T+1，每行给出一个整数R。(0&lt; R &lt;= 10,000,000,000)<br><strong>Output</strong><br>对于每一个数据，在一行中输出答案的整数部分即可。<br><strong>Input示例</strong></p><blockquote><p>1<br>1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>2</p></blockquote><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>由题目可知，输入的R是整数，所以分析硬币落桌之后只有两种情况：</p><ol><li>硬币边缘和某两条线相切，这个时候会有一条线经过圆心，总共有2R+1条线与圆相交，这种情况的概率非常低。</li><li>硬币和所有线都没有相切，总共有2R条线与圆相交。</li></ol><p>所以总体的期望为2R</p><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> count = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">            Console.WriteLine(Convert.ToInt32(Console.ReadLine()) * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
        <tag>概率</tag>
      </tags>
  </entry>
  <entry>
    <title>【51NOD刷题】2020 排序相减</title>
    <url>/posts/52661.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy41MW5vZC5jb20vb25saW5lSnVkZ2UvcXVlc3Rpb25Db2RlLmh0bWwjIXByb2JsZW1JZD0yMDIw" title="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=2020"><strong>2020 排序相减</strong><i class="fa fa-external-link"></i></span></p><p>题目来源： syu练习题<br>基准时间限制：1 秒&#8195;空间限制：131072 KB&#8195;分值: 5&#8195;难度：1级算法题<br>“排序相减”操作是指对于任意一个四位数n，将四个数字分别进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n1，然后继续将n1中的四个数字进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n2,以此类推，最后总会得到一个数字黑洞，无法跳出。</p><p>例如:样例2中4176 = 6532 - 2356</p><a id="more"></a><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>Input</strong><br>第一行输入一个整数T，表示数据组数（1&lt;T&lt;10000）；<br>第二行输入一个正整数n(1000&lt;=n&lt;=9999)和一个正整数k（1&lt;=k&lt;=100）,表示操作次数；<br><strong>Output</strong><br>对于每组数据，输出对于开始的数据n在第k次“排序相减”后结果绝对值。<br><strong>Input示例</strong></p><blockquote><p>2<br>1234 2<br>3562 1</p></blockquote><p><strong>Output示例</strong></p><blockquote><p>8352<br>4176</p></blockquote><h2 id="Accepted"><a href="#Accepted" class="headerlink" title="Accepted"></a>Accepted</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">       <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(Console.OpenStandardInput());</span><br><span class="line">        <span class="keyword">var</span> sw = <span class="keyword">new</span> StreamWriter(Console.OpenStandardOutput());</span><br><span class="line">        <span class="keyword">var</span> count = Convert.ToInt32(sr.ReadLine());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> tokens = sr.ReadLine().Split(<span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">var</span> n = Convert.ToInt32(tokens[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> t = Convert.ToInt32(tokens[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; t; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> intArray = n.ToString().ToCharArray();</span><br><span class="line">                Array.Sort(intArray);</span><br><span class="line">                <span class="keyword">var</span> z = Convert.ToInt32(<span class="keyword">new</span> <span class="keyword">string</span>(intArray));</span><br><span class="line">                Array.Reverse(intArray);</span><br><span class="line">                <span class="keyword">var</span> f = Convert.ToInt32(<span class="keyword">new</span> <span class="keyword">string</span>(intArray));</span><br><span class="line">                n = Math.Abs(z - f);</span><br><span class="line">            &#125;</span><br><span class="line">            sw.WriteLine(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sw.Flush();</span><br><span class="line">        sr.Close();</span><br><span class="line">        sw.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
      <tags>
        <tag>51NOD</tag>
        <tag>刷题</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】3.使用Spring.Net应用IOC（依赖倒置）</title>
    <url>/posts/63049.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本篇我们将使用Spring.Net进行依赖导致。</p><a id="more"></a><p>到现在，我们已经基本搭建起了项目的框架，但是项目中还存在一个问题，就是尽管层与层之间使用了接口进行隔离，但实例化接口的时候，还是引入了接口实现类的依赖，如下面的代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IUserService _userService;</span><br><span class="line"><span class="keyword">private</span> IUserService UserService</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _userService ?? (_userService = <span class="keyword">new</span> UserService()); &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; _userService = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cDovL2JhaWtlLmJhaWR1LmNuL3ZpZXcvMjQ5MzIwNC5odG0=" title="http://baike.baidu.cn/view/2493204.htm">面向接口编程<i class="fa fa-external-link"></i></span>，Controller应该只依赖于站点业务层的接口，而不能依赖于具体的实现，否则，就违背了在层之间设置接口的初衷了。</p><p>另外，如果上层只依赖于下层的接口，在做单元测试的时候，就可以用Moq，Fakes等Mock工具来按实际需求来模拟接口的实现，就可以灵活的控制接口的返回值来对各种情况进行测试，如果依赖于具体的实现，项目的可测试性将大大减小，不利于进行自动化的单元测试。</p><p>要不依赖于具体的实现，就不能使用通常的 T t = new T() 的方式来获得一个类的实例了，需要通过IOC容器来对对象生命周期，依赖关系等进行统一的管理，这里，我们将使用Spring.Net应用IOC。</p><h3 id="Spring-Net在控制台程序中的使用"><a href="#Spring-Net在控制台程序中的使用" class="headerlink" title="Spring.Net在控制台程序中的使用"></a>Spring.Net在控制台程序中的使用</h3><p>我们将通过一个简单的控制台示例来展示Spring.Net的使用方法</p><p>创建测试用的类：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SpringNetDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        Student Monitor &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">GetMsg</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class</span> : <span class="title">IClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Student Monitor &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetMsg</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"班级名称："</span> + Name + <span class="string">"，班长："</span> + Monitor.Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个类，一个接口，Student类中有一个string类型的属性，为Name，Class类中除了string类型的Name属性外还有一个Student类型的Monitor属性，方法GetMsg可以返回当前Class对象的简介，包括班级名和班长名两个内容。Class类实现IClass接口。</p><p>先做简单的测试：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IClass c6=<span class="keyword">new</span> Class()</span><br><span class="line">&#123;</span><br><span class="line">    Monitor = <span class="keyword">new</span> Student()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">"李芙蓉"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Name = <span class="string">"六班"</span></span><br><span class="line">&#125;;</span><br><span class="line">Console.WriteLine(c6.GetMsg());</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p>输出为：<br><img src="https://qiniucdn.wayneshao.com/20180218215235/20180218095803520.png" alt><br>接下来，我们<strong>换用Spring.Net容器来声明对象</strong></p><ol><li><p>首先引用dll文件<br><img src="https://qiniucdn.wayneshao.com/20180218215235/20180218095839887.png" alt><br>需要核心库Spring.Core.dll和Spring.Net使用的日志记录组件Common.Logging.dll</p></li><li><p>然后我们需要了解当前的程序集名称和命名空间<br><img src="https://qiniucdn.wayneshao.com/20180218215235/20180218095922038.png" alt></p></li><li><p>在项目中新建一个xml文件，命名为services.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objects</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.net"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>An  example that demonstrates simple IoC features.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">"Class"</span> <span class="attr">type</span>=<span class="string">"SpringNetDemo.Class,SpringNetDemo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Name"</span> <span class="attr">value</span>=<span class="string">"尖子班"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Monitor"</span> <span class="attr">ref</span>=<span class="string">"Student"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">type</span>=<span class="string">"SpringNetDemo.Student, SpringNetDemo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Name"</span> <span class="attr">value</span>=<span class="string">"陈二蛋"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在xml中新建objects根节点，其中加入需要容器生成的object子节点，object子节点的type属性中需要指明类的完整名称（带有程序集）和当前命名空间，如果需要为当前类的属性赋默认值，则可以在object节点中增加property节点，配置其value属性来为类的属性赋初值，若类的属性仍然为其他类对象时，可以新建该类型的object节点，并给予其name属性，再在当前属性的property节点中将ref属性，指向新增object节点的name属性。</p><p>注意：要把xml文件设置为“如果较新则复制”或者“始终复制”，否则生成时将不会自动复制到程序目录</p></li><li><p>然后在应用程序配置文件中配置Spring.Net的信息：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sectionGroup</span> <span class="attr">name</span>=<span class="string">"spring"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"context"</span> <span class="attr">type</span>=<span class="string">"Spring.Context.Support.ContextHandler, Spring.Core"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"objects"</span> <span class="attr">type</span>=<span class="string">"Spring.Context.Support.DefaultSectionHandler, Spring.Core"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sectionGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span> <span class="attr">uri</span>=<span class="string">"file://services.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">spring</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>运行程序，得到输出结果：<br><img src="https://qiniucdn.wayneshao.com/20180218215235/20180218100404037.png" alt><br><strong>成功实现IOC</strong></p><h3 id="Spring-Net在ASP-NET-MVC中的使用"><a href="#Spring-Net在ASP-NET-MVC中的使用" class="headerlink" title="Spring.Net在ASP.NET MVC中的使用"></a>Spring.Net在ASP.NET MVC中的使用</h3><p>方法和在控制台程序中大同小异</p><ol><li><p>同样，首先要导入dll文件<br><img src="https://qiniucdn.wayneshao.com/20180218215235/20180218100505181.png" alt><br>MVC项目中需要引用的dll文件稍多些，需要五个，除了值钱的两个外，还需要三个Web相关的dll。</p></li><li><p>为了便于管理，我们在MVC项目更目录新建Config文件夹来保存配置文件，并在其中新建两个xml文件<br>controllers.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objects</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.net"</span>&gt;</span>、</span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"PMS.WebApp.Controllers.UserController , PMS.WebApp"</span> <span class="attr">singleton</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"UserService"</span> <span class="attr">ref</span>=<span class="string">"UserService"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>services.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objects</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.net"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">"UserService"</span> <span class="attr">type</span>=<span class="string">"PMS.BLL.UserService, PMS.BLL"</span> <span class="attr">singleton</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样是出于方便管理考虑，我们将控制器和业务类分两个文件来保存，文件中节点的规则与控制台示例中完全相同。</p></li><li><p>修改Web.config配置文件<br><img src="https://qiniucdn.wayneshao.com/20180218215235/20180218100703550.png" alt><br>在配置文件的configSections节点中增加如图的sectionGrup节点，configuration节点中增加Spring节点，并在spring节点中的context节点中使用resource节点设置配置文件的路径。</p></li><li><p>修改Global文件<br>修改根目录的Global.asax文件，将MvcApplication类的父类由HttpApplication更改为SpringMvcApplication。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MvcApplication</span> : <span class="title">SpringMvcApplication</span><span class="comment">//HttpApplication</span></span><br></pre></td></tr></table></figure></li><li><p>最后，将原来的控制器中代码修改，就成功地在MVC项目中使用Spring.Net实现了IOC</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//private IUserService _userService;</span></span><br><span class="line"><span class="comment">//private IUserService UserService</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class="line"><span class="comment">//    set &#123; _userService = value; &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">private</span> IUserService UserService &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>Spring.Net</tag>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】5.使用Controller来代替Filter完成登录验证（Session校验）</title>
    <url>/posts/21523.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>之前的学习中，在对Session校验完成登录验证时，通常使用Filter来处理，方法类似与前文的错误日志过滤，即新建Filter类继承ActionFilterAttribute类，重写OnActionExecuting方法，之后直接在需要验证的Action前加上Filter标记即可。</p><a id="more"></a><h2 id="Filter式实现"><a href="#Filter式实现" class="headerlink" title="Filter式实现"></a>Filter式实现</h2><h3 id="新建登陆校验类"><a href="#新建登陆校验类" class="headerlink" title="新建登陆校验类"></a>新建登陆校验类</h3><p>新建登陆校验类CheckLoginAttribute</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CheckLoginAttribute</span>:<span class="title">ActionFilterAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnActionExecuting(filterContext);</span><br><span class="line">            <span class="keyword">if</span> (filterContext.HttpContext.Session == <span class="literal">null</span> || filterContext.HttpContext.Session[<span class="string">"user"</span>] == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                filterContext.HttpContext.Response.Redirect(<span class="string">"/User/Login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加特性"><a href="#增加特性" class="headerlink" title="增加特性"></a>增加特性</h3><p>在需要校验的Action增加标记以完成校验</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> PMS.IBLL;</span><br><span class="line"><span class="keyword">using</span> PMS.WebApp.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// GET: /User/</span></span><br><span class="line">        <span class="comment">//private IUserService _userService;</span></span><br><span class="line">        <span class="comment">//private IUserService UserService</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class="line">        <span class="comment">//    set &#123; _userService = value; &#125;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">private</span> IUserService UserService &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">CheckLogin</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Content(<span class="string">"OK"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：不要在RegisterGlobalFilters方法中注册校验类，否则则会相当于给所有Action都添加了校验</p><p>这种方法使用起来需要在每个Action方法前添加过滤标签，且效率并不十分高，我们的项目中使用的是一种更为简单高效的方法：使用Controller进行登录验证</p><h2 id="Controller式实现"><a href="#Controller式实现" class="headerlink" title="Controller式实现"></a>Controller式实现</h2><h3 id="新建验证父类"><a href="#新建验证父类" class="headerlink" title="新建验证父类"></a>新建验证父类</h3><p>新建一个用于验证的Controller父类，并在其内重写OnActionExecuting方法完成登陆校验：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnActionExecuting(filterContext);</span><br><span class="line">            <span class="keyword">if</span> (Session[<span class="string">"user"</span>] == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//filterContext.HttpContext.Response.Redirect("/User/Login");</span></span><br><span class="line">                filterContext.Result = Redirect(<span class="string">"/User/Login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller校验类的OnActionExecuting方法中，有如下代码</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//filterContext.HttpContext.Response.Redirect("/User/Login");</span></span><br><span class="line">filterContext.Result = Redirect(<span class="string">"/User/Login"</span>);</span><br></pre></td></tr></table></figure><p>我们使用后者而放弃前者的原因是，ASP.NET MVC中规定，Action必须返回ActionResult，如果使用前者，在完成跳转前会先进入到请求的页面，这样不符合我们使用过滤器的初衷。</p><h3 id="继承校验父类"><a href="#继承校验父类" class="headerlink" title="继承校验父类"></a>继承校验父类</h3><p>然后使需要校验的Controller继承于我们定义的校验Controller即可完成全局登录校验操作：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> PMS.IBLL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserController</span> : <span class="title">FilterController</span><span class="comment">//Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// GET: /User/</span></span><br><span class="line">        <span class="comment">//private IUserService _userService;</span></span><br><span class="line">        <span class="comment">//private IUserService UserService</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    get &#123; return _userService ?? (_userService = new UserService()); &#125;</span></span><br><span class="line">        <span class="comment">//    set &#123; _userService = value; &#125;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">private</span> IUserService UserService &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment">//[CheckLogin]</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Content(<span class="string">"OK"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们对比两种方法的优缺点:</p><p>Filter定义过程比较复杂，效率也稍低些，但是却可以对每一个Action进行单独的过滤，同一Action也可以有多条过滤信息，使用比较灵活。</p><p>Controller定义更为简便，效率高，但是却只能对整个Controller中所有方法进行过滤，同一Controller也不太容易有多个Controller过滤父类。</p><p><strong>综上所述，实际项目中大多需求都是同一Controller下所有方法都需要完成登陆验证，所以其实使用Controller过滤更为高效，应对复杂需求时，灵活混用两种方法也不失为一种好的策略。</strong></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>登录验证</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】6. 使用Memcache+Cookie解决分布式系统共享登录状态</title>
    <url>/posts/7556.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>为了解决单机处理的瓶颈，增强软件的可用性，我们需要将软件部署在多台服务器上启用多个二级子域名以频道化的方式，根据业务功能将网站分布部署在独立的服务器上，或通过负载均衡技术（如：DNS轮询、Radware、F5、LVS等）让多个频道共享一组服务器。当我们将网站程序分部到多台服务器上后，由于Session受实现原理的局限，无法跨服务器同步更新Session，使得登录状态难以通过Session共享。</p><a id="more"></a><p>我们使用MemCache+Cookie方案来解决分布式系统共享登录状态的问题。</p><p>Memcache服务器本身就是一个Socket服务端，内部数据采用键值对的形式存储在服务器的内存中，本质就是一个大型的哈希表。数据的删除采用惰性删除机制。虽然Memcache并没有提供集群功能，但是通过客户端的驱动程序很容易就可以实现Memcache的集群配置。</p><h2 id="Memcache使用"><a href="#Memcache使用" class="headerlink" title="Memcache使用"></a>Memcache使用</h2><ol><li>下载安装<span class="exturl" data-url="aHR0cDovL2NvZGUuamVsbHljYW4uY29tL01lbWNhY2hlLw==" title="http://code.jellycan.com/Memcache/">Memcache<i class="fa fa-external-link"></i></span>（Windows平台）<br>（1）将程序解压到磁盘任意位置<br>（2）进入cmd窗口，运行Memcached.exe -d install安装服务，安装后打开服务窗口查看服务是否安装成功。<br><img src="https://qiniucdn.wayneshao.com/20180218222028/20180218102319007.png" alt><br>（3）直接在服务管理中启动服务，或者使用cmd命令 net start “Memcache Server”<br>（4）使用Telnet连接到Memcache控制台，验证服务是否正常 telnet 127.0.0.1 11211<br>（5）使用stats指令查看当前Memcache服务器状态。<br><img src="https://qiniucdn.wayneshao.com/20180218222028/20180218102458126.png" alt></li><li>程序中的用法<br>（1）在程序中添加 Memcached.ClientLibrary.dll 的引用<br>（2）C#中操作Memcache的代码示例<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">String[] serverlist = &#123; <span class="string">"192.168.1.100:11211"</span>,</span><br><span class="line"><span class="string">"192.168.1.101:11211"</span>  &#125;;</span><br><span class="line"><span class="comment">// initialize the pool for memcache servers</span></span><br><span class="line">SockIOPool pool = SockIOPool.GetInstance(<span class="string">"test"</span>);</span><br><span class="line">pool.SetServers(serverlist);</span><br><span class="line">pool.Initialize();</span><br><span class="line">mc = <span class="keyword">new</span> MemcacheClient();</span><br><span class="line">mc.PoolName = <span class="string">"test"</span>;</span><br><span class="line">mc.EnableCompression = <span class="literal">false</span>;</span><br><span class="line">pool.Shutdown();<span class="comment">//关闭连接池</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>首先在Common层中引入<span class="exturl" data-url="aHR0cDovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9tZW1jYWNoZWRkb3RuZXQv" title="http://sourceforge.net/projects/memcacheddotnet/">Memcached.ClientLibrary.dll<i class="fa fa-external-link"></i></span>，并封装Memcache的帮助类，MemcacheHelper</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Memcached.ClientLibrary;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.Common</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemcacheHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> MemcachedClient Mc = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="title">MemcacheHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="comment">//最好放在配置文件中</span></span><br><span class="line">           <span class="keyword">string</span>[] serverlist = &#123; <span class="string">"127.0.0.1:11211"</span>, <span class="string">"10.0.0.132:11211"</span> &#125;;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//初始化池</span></span><br><span class="line">           <span class="keyword">var</span> pool = SockIOPool.GetInstance();</span><br><span class="line">           pool.SetServers(serverlist);</span><br><span class="line"></span><br><span class="line">           pool.InitConnections = <span class="number">3</span>;</span><br><span class="line">           pool.MinConnections = <span class="number">3</span>;</span><br><span class="line">           pool.MaxConnections = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">           pool.SocketConnectTimeout = <span class="number">1000</span>;</span><br><span class="line">           pool.SocketTimeout = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">           pool.MaintenanceSleep = <span class="number">30</span>;</span><br><span class="line">           pool.Failover = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">           pool.Nagle = <span class="literal">false</span>;</span><br><span class="line">           pool.Initialize();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 获得客户端实例</span></span><br><span class="line">           Mc = <span class="keyword">new</span> MemcachedClient &#123;EnableCompression = <span class="literal">false</span>&#125;;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 存储数据</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="value"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key,<span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">          <span class="keyword">return</span> Mc.Set(key, <span class="keyword">value</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>,DateTime time</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> Mc.Set(key, <span class="keyword">value</span>,time);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 获取数据</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> Mc.Get(key);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 删除</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Delete</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> Mc.KeyExists(key) &amp;&amp; Mc.Delete(key);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变用户登录方法UserLogin，用户登录成功后生成GUID，将此GUID存入Cookie并以GUID为键将登录用户信息序列化存入Memcache服务器。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">UserLogin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 验证码校验</span></span><br><span class="line">    <span class="keyword">var</span> validateCode = Session[<span class="string">"validateCode"</span>] != <span class="literal">null</span> ? Session[<span class="string">"validateCode"</span>].ToString() : <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(validateCode))</span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">"no:验证码错误!!"</span>);</span><br><span class="line">    Session[<span class="string">"validateCode"</span>] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> txtCode = Request[<span class="string">"ValidateCode"</span>];</span><br><span class="line">    <span class="keyword">if</span> (!validateCode.Equals(txtCode, StringComparison.InvariantCultureIgnoreCase))</span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">"no:验证码错误!!"</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userName = Request[<span class="string">"UserName"</span>];</span><br><span class="line">    <span class="keyword">var</span> userPwd = Request[<span class="string">"PassWord"</span>];</span><br><span class="line">    <span class="comment">//查询用户是否存在</span></span><br><span class="line">    <span class="keyword">var</span> user = UserService.LoadEntities(u =&gt; u.UserName == userName &amp;&amp; u.PassWord == userPwd).FirstOrDefault();</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">return</span> Content(<span class="string">"no:登录失败"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生一个GUID值作为Memache的键.</span></span><br><span class="line">    <span class="keyword">var</span> sessionId = Guid.NewGuid().ToString();</span><br><span class="line">    <span class="comment">//将登录用户信息存储到Memcache中。</span></span><br><span class="line">    MemcacheHelper.Set(sessionId, SerializeHelper.SerializeToString(user), DateTime.Now.AddMinutes(<span class="number">20</span>));</span><br><span class="line">    <span class="comment">//将Memcache的key以Cookie的形式返回给浏览器。</span></span><br><span class="line">    Response.Cookies[<span class="string">"sessionId"</span>].Value = sessionId;</span><br><span class="line">    <span class="keyword">return</span> Content(<span class="string">"ok:登录成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变登录校验控制器FilterController的OnActionExecuting方法，使其校验方式改为从Memcache服务器中读取Cookie中值为键的对象：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnActionExecuting(filterContext);</span><br><span class="line">    <span class="comment">//if (Session["user"] == null)</span></span><br><span class="line">    <span class="keyword">if</span> (Request.Cookies[<span class="string">"sessionId"</span>] != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sessionId = Request.Cookies[<span class="string">"sessionId"</span>].Value;</span><br><span class="line">        <span class="comment">//根据该值查Memcache.</span></span><br><span class="line">        <span class="keyword">var</span> obj = MemcacheHelper.Get(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            filterContext.Result = Redirect(<span class="string">"/Login/Index"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> user = SerializeHelper.DeserializeToObject&lt;User&gt;(obj.ToString());</span><br><span class="line">        LoginUser = user;</span><br><span class="line">        <span class="comment">//模拟出滑动过期时间.</span></span><br><span class="line">        MemcacheHelper.Set(sessionId, obj, DateTime.Now.AddMinutes(<span class="number">20</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        filterContext.Result = Redirect(<span class="string">"/Login/Index"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>Memcache</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>【单例】使用同步基元变量来检测程序是否已运行</title>
    <url>/posts/16660.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 应用程序的主入口点。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">STAThread</span>]</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> instance = <span class="keyword">new</span> Mutex(<span class="literal">true</span>, <span class="string">"SingleStart"</span>, <span class="keyword">out</span> <span class="keyword">bool</span> createdNew); <span class="comment">//同步基元变量   </span></span><br><span class="line">        <span class="keyword">if</span> (createdNew)</span><br><span class="line">        &#123;</span><br><span class="line">            Application.Run(<span class="keyword">new</span> Form());</span><br><span class="line">            instance.ReleaseMutex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Application.Exit();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Winform</tag>
        <tag>单例</tag>
      </tags>
  </entry>
  <entry>
    <title>【新手学Java】使用beanUtils控制javabean</title>
    <url>/posts/33316.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>使用beanUtils控制javabean</p><a id="more"></a><p>使用BeanUtils设置/读取属性的值以及默认支持的自动转化:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//使用BeanUtils设置/读取属性的值以及自动转化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException</span>&#123;</span><br><span class="line">    Person p=<span class="keyword">new</span> Person();</span><br><span class="line">    <span class="comment">//使用BeanUtils设置属性的值</span></span><br><span class="line">    BeanUtils.setProperty(p, <span class="string">"username"</span>, <span class="string">"李四"</span>);</span><br><span class="line">    <span class="comment">//使用BeanUtils读取属性的值        </span></span><br><span class="line">    System.out.println(BeanUtils.getProperty(p, <span class="string">"username"</span>););</span><br><span class="line">    <span class="comment">//类型不同依然可以自动转化,BeanUtils默认支持八种基本类型的转换</span></span><br><span class="line">    BeanUtils.setProperty(p,<span class="string">"age"</span>, <span class="string">"123"</span>);</span><br><span class="line">    System.out.println(p.getAge());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册已有的转化器来完成复杂类型的自动转化:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//注册已有的转化器来完成复杂类型的自动转化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException</span>&#123;</span><br><span class="line">    Person p=<span class="keyword">new</span> Person();</span><br><span class="line">    String birthday=<span class="string">"1995-05-05"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册Apache提供的时间转换器</span></span><br><span class="line">    ConvertUtils.register(<span class="keyword">new</span> DateLocaleConverter(), Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    BeanUtils.setProperty(p, <span class="string">"birthday"</span>, birthday);</span><br><span class="line">    </span><br><span class="line">    System.out.println(p.getBirthday());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Apache已有的时间转化器中不能很好地过滤空字符串，若待转换字符串为空则会抛出异常；而现实业务非常复杂，Apache无法提供给我们所有的类型转化方法，需要时我们可以注册自己需要的转换器完成业务需求。</p><p>注册自己的转换器完成时间转化：<br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//注册自己的转换器完成时间转化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException</span>&#123;</span><br><span class="line">    Person p=<span class="keyword">new</span> Person();</span><br><span class="line">    String birthday=<span class="string">"1995-05-05"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//为了日期可以赋值到bean的属性,我们给benUtils注册日期转换器</span></span><br><span class="line">    ConvertUtils.register(<span class="keyword">new</span> Converter()&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">convert</span><span class="params">(Class type,Object value)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!(value <span class="keyword">instanceof</span> String))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConversionException(<span class="string">"只支持String类型的转换"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String str=(String) value;</span><br><span class="line">            <span class="keyword">if</span>(str.trim().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SimpleDateFormat dateformate=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> dateformate.parse(str);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    BeanUtils.setProperty(p, <span class="string">"birthday"</span>, birthday);</span><br><span class="line">    </span><br><span class="line">    System.out.println(p.getBirthday());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>直接使用map对象填充类:</p><p>```java<br>@Test<br>//直接使用map对象填充类<br>public void test4() throws Exception{<br>HashMap&lt;String, String&gt; map=new HashMap&lt;String,String&gt;();<br>map.put(“username”,”李四”);<br>map.put(“password”,”lisi”);<br>map.put(“age”,”26”);<br>map.put(“birthday”,”1990-05-05”);</p><pre><code>ConvertUtils.register(new DateLocaleConverter() , Date.class);

Person p=new Person();
BeanUtils.populate(p, map);

System.out.println(p.getUsername());
System.out.println(p.getPassword());
System.out.println(p.getAge());
System.out.println(p.getBirthday());</code></pre><p>}</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>beanUtils</tag>
        <tag>javabean</tag>
      </tags>
  </entry>
  <entry>
    <title>【新手学Java】使用内省(Introspector)操作JavaBean属性</title>
    <url>/posts/50715.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>使用内省(Introspector)操作</p><a id="more"></a><p>获取类bean中的所有属性:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//获取类bean中的所有属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    BeanInfo info = Introspector.getBeanInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    PropertyDescriptor[] decriptors = info.getPropertyDescriptors();</span><br><span class="line">    <span class="keyword">for</span>(PropertyDescriptor decriptor : decriptors)&#123;</span><br><span class="line">        <span class="comment">//输出属性的名称</span></span><br><span class="line">        System.out.println(decriptor.getName());</span><br><span class="line">        <span class="comment">//输出属性的类型</span></span><br><span class="line">        System.out.println(decriptor.getPropertyType());</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读/写bean中某个属性:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//操纵bean中某个属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Person p=<span class="keyword">new</span> Person();</span><br><span class="line">    </span><br><span class="line">    PropertyDescriptor decriptor = <span class="keyword">new</span> PropertyDescriptor(<span class="string">"username"</span>,Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//得到属性的写方法</span></span><br><span class="line">    Method method=decriptor.getWriteMethod();</span><br><span class="line">    method.invoke(p, <span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到属性的读方法</span></span><br><span class="line">    method=decriptor.getReadMethod();</span><br><span class="line">    String username= (String) method.invoke(p);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>javabean</tag>
        <tag>Introspector</tag>
      </tags>
  </entry>
  <entry>
    <title>【新手学Java】反射学习笔记</title>
    <url>/posts/16721.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>示例类代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Age;</span><br><span class="line">    <span class="keyword">public</span> Gender Gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String Species = <span class="string">"人类"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Name=<span class="string">"佚名"</span>;</span><br><span class="line">        Age=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        Name=name;</span><br><span class="line">        Age=age;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(Gender g)</span></span>&#123;</span><br><span class="line">        Gender=g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Name+<span class="string">" 跑!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Name+<span class="string">" 打!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(Name+<span class="string">" 打 "</span>+name+<span class="string">"!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">(String food)</span></span>&#123;</span><br><span class="line">        System.out.println(Name+<span class="string">" 吃 "</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Introduce</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我叫"</span>+Name+<span class="string">",我今年"</span>+Age+<span class="string">"岁了。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PlayGame</span><span class="params">(String gameName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"玩 "</span>+gameName+<span class="string">" 游戏"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s:args)</span><br><span class="line">            System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender&#123;</span><br><span class="line">    Male,Female</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的无参构造函数:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的无参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constructor1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz = Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Constructor c=clazz.getConstructor();</span><br><span class="line">    Person p = (Person) c.newInstance();</span><br><span class="line">    Person p1 = (Person) clazz.newInstance();</span><br><span class="line">    p.Introduce();</span><br><span class="line">    p.Run();</span><br><span class="line">    p1.Introduce();</span><br><span class="line">    p1.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的有参构造函数:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的有参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constructor2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Constructor c=clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Person p=((Person) c.newInstance(<span class="string">"张三"</span>));</span><br><span class="line">    p.Introduce();</span><br><span class="line">    p.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的私有构造函数:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">constructor3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    <span class="comment">//反射私有构造函数时必须从使用 getDeclaredConstructor 方法</span></span><br><span class="line">    Constructor c=clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    c.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">    Person p=((Person) c.newInstance(<span class="string">"张三"</span>,<span class="number">25</span>));</span><br><span class="line">    p.Introduce();</span><br><span class="line">    p.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的公有无参方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的公有无参方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Method method=clazz.getMethod(<span class="string">"Run"</span>);</span><br><span class="line">    method.invoke(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的公有有参方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的公有有参方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Method method=clazz.getMethod(<span class="string">"Attack"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    method.invoke(p,<span class="string">"李四"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的私有有参方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的私有有参方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Method method=clazz.getDeclaredMethod(<span class="string">"Eat"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    method.invoke(p,<span class="string">"香蕉"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的静态有参方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的静态有参方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Method method=clazz.getDeclaredMethod(<span class="string">"PlayGame"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    method.invoke(p,<span class="string">"扫雷"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类的main方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类的main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Method method=clazz.getDeclaredMethod(<span class="string">"main"</span>,String[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    method.invoke(p,(Object)<span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类公有的字段:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类公有的字段</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">field1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Field field=clazz.getField(<span class="string">"Name"</span>);</span><br><span class="line">    System.out.println(field.get(p));</span><br><span class="line">    field.set(p, <span class="string">"王五"</span>);</span><br><span class="line">    p.Introduce();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类私有的字段:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类私有的字段</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">field2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Field field=clazz.getDeclaredField(<span class="string">"Age"</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    System.out.println(field.get(p));</span><br><span class="line">    field.set(p, <span class="number">7</span>);</span><br><span class="line">    p.Introduce();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射类私有静态的字段:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//反射类私有静态的字段</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">field3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz=Class.forName(<span class="string">"pro.shaowei.reflect.Person"</span>);</span><br><span class="line">    Person p=(Person) clazz.newInstance();</span><br><span class="line">    Field field=clazz.getDeclaredField(<span class="string">"Species"</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    System.out.println(field.get(p));</span><br><span class="line">    field.set(p, <span class="string">"不死族"</span>);</span><br><span class="line">    System.out.println(field.get(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】.Net 使用 ScrapySharp 并行下载天涯图片</title>
    <url>/posts/31517.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近因为一个作业需要完成CNKI爬虫，研究爬虫架构的时候发现了这个疑似移植于Python的著名开源爬虫框架Scrapy的ScrapySharp，然而在网上寻找之后只发现了这个<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGFkc3RqL2FydGljbGUvZGV0YWlscy8xODg5MTIyNw==" title="http://blog.csdn.net/hadstj/article/details/18891227">F#的Demo<i class="fa fa-external-link"></i></span>，就使用原文中示例的网站写了这个C#版本的代码。</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>下面是代码:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> HtmlAgilityPack;</span><br><span class="line"><span class="keyword">using</span> ScrapySharp.Extensions;</span><br><span class="line"><span class="keyword">using</span> ScrapySharp.Network;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ScrapySharpDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//示例网站地址</span></span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">"http://bbs.tianya.cn/post-12-563201-1.shtml"</span>;</span><br><span class="line">            <span class="keyword">var</span> web = <span class="keyword">new</span> ScrapingBrowser();</span><br><span class="line">            <span class="keyword">var</span> html = web.DownloadString(<span class="keyword">new</span> Uri(url));</span><br><span class="line">            <span class="keyword">var</span> doc = <span class="keyword">new</span> HtmlDocument();</span><br><span class="line">            doc.LoadHtml(html);</span><br><span class="line">            <span class="comment">//获取网站中的图片地址</span></span><br><span class="line">            <span class="keyword">var</span> urls= doc.DocumentNode.CssSelect(<span class="string">"div.bbs-content &gt; img"</span>).Select(node =&gt; node.GetAttributeValue(<span class="string">"original"</span>)).ToList();</span><br><span class="line">            <span class="comment">//并行下载图片</span></span><br><span class="line">            Parallel.ForEach(urls, SavePic);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SavePic</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> web = <span class="keyword">new</span> ScrapingBrowser();</span><br><span class="line">            <span class="comment">//因天涯网站限制,所有站外来源都无法访问图片,故先设置请求头Refer属性为当前页地址</span></span><br><span class="line">            web.Headers.Add(<span class="string">"Referer"</span>, <span class="string">"http://bbs.tianya.cn/post-12-563201-1.shtml"</span>);</span><br><span class="line">            <span class="keyword">var</span> pic = web.NavigateToPage(<span class="keyword">new</span> Uri(url)).RawResponse.Body;</span><br><span class="line">            <span class="keyword">var</span> file = url.Substring(url.LastIndexOf(<span class="string">"/"</span>, StringComparison.Ordinal));</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(<span class="string">"imgs"</span>))</span><br><span class="line">                Directory.CreateDirectory(<span class="string">"imgs"</span>);</span><br><span class="line">            File.WriteAllBytes(<span class="string">"imgs"</span> + file, pic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h2><p>研究之后发现，ScrapySharp和Scrapy差距还是挺大的，没有Scrapy那样完善的八大组件，只含有Http请求的Downloader和基于HtmlAgilityPack扩展的网页解析功能，莫名有些小失望。</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>爬虫</tag>
        <tag>ScrapySharp</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】.Net 基于ARSoft.Tools.Net的DNS解析模块（半成品）</title>
    <url>/posts/61444.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近在做爬虫的作业，今天学习的内容是关于DNS解析模块的制作的。使用的库为ARSoft.Tools.Net，它是一个非常强大的开源DNS控件库，包含.Net SPF validation, SenderID validation以及DNS Client、DNS Server接口。使用该接口可轻松实现DNS客户请求端及服务器解析端。</p><a id="more"></a><p>项目地址：<span class="exturl" data-url="aHR0cDovL2Fyc29mdHRvb2xzbmV0LmNvZGVwbGV4LmNvbS/vvIw=" title="http://arsofttoolsnet.codeplex.com/，">http://arsofttoolsnet.codeplex.com/，<i class="fa fa-external-link"></i></span></p><p>Nuget包地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0FSU29mdC5Ub29scy5OZXQv44CC" title="https://www.nuget.org/packages/ARSoft.Tools.Net/。">https://www.nuget.org/packages/ARSoft.Tools.Net/。<i class="fa fa-external-link"></i></span></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>首先引入nuget包:</p><blockquote><p><strong>Install-Package ARSoft.Tools.NetInstall-Package ARSoft.Tools.Net</strong></p></blockquote><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码:"></a>实现代码:</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DNS解析</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="dnsServer"&gt;</span>DNS服务器IP<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="timeOut"&gt;</span>解析超时时间<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="url"&gt;</span>解析网址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isSuccess"&gt;</span>是否解析成功<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>解析到的IP信息<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPAddress <span class="title">DnsResolver</span>(<span class="params"><span class="keyword">string</span> dnsServer, <span class="keyword">int</span> timeOut, <span class="keyword">string</span> url, <span class="keyword">out</span> <span class="keyword">bool</span> isSuccess</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class="line">    <span class="keyword">var</span> dnsClient = <span class="keyword">new</span> DnsClient(IPAddress.Parse(dnsServer), timeOut);</span><br><span class="line">    <span class="comment">//解析域名。将域名请求发送至DNS服务器解析，第一个参数为需要解析的域名，第二个参数为</span></span><br><span class="line">    <span class="comment">//解析类型， RecordType.A为IPV4类型</span></span><br><span class="line">    <span class="comment">//DnsMessage dnsMessage = dnsClient.Resolve("www.sina.com", RecordType.A);</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">    s.Start();</span><br><span class="line">    <span class="keyword">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(url));</span><br><span class="line">    s.Stop();</span><br><span class="line">    Console.WriteLine(s.Elapsed.Milliseconds);</span><br><span class="line">    <span class="comment">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class="line">    <span class="keyword">if</span> (dnsMessage == <span class="literal">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class="line">    &#123;</span><br><span class="line">        isSuccess= <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class="line">    <span class="keyword">if</span> (dnsMessage != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> dnsRecord <span class="keyword">in</span> dnsMessage.AnswerRecords)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> aRecord = dnsRecord <span class="keyword">as</span> ARecord;</span><br><span class="line">            <span class="keyword">if</span> (aRecord == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            isSuccess = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> aRecord.Address;</span><br><span class="line">        &#125;</span><br><span class="line">    isSuccess= <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用代码"><a href="#调用代码" class="headerlink" title="调用代码"></a>调用代码</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> isSuccess;</span><br><span class="line">IPAddress ip = DnsResolver(<span class="string">"223.5.5.5"</span>, <span class="number">200</span>, <span class="string">"shaoweicloud.cn"</span>, <span class="keyword">out</span> isSuccess);</span><br><span class="line"><span class="keyword">if</span> (isSuccess)</span><br><span class="line">    Console.WriteLine(ip);</span><br></pre></td></tr></table></figure><h2 id="进一步封装"><a href="#进一步封装" class="headerlink" title="进一步封装"></a>进一步封装</h2><p>懂的使用方法后我们可以对它做进一步封装,得到<strong>DnsResolver</strong>类:</p><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> ARSoft.Tools.Net;</span><br><span class="line"><span class="keyword">using</span> ARSoft.Tools.Net.Dns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Protocol</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DnsResolver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> TimeSpan TimeSpan &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> List Record &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> DnsServer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> TimeOut &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> ReturnCode ReturnCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> IsSuccess &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DnsResolver</span>(<span class="params"><span class="keyword">string</span> url, <span class="keyword">string</span> dnsServer = <span class="string">"223.5.5.5"</span>, <span class="keyword">int</span> timeOut = <span class="number">200</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Url = url;</span><br><span class="line">            DnsServer = dnsServer;</span><br><span class="line">            TimeOut = timeOut;</span><br><span class="line">            Record=<span class="keyword">new</span> List();</span><br><span class="line">            Dig();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dig</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class="line">            <span class="keyword">var</span> dnsClient = <span class="keyword">new</span> DnsClient(IPAddress.Parse(DnsServer), TimeOut);</span><br><span class="line">            <span class="keyword">var</span> s = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            s.Start();</span><br><span class="line">            <span class="comment">//解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名</span></span><br><span class="line">            <span class="keyword">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));</span><br><span class="line">            s.Stop();</span><br><span class="line">            TimeSpan = s.Elapsed;</span><br><span class="line">            <span class="comment">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class="line">            <span class="keyword">if</span> (dnsMessage == <span class="literal">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class="line">                IsSuccess = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class="line">            <span class="keyword">if</span> (dnsMessage != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> dnsRecord <span class="keyword">in</span> dnsMessage.AnswerRecords)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> aRecord = dnsRecord <span class="keyword">as</span> ARecord;</span><br><span class="line">                    <span class="keyword">if</span> (aRecord == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    IsSuccess = <span class="literal">true</span>;</span><br><span class="line">                    Record.Add(aRecord);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (dnsMessage != <span class="literal">null</span>) ReturnCode = dnsMessage.ReturnCode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DnsResolver dns = <span class="keyword">new</span> DnsResolver(<span class="string">"shaoweicloud.cn"</span>);</span><br><span class="line"><span class="keyword">if</span> (dns.IsSuccess)</span><br><span class="line">    Console.WriteLine(dns.Record[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，DNS解析模块就基本结束了，至于为什么标题中标注了半成品，是因为我想在基本的DNS解析功能的基础上根据解析到DNS信息中的TTL做一套信息缓存机制，减少不必要的重复查询，目前还在考虑使用何种方法，后续实现会更新。</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>爬虫</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】DNS解析服务增加缓存机制</title>
    <url>/posts/2858.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>之前我们已经基于ARSoft.Tools.Net简单实现了DNS解析模块的功能，但是当性能要求升高时，每一次爬取都要进行DNS请求，甚至很有可能一段时间内每次请求的都是相同的地址，频繁的DNS请求就会成为性能瓶颈，所以我们要通过缓存机制将DNS解析结果缓存下来，降低DNS解析操作，提升系统性能。<br><a id="more"></a><br>如此，我们基于之前封装的MemoryCacheHelper类对DnsResolver类进行改造：<br></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> ARSoft.Tools.Net;</span><br><span class="line"><span class="keyword">using</span> ARSoft.Tools.Net.Dns;</span><br><span class="line"><span class="keyword">using</span> Mem = Crawler.Common.MemoryCacheHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Protocol</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DnsResolver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> TimeSpan TimeSpan &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> ARecord Record &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> DnsServer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> TimeOut &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> ReturnCode ReturnCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> IsSuccess &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> TimeSpan TimeToLive &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DnsResolver</span>(<span class="params"><span class="keyword">string</span> url, <span class="keyword">string</span> dnsServer = <span class="string">"223.5.5.5"</span>, <span class="keyword">int</span> timeOut = <span class="number">10000</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Url = url;</span><br><span class="line">            DnsServer = dnsServer;</span><br><span class="line">            TimeOut = timeOut;</span><br><span class="line">            IsSuccess = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (Mem.Contains(url))</span><br><span class="line">                Fill(Mem.Get&lt;DnsResolver&gt;(url));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Dig();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Fill</span>(<span class="params">DnsResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            TimeSpan = resolver.TimeSpan;</span><br><span class="line">            Url = resolver.Url;</span><br><span class="line">            Record = resolver.Record;</span><br><span class="line">            DnsServer = resolver.DnsServer;</span><br><span class="line">            TimeOut = resolver.TimeOut;</span><br><span class="line">            ReturnCode = resolver.ReturnCode;</span><br><span class="line">            IsSuccess = resolver.IsSuccess;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dig</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//初始化DnsClient，第一个参数为DNS服务器的IP，第二个参数为超时时间</span></span><br><span class="line">            <span class="keyword">var</span> dnsClient = <span class="keyword">new</span> DnsClient(IPAddress.Parse(DnsServer), TimeOut);</span><br><span class="line">            <span class="keyword">var</span> s = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            s.Start();</span><br><span class="line">            <span class="comment">//解析域名。将域名请求发送至DNS服务器解析，参数为需要解析的域名</span></span><br><span class="line">            <span class="keyword">var</span> dnsMessage = dnsClient.Resolve(DomainName.Parse(Url));</span><br><span class="line">            s.Stop();</span><br><span class="line">            TimeSpan = s.Elapsed;</span><br><span class="line">            <span class="comment">//若返回结果为空，或者存在错误，则该请求失败。</span></span><br><span class="line">            <span class="keyword">if</span> (dnsMessage == <span class="literal">null</span> || (dnsMessage.ReturnCode != ReturnCode.NoError &amp;&amp; dnsMessage.ReturnCode != ReturnCode.NxDomain))</span><br><span class="line">                IsSuccess = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//循环遍历返回结果，将返回的IPV4记录添加到结果集List中。</span></span><br><span class="line">            <span class="keyword">if</span> (dnsMessage != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dnsMessage.AnswerRecords.Count &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Record = dnsMessage.AnswerRecords[<span class="number">0</span>] <span class="keyword">as</span> ARecord;</span><br><span class="line">                    <span class="keyword">if</span> (Record != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        IsSuccess = <span class="literal">true</span>;</span><br><span class="line">                        TimeToLive=<span class="keyword">new</span> TimeSpan(<span class="number">0</span>,<span class="number">0</span>,Record.TimeToLive);</span><br><span class="line">                        Mem.Add(Url, <span class="keyword">this</span>, TimeToLive);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dnsMessage != <span class="literal">null</span>) ReturnCode = dnsMessage.ReturnCode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样,每次做完DNS解析后，会根据域名的TTL将解析结果缓存下来，下次查询时可以直接调用缓存，提高系统性能。</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】MemoryCache缓存的用法学习</title>
    <url>/posts/30836.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在完成了DNS解析模块之后，我意识到了DNS缓存机制也很有必要。在Redis，Memcache，和.Net自带的Cache之间,考虑到部署问题，最终选择了后者，之前在学习Web及开发的过程中用过System.Web.Caching.Cache这个类库，但是这次的爬虫程序我打算部署为桌面软件，所以选用了System.Runtime.Caching.MemoryCache（后期如有必要也会加入System.Web.Caching.Cache来适配Web端程序）。</p><p>MemoryCache的使用网上介绍的不多，不过这个是.NET4.0新引入的缓存对象，估计主要是替换原来企业库的缓存模块，使得.NET的缓存可以无处不在，而不用基于特定的Windows版本上使用。</p><p>出于方便考虑，我们将不再实例化新的MemoryCache对象，只对MemoryCache的默认示例Memory.Default进行增删查操作。</p><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p><img src="https://qiniucdn.wayneshao.com/20180218211417/20180218091804918.png" alt><br>增加缓存需要提供两个参数，CacheItem类表示缓存中的单个缓存项,</p><p>构造函数:<br>CacheItem(String, Object, String) 用缓存项的指定键、值和区域初始化新的 CacheItem 实例。</p><p>三个参数分别为：键、值和区域。</p><p>CacheItemPolicy类则表示缓存项的过期信息，只含有默认的构造函数。</p><p>增加一条缓存：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> CacheItem(<span class="string">"习大大"</span>, <span class="string">"两学一做"</span>);</span><br><span class="line"><span class="keyword">var</span> policy = <span class="keyword">new</span> CacheItemPolicy();</span><br><span class="line">policy.SlidingExpiration = <span class="keyword">new</span> TimeSpan(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//插入一条key为"习大大",value为"两学一做",500毫秒后自动销毁的缓存</span></span><br><span class="line">MemoryCache.Default.Add(item, policy);</span><br><span class="line"><span class="comment">//重新设置policy的过期时间为当前时间+十分钟</span></span><br><span class="line">policy.AbsoluteExpiration = DateTimeOffset.Now + TimeSpan.FromMinutes(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//注意,如果要使用Sliding时间,则Absolute必须为DateTimeOffset.MaxValue,反之,则Sliding必须为TimeSpan.Zero</span></span><br><span class="line">policy.SlidingExpiration = TimeSpan.Zero;</span><br><span class="line"><span class="comment">//重新插入,覆盖前一条数据</span></span><br><span class="line">MemoryCache.Default.Add(item, policy);</span><br></pre></td></tr></table></figure><p><font style="background-color:#ff0">注意,如果要使用Sliding时间,则Absolute<strong>必须为DateTimeOffset.MaxValue</strong>,反之,则Sliding<strong>必须为TimeSpan.Zero</strong></font><strong></strong></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>缓存对象类似于字典集,查询可以直接采用memoryCache[key]来进行,例如我们查询一下前面插入的那条数据:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> idea = MemoryCache.Default[<span class="string">"习大大"</span>];</span><br></pre></td></tr></table></figure><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p><img src="https://qiniucdn.wayneshao.com/20180218211417/20180218092011241.png" alt><br><strong>参数</strong><br><strong><em>key</em></strong>:要移除的缓存项的唯一标识符。<br><strong><em>regionName</em></strong>:缓存中的一个添加了缓存项的命名区域。不要为该参数传递值。默认情况下，此参数为null，因为 MemoryCache 类未实现区域。<br><strong>返回值</strong><br><strong><em>Type</em></strong>: <em>System.Object</em> 如果在缓存中找到该项，则为已移除的缓存项；否则为 null。</p><p>删除前面加入的那一项:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">MemoryCache.Default.Remove(<span class="string">"习大大"</span>);</span><br></pre></td></tr></table></figure><h2 id="进一步封装"><a href="#进一步封装" class="headerlink" title="进一步封装"></a>进一步封装</h2><p>明白了基本的用法之后，我们就可以对它做进一步的封装，使之使用起来更为便捷：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Caching;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 基于MemoryCache的缓存辅助类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MemoryCacheHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> _locker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Contains</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> MemoryCache.Default.Contains(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取Catch元素</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>所获取的元素的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span>元素的键<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>特定的元素值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T Get&lt;T&gt;(<span class="keyword">string</span> key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(key)) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"不合法的key!"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!MemoryCache.Default.Contains(key))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"获取失败,不存在该key!"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!(MemoryCache.Default[key] <span class="keyword">is</span> T))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"未找到所需类型数据!"</span>);</span><br><span class="line">            <span class="keyword">return</span> (T)MemoryCache.Default[key];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 添加Catch元素</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span>元素的键<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="value"&gt;</span>元素的值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="slidingExpiration"&gt;</span>元素过期时间(时间间隔)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="absoluteExpiration"&gt;</span>元素过期时间(绝对时间)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Add</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, TimeSpan? slidingExpiration = <span class="literal">null</span>, DateTime? absoluteExpiration = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">new</span> CacheItem(key, <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">var</span> policy = CreatePolicy(slidingExpiration, absoluteExpiration);</span><br><span class="line">            <span class="keyword">lock</span> (_locker)</span><br><span class="line">                <span class="keyword">return</span> MemoryCache.Default.Add(item, policy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 移出Cache元素</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>待移出元素的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span>待移除元素的键<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>已经移出的元素<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T Remove&lt;T&gt;(<span class="keyword">string</span> key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(key)) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"不合法的key!"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!MemoryCache.Default.Contains(key))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"获取失败,不存在该key!"</span>);</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = MemoryCache.Default.Get(key);</span><br><span class="line">            <span class="keyword">if</span> (!(<span class="keyword">value</span> <span class="keyword">is</span> T))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"未找到所需类型数据!"</span>);</span><br><span class="line">            <span class="keyword">return</span> (T)MemoryCache.Default.Remove(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 移出多条缓存数据,默认为所有缓存</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>待移出的缓存类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="keyList"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;T&gt; RemoveAll&lt;T&gt;(IEnumerable&lt;<span class="keyword">string</span>&gt; keyList = <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyList != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">from</span> key <span class="keyword">in</span> keyList</span><br><span class="line">                        <span class="keyword">where</span> MemoryCache.Default.Contains(key)</span><br><span class="line">                        <span class="keyword">where</span> MemoryCache.Default.Get(key) <span class="keyword">is</span> T</span><br><span class="line">                        <span class="keyword">select</span> (T)MemoryCache.Default.Remove(key)).ToList();</span><br><span class="line">            <span class="keyword">while</span> (MemoryCache.Default.GetCount() &gt; <span class="number">0</span>)</span><br><span class="line">                MemoryCache.Default.Remove(MemoryCache.Default.ElementAt(<span class="number">0</span>).Key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设置过期信息</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="slidingExpiration"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="absoluteExpiration"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CacheItemPolicy <span class="title">CreatePolicy</span>(<span class="params">TimeSpan? slidingExpiration, DateTime? absoluteExpiration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> policy = <span class="keyword">new</span> CacheItemPolicy();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (absoluteExpiration.HasValue)</span><br><span class="line">            &#123;</span><br><span class="line">                policy.AbsoluteExpiration = absoluteExpiration.Value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (slidingExpiration.HasValue)</span><br><span class="line">            &#123;</span><br><span class="line">                policy.SlidingExpiration = slidingExpiration.Value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            policy.Priority = CacheItemPriority.Default;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> policy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】ScrapySharp简单封装为Requester</title>
    <url>/posts/41785.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>为了便于使用及日后的扩展，将Scrapy简单封装为了Requester。</p><a id="more"></a><p>具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Crawler.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Protocol</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Requester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Uri Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> Browser Browser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Requester</span>(<span class="params"><span class="keyword">string</span> url, Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; headers = <span class="literal">null</span>, Browser browser = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> u = <span class="keyword">new</span> Uri(url);</span><br><span class="line">            <span class="comment">//检测地址是域名还是IP地址,如果是域名,则使用DnsResolver解析为IP地址</span></span><br><span class="line">            <span class="keyword">var</span> leftPart = u.GetLeftPart(UriPartial.Authority).Replace(u.GetLeftPart(UriPartial.Scheme), <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//正则匹配是否为IP地址</span></span><br><span class="line">            <span class="keyword">if</span> (!RegexHelper.IsMatch(leftPart, <span class="string">@"\d+\.\d+\.\d+\.\d+\w"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> dns = <span class="keyword">new</span> DnsResolver(leftPart);</span><br><span class="line">                <span class="keyword">if</span> (dns.IsSuccess)</span><br><span class="line">                    u = <span class="keyword">new</span> Uri(url.Replace(leftPart, dns.Record.Address.ToString()));</span><br><span class="line">            &#125;</span><br><span class="line">            Url = u;</span><br><span class="line">            Browser = browser ?? <span class="keyword">new</span> Browser();</span><br><span class="line">            <span class="keyword">if</span> (headers == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> header <span class="keyword">in</span> headers)</span><br><span class="line">                Browser.Headers[header.Key] = header.Value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetHtml</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Browser.DownloadString(Url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">GetFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Browser.NavigateToPage(Url).RawResponse.Body;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到可能对ScrapyBrowser做一些扩展（例如增加对FTP等其他协议的支持），故新建了Browser类继承自ScrapyBrowser类：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ScrapySharp.Network;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Protocol</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Browser</span> : <span class="title">ScrapingBrowser</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>ScrapySharp</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】Url过滤模块UrlFilter</title>
    <url>/posts/27677.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Url Filter则是对提取出来的URL再进行一次筛选。不同的应用筛选的标准是不一样的，比如对于baidu/google的搜索，一般不进行筛选，但是对于垂直搜索或者定向抓取的应用，那么它可能只需要满足某个条件的url，比如不需要图片的url，比如只需要某个特定网站的url等等。Url Filter是一个和应用密切相关的模块。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Crawler.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Processing</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UrlFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Uri&gt; <span class="title">RemoveByRegex</span>(<span class="params">List&lt;Uri&gt; uris, <span class="keyword">params</span> <span class="keyword">string</span>[] regexs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> uriList=<span class="keyword">new</span> List&lt;Uri&gt;(uris);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uriList.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> regexs)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!RegexHelper.IsMatch(uriList[i].ToString(), r)) <span class="keyword">continue</span>;</span><br><span class="line">                    uris.RemoveAt(i);</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> uriList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Uri&gt; <span class="title">SelectByRegex</span>(<span class="params">List&lt;Uri&gt; uris, <span class="keyword">params</span> <span class="keyword">string</span>[] regexs</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> uriList = <span class="keyword">new</span> List&lt;Uri&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> t <span class="keyword">in</span> uris)</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> regexs)</span><br><span class="line">                    <span class="keyword">if</span> (RegexHelper.IsMatch(t.ToString(), r))</span><br><span class="line">                        <span class="keyword">if</span>(!uriList.Contains(t))</span><br><span class="line">                            uriList.Add(t);</span><br><span class="line">            <span class="keyword">return</span> uriList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>UrlFilter</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】基于 SimHash 的去重复处理模块ContentSeen的构建</title>
    <url>/posts/38230.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Internet上的一些站点常常存在着镜像网站（mirror），即两个网站的内容一样但网页对应的域名不同。这样会导致对同一份网页爬虫重复抓取多次。为了避免这种情况，对于每一份抓取到的网页，它首先需要进入ContentSeen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。这样的做法能够显著的降低爬虫需要下载的网页数。至于如果判断两个网页的内容是否一致，一般的思路是这样的：并不会去直接比较两个网页的内容，而是将网页的内容经过计算生成FingerPrint（指纹），通常FingerPrint是一个固定长度的字符串，要比网页的正文短很多。如果两个网页的FingerPrint一样，则认为它们内容完全相同。</p><p>为了完成这一模块，首先我们需要一个强大的指纹算法，将我们的网页内容计算成指纹存入数据库，下次直接判断指纹在保存前通过指纹的对比即可成功完成去重复操作。</p><a id="more"></a><h2 id="SmiHash算法"><a href="#SmiHash算法" class="headerlink" title="SmiHash算法"></a>SmiHash算法</h2><p>首先来看一下大名鼎鼎的Google公司使用的网页去重复算法SimHash吧：</p><p>GoogleMoses Charikar发表的一篇论文“detecting near-duplicates for web crawling”中提出了simhash算法，专门用来解决亿万级别的网页的去重任务。</p><p>SimHash作为locality sensitive hash（局部敏感哈希）的一种：</p><p>其主要思想是降维，将高维的特征向量映射成低维的特征向量，通过两个向量的Hamming Distance来确定文章是否重复或者高度近似。</p><p>其中，Hamming Distance，又称汉明距离，在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。也就是说，它就是将一个字符串变换成 另外一个字符串所需要替换的字符个数。例如：1011101 与 1001001 之间的汉明距离是 2。至于我们常说的字符串编辑距离则是一般形式的汉明距离。</p><p>如此，通过比较多个文档的SimHash值的海明距离，可以获取它们的相似度。</p><p>详情可以看这里<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9jaGVueWluZzk5L3AvMzgzMDcyOC5odG1s" title="http://www.cnblogs.com/chenying99/p/3830728.html">SimHash算法<i class="fa fa-external-link"></i></span></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>下面我们进行代码实现:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimHashAnalyser</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> HashSize = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetLikenessValue</span>(<span class="params"><span class="keyword">string</span> needle, <span class="keyword">string</span> haystack, TokeniserType type = TokeniserType.Overlapping</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> needleSimHash = GetSimHash(needle, type);</span><br><span class="line">            <span class="keyword">var</span> hayStackSimHash = GetSimHash(haystack, type);</span><br><span class="line">            <span class="keyword">return</span> GetLikenessValue(needleSimHash, hayStackSimHash);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetLikenessValue</span>(<span class="params"><span class="keyword">int</span> needleSimHash, <span class="keyword">int</span> hayStackSimHash</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> (HashSize - GetHammingDistance(needleSimHash, hayStackSimHash)) / (<span class="keyword">float</span>)HashSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">DoHashTokens</span>(<span class="params">IEnumerable&lt;<span class="keyword">string</span>&gt; tokens</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> tokens.Select(token =&gt; token.GetHashCode()).ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetHammingDistance</span>(<span class="params"><span class="keyword">int</span> firstValue, <span class="keyword">int</span> secondValue</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> hammingBits = firstValue ^ secondValue;</span><br><span class="line">            <span class="keyword">var</span> hammingValue = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">                <span class="keyword">if</span> (IsBitSet(hammingBits, i))</span><br><span class="line">                    hammingValue += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> hammingValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsBitSet</span>(<span class="params"><span class="keyword">int</span> b, <span class="keyword">int</span> pos</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> (b &amp; (<span class="number">1</span> &lt;&lt; pos)) != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetSimHash</span>(<span class="params"><span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetSimHash(input, TokeniserType.Overlapping);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetSimHash</span>(<span class="params"><span class="keyword">string</span> input, TokeniserType tokeniserType</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ITokeniser tokeniser;</span><br><span class="line">            <span class="keyword">if</span> (tokeniserType == TokeniserType.Overlapping)</span><br><span class="line">                tokeniser = <span class="keyword">new</span> OverlappingStringTokeniser();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tokeniser = <span class="keyword">new</span> FixedSizeStringTokeniser();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hashedtokens = DoHashTokens(tokeniser.Tokenise(input));</span><br><span class="line">            <span class="keyword">var</span> vector = <span class="keyword">new</span> <span class="keyword">int</span>[HashSize];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; HashSize; i++)</span><br><span class="line">                vector[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">value</span> <span class="keyword">in</span> hashedtokens)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; HashSize; j++)</span><br><span class="line">                    <span class="keyword">if</span> (IsBitSet(<span class="keyword">value</span>, j))</span><br><span class="line">                        vector[j] += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        vector[j] -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> fingerprint = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; HashSize; i++)</span><br><span class="line">                <span class="keyword">if</span> (vector[i] &gt; <span class="number">0</span>)</span><br><span class="line">                    fingerprint += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">return</span> fingerprint;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITokeniser</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">IEnumerable&lt;<span class="keyword">string</span>&gt; <span class="title">Tokenise</span>(<span class="params"><span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FixedSizeStringTokeniser</span> : <span class="title">ITokeniser</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">ushort</span> _tokensize;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FixedSizeStringTokeniser</span>(<span class="params"><span class="keyword">ushort</span> tokenSize = <span class="number">5</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tokenSize &lt; <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Token 不能超出范围"</span>);</span><br><span class="line">            <span class="keyword">if</span> (tokenSize &gt; <span class="number">127</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Token 不能超出范围"</span>);</span><br><span class="line">            _tokensize = tokenSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="keyword">string</span>&gt; <span class="title">Tokenise</span>(<span class="params"><span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> chunks = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (offset &lt; input.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                chunks.Add(<span class="keyword">new</span> <span class="keyword">string</span>(input.Skip(offset).Take(_tokensize).ToArray()));</span><br><span class="line">                offset += _tokensize;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> chunks;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OverlappingStringTokeniser</span> : <span class="title">ITokeniser</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">ushort</span> _chunkSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">ushort</span> _overlapSize;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OverlappingStringTokeniser</span>(<span class="params"><span class="keyword">ushort</span> chunkSize = <span class="number">4</span>, <span class="keyword">ushort</span> overlapSize = <span class="number">3</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (chunkSize &lt;= overlapSize)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Chunck 必须大于 overlap"</span>);</span><br><span class="line">            _overlapSize = overlapSize;</span><br><span class="line">            _chunkSize = chunkSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="keyword">string</span>&gt; <span class="title">Tokenise</span>(<span class="params"><span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="keyword">var</span> position = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (position &lt; input.Length - _chunkSize)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(input.Substring(position, _chunkSize));</span><br><span class="line">                position += _chunkSize - _overlapSize;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> TokeniserType</span><br><span class="line">    &#123;</span><br><span class="line">        Overlapping,</span><br><span class="line">        FixedSize</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>调用方法如下:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"the cat sat on the mat."</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"the cat sat on a mat."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> similarity = SimHashAnalyser.GetLikenessValue(s1, s2);</span><br><span class="line"></span><br><span class="line">Console.Clear();</span><br><span class="line">Console.WriteLine(<span class="string">"相似度: &#123;0&#125;%"</span>, similarity * <span class="number">100</span>);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p>输出为:<br><strong>相似度: 78.125%</strong></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>接下来就是对ContentSeen模块的简单封装:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Crawler.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Processing</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 对于每一份抓取到的网页，它首先需要进入Content Seen模块。该模块会判断网页的内容是否和已下载过的某个网页的内容一致，如果一致，则该网页不会再被送去进行下一步的处理。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ContentSeen</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetFingerPrint</span>(<span class="params"><span class="keyword">string</span> html</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> SimHashAnalyser.GetSimHash(html);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Similarity</span>(<span class="params"><span class="keyword">int</span> print1, <span class="keyword">int</span> print2</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> SimHashAnalyser.GetLikenessValue(print1, print2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】基于Bloom Filter的url去重模块UrlSeen</title>
    <url>/posts/41470.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。</p><a id="more"></a><p>为了提高过滤的效率,我们使用有极低误判率但是效率非常高的算法——Bloom Filter，已经有高手写好了Bloom Filter的算法实现，我们这里就直接站在巨人的肩膀上直接使用他写好的类库啦。</p><p>Nuget:</p><blockquote><p>Install-Package BloomFilter</p></blockquote><p>代码实现:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> BloomFilterDotNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Processing</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Url Seen用来做url去重。对于一个大的爬虫系统，它可能已经有百亿或者千亿的url，新来一个url如何能快速的判断url是否已经出现过非常关键。因为大的爬虫系统可能一秒钟就会下载几千个网页，一个网页一般能够抽取出几十个url，而每个url都需要执行去重操作，可想每秒需要执行大量的去重操作。因此Url Seen是整个爬虫系统中非常有技术含量的一个部分。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UrlSeen</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> BloomFilter&lt;<span class="keyword">string</span>&gt; Seen &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UrlSeen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Seen = <span class="keyword">new</span> BloomFilter&lt;<span class="keyword">string</span>&gt;(<span class="number">1000000</span>, <span class="number">0.0001</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UrlSeen</span>(<span class="params"><span class="keyword">int</span> targetCapacity, <span class="keyword">double</span> falsePositiveRate</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Seen = <span class="keyword">new</span> BloomFilter&lt;<span class="keyword">string</span>&gt;(targetCapacity, falsePositiveRate, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">MatchUrl</span>(<span class="params">Uri url</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Seen.Contains(url.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Count</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> Seen.Count; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Uri url</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Seen.Add(url.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Bloom Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>【爬虫学习笔记】用于提取网页中所有链接的 Extractor 模块</title>
    <url>/posts/33241.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。这里我们选择使用正则表达式来完成链接的提取。</p><p>html标签中的链接地址通常会出现在href属性或者src属性中，所以我们采用两个正则表达式来匹配网页中的所有链接地址。</p><a id="more"></a><p>网页链接提取器Extractor类：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Crawler.Common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Crawler.Processing</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Extractor的工作是从下载的网页中将它包含的所有URL提取出来。这是个细致的工作，你需要考虑到所有可能的url的样式，比如网页中常常会包含相对路径的url，提取的时候需要将它转换成绝对路径。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Extractor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Uri&gt; <span class="title">GetAllUrl</span>(<span class="params"><span class="keyword">string</span> html, <span class="keyword">string</span> host</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="comment">//匹配href属性</span></span><br><span class="line">            <span class="keyword">var</span> href = RegexHelper.ExtractStringArray(html, <span class="string">"href *= *['\"]*(\\S+)[\"']"</span>);</span><br><span class="line">            <span class="comment">//去掉匹配到字符串的空格、双引号和前面的href=，得到链接</span></span><br><span class="line">            <span class="keyword">var</span> temp = <span class="keyword">from</span> h <span class="keyword">in</span> href</span><br><span class="line">                       <span class="keyword">select</span> h.Replace(<span class="string">" "</span>, <span class="string">""</span>).Replace(<span class="string">"\""</span>, <span class="string">""</span>).Substring(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">//加入数组</span></span><br><span class="line">            list.AddRange(temp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//匹配src属性</span></span><br><span class="line">            <span class="keyword">var</span> src = RegexHelper.ExtractStringArray(html, <span class="string">"src *= *['\"]*(\\S+)[\"']"</span>);</span><br><span class="line">            temp = <span class="keyword">from</span> s <span class="keyword">in</span> src</span><br><span class="line">                   <span class="keyword">select</span> s.Replace(<span class="string">" "</span>, <span class="string">""</span>).Replace(<span class="string">"\""</span>, <span class="string">""</span>).Substring(<span class="number">4</span>);</span><br><span class="line">            list.AddRange(temp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去重</span></span><br><span class="line">            list = list.Distinct().ToList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将链接地址中的相对路径转换为绝对路径</span></span><br><span class="line">            <span class="keyword">var</span> uriList = list.Select(s =&gt; s.IndexOf(<span class="string">"http://"</span>, StringComparison.Ordinal) != <span class="number">0</span> ? <span class="keyword">new</span> Uri(<span class="keyword">new</span> Uri(host), s) : <span class="keyword">new</span> Uri(s)).ToList();</span><br><span class="line">            <span class="keyword">return</span> uriList.ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Extractor</tag>
      </tags>
  </entry>
  <entry>
    <title>【迷宫中的算法实践】迷宫生成算法——Prim算法</title>
    <url>/posts/47068.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>普里姆算法（Prim算法），图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点（英语：Vertex (graph theory)），且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）发现；并在1957年由美国计算机科学家罗伯特·普里姆（英语：Robert C. Prim）独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。</p><p>——来自百度百科</p><a id="more"></a><p>当我们将Prim算法用于迷宫生成时，情况有些不同，维基百科中给出了<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJpbSUyN3NfYWxnb3JpdGht" title="https://en.wikipedia.org/wiki/Prim%27s_algorithm">随机Prim迷宫生成算法(Randomized Prim’s algorithm)<i class="fa fa-external-link"></i></span>的解释及实现过程：<br><img src="https://qiniucdn.wayneshao.com/20180218224344/20180218104613142.png" alt><br>我们将算法实现部分翻译成中文</p><ol><li>让迷宫全都是墙.。</li><li>选一个格，作为迷宫的通路，然后把它的邻墙放入列表.。</li><li>当列表里还有墙时:<br>1). 从列表里随机选一个墙，如果它对面的格子不是迷宫的通路:<br>2). 把墙打通，让对面的格子成为迷宫的通路.。<br>把那个格子的邻墙加入列表。</li><li>如果对面的格子已经是通路了，那就从列表里移除这面墙。</li></ol><p>简单研究算法实现过程我们可以发现，Prim算法就是不断地从所有可以是通路的位置中随意选一个挖洞，直到没有可能为通路的位置。</p><p>整个实现过程还是相当于随意为路线附权值的Prim算法。</p><p>下面我们来做C#下的代码实现：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 普利姆迷宫生成法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startX"&gt;</span>起始点X坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startY"&gt;</span>起始点Y坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="widthLimit"&gt;</span>迷宫宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="heightLimit"&gt;</span>迷宫高度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="haveBorder"&gt;</span>迷宫是否含有墙<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[,] Prim(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> widthLimit, <span class="keyword">int</span> heightLimit,<span class="keyword">bool</span> haveBorder)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//block:不可通行    unBlock:可通行</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> block = <span class="number">0</span>,unBlock = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> r=<span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">//迷宫尺寸合法化</span></span><br><span class="line">    <span class="keyword">if</span> (widthLimit &lt; <span class="number">1</span>)</span><br><span class="line">        widthLimit = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (heightLimit &lt; <span class="number">1</span>)</span><br><span class="line">        heightLimit = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//迷宫起点合法化</span></span><br><span class="line">    <span class="keyword">if</span> (startX &lt; <span class="number">0</span> || startX &gt;= widthLimit)</span><br><span class="line">        startX = r.Next(<span class="number">0</span>, widthLimit);</span><br><span class="line">    <span class="keyword">if</span> (startY &lt; <span class="number">0</span> || startY &gt;= heightLimit)</span><br><span class="line">        startY = r.Next(<span class="number">0</span>, heightLimit);</span><br><span class="line">    <span class="comment">//减去边框所占的格子</span></span><br><span class="line">    <span class="keyword">if</span> (!haveBorder)</span><br><span class="line">    &#123;</span><br><span class="line">        widthLimit--;</span><br><span class="line">        heightLimit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迷宫尺寸换算成带墙尺寸</span></span><br><span class="line">    widthLimit *= <span class="number">2</span>;</span><br><span class="line">    heightLimit *= <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//迷宫起点换算成带墙起点</span></span><br><span class="line">    startX *= <span class="number">2</span>;</span><br><span class="line">    startY *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (haveBorder)</span><br><span class="line">    &#123;</span><br><span class="line">        startX++;</span><br><span class="line">        startY++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//产生空白迷宫</span></span><br><span class="line">    <span class="keyword">var</span> mazeMap = <span class="keyword">new</span> <span class="keyword">int</span>[widthLimit + <span class="number">1</span>, heightLimit + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= widthLimit; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//mazeMap.Add(new BitArray(heightLimit + 1));</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= heightLimit; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            mazeMap[x, y] = block;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//邻墙列表</span></span><br><span class="line">    <span class="keyword">var</span> blockPos = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//将起点作为目标格</span></span><br><span class="line">    <span class="keyword">int</span> targetX = startX, targetY = startY;</span><br><span class="line">    <span class="comment">//将起点标记为通路</span></span><br><span class="line">    mazeMap[targetX, targetY] = unBlock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录邻墙</span></span><br><span class="line">    <span class="keyword">if</span> (targetY &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX, targetY - <span class="number">1</span>, <span class="number">0</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetX &lt; widthLimit)</span><br><span class="line">    &#123;</span><br><span class="line">        blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX + <span class="number">1</span>, targetY, <span class="number">1</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetY &lt; heightLimit)</span><br><span class="line">    &#123;</span><br><span class="line">        blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX, targetY + <span class="number">1</span>, <span class="number">2</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetX &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX - <span class="number">1</span>, targetY, <span class="number">3</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (blockPos.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//随机选一堵墙</span></span><br><span class="line">        <span class="keyword">var</span> blockIndex = r.Next(<span class="number">0</span>, blockPos.Count / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//找到墙对面的墙</span></span><br><span class="line">        <span class="keyword">if</span> (blockPos[blockIndex + <span class="number">2</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            targetX = blockPos[blockIndex];</span><br><span class="line">            targetY = blockPos[blockIndex + <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (blockPos[blockIndex + <span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            targetX = blockPos[blockIndex] + <span class="number">1</span>;</span><br><span class="line">            targetY = blockPos[blockIndex + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (blockPos[blockIndex + <span class="number">2</span>] == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            targetX = blockPos[blockIndex];</span><br><span class="line">            targetY = blockPos[blockIndex + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (blockPos[blockIndex + <span class="number">2</span>] == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            targetX = blockPos[blockIndex] - <span class="number">1</span>;</span><br><span class="line">            targetY = blockPos[blockIndex + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果目标格未连通</span></span><br><span class="line">        <span class="keyword">if</span> (mazeMap[targetX, targetY] == block)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//联通目标格</span></span><br><span class="line">            mazeMap[blockPos[blockIndex], blockPos[blockIndex + <span class="number">1</span>]] = unBlock;</span><br><span class="line">            mazeMap[targetX, targetY] = unBlock;</span><br><span class="line">            <span class="comment">//添加目标格相邻格</span></span><br><span class="line">            <span class="keyword">if</span> (targetY &gt; <span class="number">1</span> &amp;&amp; mazeMap[targetX, targetY - <span class="number">1</span>] == block &amp;&amp; mazeMap[targetX, targetY - <span class="number">2</span>] == block)</span><br><span class="line">            &#123;</span><br><span class="line">                blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX, targetY - <span class="number">1</span>, <span class="number">0</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (targetX &lt; widthLimit &amp;&amp; mazeMap[targetX + <span class="number">1</span>, targetY] == block &amp;&amp; mazeMap[targetX + <span class="number">2</span>, targetY] == block)</span><br><span class="line">            &#123;</span><br><span class="line">                blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX + <span class="number">1</span>, targetY, <span class="number">1</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (targetY &lt; heightLimit &amp;&amp; mazeMap[targetX, targetY + <span class="number">1</span>] == block &amp;&amp; mazeMap[targetX, targetY + <span class="number">2</span>] == block)</span><br><span class="line">            &#123;</span><br><span class="line">                blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX, targetY + <span class="number">1</span>, <span class="number">2</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (targetX &gt; <span class="number">1</span> &amp;&amp; mazeMap[targetX - <span class="number">1</span>, targetY] == block &amp;&amp; mazeMap[targetX - <span class="number">1</span>, targetY] == block)</span><br><span class="line">            &#123;</span><br><span class="line">                blockPos.AddRange(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; targetX - <span class="number">1</span>, targetY, <span class="number">3</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        blockPos.RemoveRange(blockIndex, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mazeMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Prim</tag>
        <tag>迷宫</tag>
      </tags>
  </entry>
  <entry>
    <title>【迷宫中的算法实践】迷宫生成算法——递归分割算法</title>
    <url>/posts/62848.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>Recursive division method</strong></p><p>Mazes can be created with recursive division, an algorithm which works as follows: Begin with the maze’s space with no walls. Call this a chamber. Divide the chamber with a randomly positioned wall (or multiple walls) where each wall contains a randomly positioned passage opening within it. Then recursively repeat the process on the subchambers until all chambers are minimum sized. This method results in mazes with long straight walls crossing their space, making it easier to see which areas to avoid.</p><p>For example, in a rectangular maze, build at random points two walls that are perpendicular to each other. These two walls divide the large chamber into four smaller chambers separated by four walls. Choose three of the four walls at random, and open a one cell-wide hole at a random point in each of the three. Continue in this manner recursively, until every chamber has a width of one cell in either of the two directions.</p><a id="more"></a><p><img src="https://qiniucdn.wayneshao.com/20180218231937/20180218112102947.gif" alt></p><h2 id="递归分割算法"><a href="#递归分割算法" class="headerlink" title="递归分割算法"></a>递归分割算法</h2><p>可以用递归分割法创建迷宫，算法的工作原理如下：</p><ol><li><p>开始创建迷宫，使整个空间没有壁，我们称之为“室”。</p></li><li><p>在随机位置生成壁将室分割为两个子室，并在壁上随机开孔，使子室联通。</p></li><li><p>重复步骤2，直到所有子室全部不可分割（即子室某一个维度等于1）。</p></li></ol><p>例如，在矩形迷宫中，在任意点建立彼此垂直的两个壁。 这两个壁将大腔室分成由四个壁分开的四个较小腔室。 随机选择四个墙壁中的三个，并在三个墙壁的随机点处打开一个单元格的孔。 继续以这种方式递归，直到每个室在两个方向中的任一个方向上具有一个单元的宽度。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面我们来做C#的代码实现：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 递归回溯法迷宫生成法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startX"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="startY"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="widthLimit"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="heightLimit"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RecursiveBacktrack</span>(<span class="params"><span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> widthLimit, <span class="keyword">int</span> heightLimit</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PathStack = <span class="keyword">new</span> Stack&lt;Point&gt;();</span><br><span class="line">    <span class="comment">//周围未连通格坐标</span></span><br><span class="line">    <span class="keyword">int</span>[] blockPos = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">//周围未标记格的数量</span></span><br><span class="line">    <span class="keyword">int</span> blockNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将起点作为当前格</span></span><br><span class="line">    <span class="keyword">int</span> currentX = startX;</span><br><span class="line">    <span class="keyword">int</span> currentY = startY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//标记起点</span></span><br><span class="line">    MazeMap[currentX, currentY] = UnBlock;</span><br><span class="line">    CreateScript.Add(<span class="keyword">new</span> ScriptPoint(<span class="keyword">new</span> Point(currentX, currentY), <span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检测周围有没有未连通的格子</span></span><br><span class="line">        blockNum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//检查上方</span></span><br><span class="line">        <span class="keyword">if</span> (currentY &gt; <span class="number">1</span> &amp;&amp; MazeMap[currentX, currentY - <span class="number">2</span>] == Block)</span><br><span class="line">        &#123;</span><br><span class="line">            blockPos[blockNum] = <span class="number">0</span>;</span><br><span class="line">            blockNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查右侧</span></span><br><span class="line">        <span class="keyword">if</span> (currentX &lt; widthLimit &amp;&amp; MazeMap[currentX + <span class="number">2</span>, currentY] == Block)</span><br><span class="line">        &#123;</span><br><span class="line">            blockPos[blockNum] = <span class="number">1</span>;</span><br><span class="line">            blockNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查下方</span></span><br><span class="line">        <span class="keyword">if</span> (currentY &lt; heightLimit &amp;&amp; MazeMap[currentX, currentY + <span class="number">2</span>] == Block)</span><br><span class="line">        &#123;</span><br><span class="line">            blockPos[blockNum] = <span class="number">2</span>;</span><br><span class="line">            blockNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查左侧</span></span><br><span class="line">        <span class="keyword">if</span> (currentX &gt; <span class="number">1</span> &amp;&amp; MazeMap[currentX - <span class="number">2</span>, currentY] == Block)</span><br><span class="line">        &#123;</span><br><span class="line">            blockPos[blockNum] = <span class="number">3</span>;</span><br><span class="line">            blockNum++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选出下一个当前格</span></span><br><span class="line">        <span class="keyword">if</span> (blockNum &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//随机选择一个邻格</span></span><br><span class="line">            blockNum = _r.Next(<span class="number">0</span>, blockNum);</span><br><span class="line">            <span class="comment">//把当前格入栈</span></span><br><span class="line">            PathStack.Push(<span class="keyword">new</span> Point(currentX, currentY));</span><br><span class="line">            <span class="comment">//连通邻格，并将邻格指定为当前格</span></span><br><span class="line">            <span class="keyword">switch</span> (blockPos[blockNum])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    MazeMap[currentX, currentY - <span class="number">1</span>] = UnBlock;</span><br><span class="line">                    CreateScript.Add(<span class="keyword">new</span> ScriptPoint(<span class="keyword">new</span> Point(currentX, currentY - <span class="number">1</span>), <span class="literal">false</span>));</span><br><span class="line">                    currentY -= <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    MazeMap[currentX + <span class="number">1</span>, currentY] = UnBlock;</span><br><span class="line">                    CreateScript.Add(<span class="keyword">new</span> ScriptPoint(<span class="keyword">new</span> Point(currentX + <span class="number">1</span>, currentY), <span class="literal">false</span>));</span><br><span class="line">                    currentX += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    MazeMap[currentX, currentY + <span class="number">1</span>] = UnBlock;</span><br><span class="line">                    CreateScript.Add(<span class="keyword">new</span> ScriptPoint(<span class="keyword">new</span> Point(currentX, currentY + <span class="number">1</span>), <span class="literal">false</span>));</span><br><span class="line">                    currentY += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    MazeMap[currentX - <span class="number">1</span>, currentY] = UnBlock;</span><br><span class="line">                    CreateScript.Add(<span class="keyword">new</span> ScriptPoint(<span class="keyword">new</span> Point(currentX - <span class="number">1</span>, currentY), <span class="literal">false</span>));</span><br><span class="line">                    currentX -= <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//标记当前格</span></span><br><span class="line">            MazeMap[currentX, currentY] = UnBlock;</span><br><span class="line">            CreateScript.Add(<span class="keyword">new</span> ScriptPoint(<span class="keyword">new</span> Point(currentX, currentY), <span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (PathStack.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将栈顶作为当前格</span></span><br><span class="line">            Point top = PathStack.Pop();</span><br><span class="line">            currentY = top.Y;</span><br><span class="line">            currentX = top.X;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (PathStack.Count &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>迷宫</tag>
        <tag>递归分割</tag>
      </tags>
  </entry>
  <entry>
    <title>【迷宫中的算法实践】迷宫问题算法综述</title>
    <url>/posts/26097.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近听闻数据结构与算法实践课的老师又出了和上年一样的选题，不禁想起了去年自己完成作业时的点点滴滴，遗憾当时没有写博客的习惯，之前的一些心得这一年实践的过去也逐渐淡忘了，突然就有了总结一下的想法，希望能有新的收获吧。<br><a id="more"></a><br>由于当时也没注意保存，软件完成过程中的一些文档早已丢失了，幸运的是Winform版源码还在，Unity3D版程序也还幸存，虽然由于时间紧张只完成了大概框架，但美观程度也远非Winform可以相比的，先上几张软件图吧：<br><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218102928613.png" alt><br><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218102935756.png" alt><br><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218102935756.png" alt></p><h2 id="生成算法"><a href="#生成算法" class="headerlink" title="生成算法"></a>生成算法</h2><p>软件实现了普利姆算法、递归回溯算法、递归分割算法和深度遍历图算法四种算法来完成迷宫的生成，前两种算法生成的迷宫本质上是一个二维矩阵网络形式的生成树，也就是说其中没有回路，同时从左下角的起点到迷宫中的每一点都有且仅有一条路径，递归分割法虽然不是生成树算法但是同样属于没有回路的迷宫生成算法，深度遍历图算法则来源于知网上的一篇论文，属于图的深度遍历算法，生成的迷宫随机性更强，路径也不止一条，但不得不说的确扮相比较差。</p><h3 id="普利姆算法迷宫（Prim）"><a href="#普利姆算法迷宫（Prim）" class="headerlink" title="普利姆算法迷宫（Prim）"></a>普利姆算法迷宫（Prim）</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103025583.gif" alt></p><h3 id="递归分割算法（Recursive-division）"><a href="#递归分割算法（Recursive-division）" class="headerlink" title="递归分割算法（Recursive division）"></a>递归分割算法（Recursive division）</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103145980.gif" alt></p><h3 id="递归回溯（Recursive-backtracker）"><a href="#递归回溯（Recursive-backtracker）" class="headerlink" title="递归回溯（Recursive backtracker）"></a>递归回溯（Recursive backtracker）</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103226097.gif" alt></p><h3 id="深度遍历图（Deep-traversal-graph）"><a href="#深度遍历图（Deep-traversal-graph）" class="headerlink" title="深度遍历图（Deep traversal graph）"></a>深度遍历图（Deep traversal graph）</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103309658.gif" alt></p><h2 id="寻路算法"><a href="#寻路算法" class="headerlink" title="寻路算法"></a>寻路算法</h2><p>至于寻路算法，软件实现了深度优先遍历、广度优先遍历、和A-Star三种算法，前两种自不必说，A-Star算法是一种启发式搜索算法，移动时会评估向周围八个方向行走的预期代价，实时选出更小代价的移动方向，不过因为生成的迷宫均为正方形迷宫且起点和终点固定为左上和右下，所以在本项目中，A-Star算法并未发挥出它应有的机智，效率与广度优先基本相同。后两种算法可以寻找到最短路径，而深度优先则并不能展示。图中绿色为正确路线，蓝色为寻路过程中经过的路线。。（PS：设定为深度广度四方向移动，A-Star八方向移动）</p><h3 id="深度优先遍历（DFS）"><a href="#深度优先遍历（DFS）" class="headerlink" title="深度优先遍历（DFS）"></a>深度优先遍历（DFS）</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103413877.gif" alt></p><h3 id="广度优先遍历（BFS）"><a href="#广度优先遍历（BFS）" class="headerlink" title="广度优先遍历（BFS）"></a>广度优先遍历（BFS）</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103500950.gif" alt></p><h3 id="A-Star"><a href="#A-Star" class="headerlink" title="A-Star"></a>A-Star</h3><p><img src="https://qiniucdn.wayneshao.com/20180218222743/20180218103540517.gif" alt><br>因为实例中的迷宫入口出口位置的特殊性，广度优先在寻路过程中基本要走完全称，显得有些不太机智，而A-Star的表现也和广度优先近似。<br><strong>本文章属于综述，后面的算法会分篇分别阐述。</strong></p>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>迷宫</tag>
      </tags>
  </entry>
  <entry>
    <title>一木禾网盘文件下载地址抓取分析</title>
    <url>/posts/5284.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是对抓取一木禾网盘文件下载地址的整个流程就行分析，并依次解决其中各个环节涉及的技术问题。</p><a id="more"></a><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>最近因为一些个人原因用到了一木禾网盘，这个收费网盘虽然较一些国外的倒数30秒网盘容易了一些，也没有十分钟只能下载一个的限制，但如果下载资源较多还是显得十分麻烦。<br>网上搜索了很长时间，功夫不负有心认，终于在<span class="exturl" data-url="aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi9mb3J1bS5waHA=" title="https://www.52pojie.cn/forum.php">吾爱破解<i class="fa fa-external-link"></i></span>找到了 <span class="exturl" data-url="aHR0cDovL3d3dy41MnBvamllLmNuL3NwYWNlLXVpZC0xMjYxMDkuaHRtbA==" title="http://www.52pojie.cn/space-uid-126109.html">cylisme<i class="fa fa-external-link"></i></span> 作品 <span class="exturl" data-url="aHR0cDovL3d3dy41MnBvamllLmNuL3RocmVhZC0yMTU3MTktMS0xLmh0bWw=" title="http://www.52pojie.cn/thread-215719-1-1.html">一木禾网盘批量下载<i class="fa fa-external-link"></i></span> 。<br>软件界面如下：<br><img src="https://qiniucdn.wayneshao.com//20180218182211/20180218063130751.png" alt><br>虽然可以进行使用，但是每一个验证码都必须手动输入，就起了自己制作一个网盘批量下载器的想法 。<br><strong>我本人只是一个C#初学者，言辞中有不正确的请指出，若文中内容侵犯了您的权益，请联系删除。</strong></p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>网页端获取下载地址流程分析：<br>使用Chrome的开发人员工具得到了以下流程<br><img src="https://qiniucdn.wayneshao.com//20180218182211/20180218063408396.png" alt><br>由上图可知，关键性技术问题为验证码识别</p><h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>一木禾的验证码是杂色点比较多的四位数字，如下图：<br><img src="https://qiniucdn.wayneshao.com//20180218182211/20180218083729794.png" alt><br>尝试过几次自行去杂色点识别数字，但是因为个人对图形处理方面的知识十分有限，均以失败告终，最终使用了<strong>次世代验证码识别系统2.3</strong>来完成验证码识别，系统支持C#调用，经过几次调教之后已经能对一木禾验证码有不错的识别率。<br>以下是软件界面:<br><img src="https://qiniucdn.wayneshao.com//20180218182211/20180218083901347.png" alt><br><img src="https://qiniucdn.wayneshao.com//20180218182211/20180218083907810.png" alt><br><strong><em>本篇主要进行一些理论分析，下篇做具体代码实现。</em></strong></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET Core 不同程序集中存在相同命名空间时的解决思路</title>
    <url>/posts/2017.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　前几天同事遇到了这个问题，没查到资料找到了我这位老司机，隐约记得. NET Framework 应该用别名解决的我给出了两个字的解决方案 “别名”，被告知别名在. NET Core 中是不能像. NET Framework 中那样设置的，连忙打开 VS 亲自尝试了一下，以下是他遇到问题的两个包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package StackExchange.Redis</span><br><span class="line">PM&gt; Install-Package StackExchange.Redis.StrongName</span><br></pre></td></tr></table></figure><p>　　随便按照文档的调用简单写了一句代码</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(<span class="string">"localhost"</span>);</span><br></pre></td></tr></table></figure><p>！！<br>居然出了问题！</p><p>　　错误提示的大意为，StackExchange.Redis.dll 和 StackExchange.Redis.StrongName.dll 中都存在 StackExchange.Redis 命名空间，且命名空间下都有一个 ConnectionMultiplexer 类型，先不追究同事为何需要同时使用这样两个程序集，假设这是必要的，我们来尝试解决这个问题。</p><a id="more"></a><p>先试试使用. NET Framework 的老方法<br><img src="https://qiniucdn.wayneshao.com/.NET-Core-%E4%B8%8D%E5%90%8C/20180710081024412.png" alt></p><p>Framework 的方法在 Core 居然行不通，菜单里根本没有别名可以设置。<br>祭谷歌：<br><img src="https://qiniucdn.wayneshao.com/.NET-Core-%E4%B8%8D%E5%90%8C/20180710080824886.png" alt></p><p>　　然而翻了几页之后，大量的解决方法都是. Net Framework 的。<br>根据对微软的了解，我判断. NET Core 里属性菜单里虽然没有别名可以设置，但是解决方法一定还是落在 “别名” 上，很有可能是需要手动在项目文件中进行指定，中文描述不太准确，这方面的文章也比较滞后，再次尝试使用英文关键词搜索：</p><p><img src="https://qiniucdn.wayneshao.com/.NET-Core-%E4%B8%8D%E5%90%8C/20180710081620557.png" alt></p><p>只翻了两条，就在 Nuget 的一个 Issue 中找到了解决方法，果然是使用别名：</p><p><img src="https://qiniucdn.wayneshao.com/.NET-Core-%E4%B8%8D%E5%90%8C/20180710082052253.png" alt></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;Target Name=<span class="string">"ChangeAliasesOfStrongNameAssemblies"</span> BeforeTargets=<span class="string">"FindReferenceAssembliesForReferences;ResolveReferences"</span>&gt;</span><br><span class="line">    &lt;ItemGroup&gt;</span><br><span class="line">      &lt;ReferencePath Condition=<span class="string">"'%(FileName)' == 'StackExchange.Redis.StrongName'"</span>&gt;</span><br><span class="line">        &lt;Aliases&gt;signed&lt;/Aliases&gt;</span><br><span class="line">      &lt;/ReferencePath&gt;</span><br><span class="line">    &lt;/ItemGroup&gt;</span><br><span class="line">  &lt;/Target&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>EFCore</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>两种软件开发模式：瀑布与敏捷</title>
    <url>/posts/15045.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="瀑布开发模式"><a href="#瀑布开发模式" class="headerlink" title="瀑布开发模式"></a>瀑布开发模式</h2><p>　　瀑布模式是一种前几年在国内各大项目中比较流行的开发模式，特点是分阶段进行，每个阶段都很清晰，只有阶段对应的人员才会参与当前阶段的开发，每个阶段必须有产出物才可以开始下个阶段，整个周期较长，早期需求分析和设计的时间消耗较多，整个流程会尽量避免需求的改动，更适用于B端产品的开发。<br><img src="https://qiniucdn.wayneshao.com/%E4%B8%A4%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%80%91%E5%B8%83%E4%B8%8E%E6%95%8F%E6%8D%B7/20181101031030742.png" alt></p><a id="more"></a><h2 id="瀑布-VS-敏捷"><a href="#瀑布-VS-敏捷" class="headerlink" title="瀑布 VS 敏捷"></a>瀑布 VS 敏捷</h2><table><thead><tr><th></th><th><strong>瀑布</strong></th><th><strong>敏捷</strong></th></tr></thead><tbody><tr><td><strong><em>开发流程</em></strong></td><td>里程碑</td><td>迭代</td></tr><tr><td><strong><em>开发文档</em></strong></td><td>强调文档</td><td>可以工作的胜过面面俱到的文档</td></tr><tr><td><strong><em>开发人员</em></strong></td><td>强调分工</td><td>协助、沟通</td></tr><tr><td><strong><em>开发需求</em></strong></td><td>避免变化</td><td>拥抱变化</td></tr><tr><td><strong><em>需求变更</em></strong></td><td>谈判与计划</td><td>与客户合作</td></tr><tr><td>## 敏捷模式典型框架 Scrum</td><td></td><td></td></tr><tr><td>### 结构</td><td></td><td></td></tr><tr><td><img src="https://qiniucdn.wayneshao.com/%E4%B8%A4%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%80%91%E5%B8%83%E4%B8%8E%E6%95%8F%E6%8D%B7/20181101041035296.png" alt></td><td></td><td></td></tr><tr><td>#### Scrum 角色</td><td></td><td></td></tr><tr><td><strong>Product Owner：</strong>产品负责人，主要提需求的人，一般为老板。</td><td></td><td></td></tr><tr><td><strong>Scrum Master：</strong>Scrum 主管，保证Scrum模式的顺利执行（禁止在开发阶段该需求，督促开展会议等），一般为项目经理，或者项目之外的人担任。</td><td></td><td></td></tr><tr><td><strong>Team：</strong>开发团队，包含所有的开发人员。</td><td></td><td></td></tr><tr><td>#### 工件</td><td></td><td></td></tr><tr><td><strong>UserStory：</strong>用户故事，不必有清晰文档的产品需求。</td><td></td><td></td></tr><tr><td><strong>Product Backlog：</strong>产品订单，所有待开发的UserStory的集合。</td><td></td><td></td></tr><tr><td><strong>Sprint Backlog：</strong>冲刺订单，本周期内待开发的UserStory。</td><td></td><td></td></tr><tr><td><strong>Burndown Chat：</strong>冲刺燃尽图，周期内UserStory的变化曲线。</td><td></td><td></td></tr><tr><td>#### 活动</td><td></td><td></td></tr><tr><td><strong>Sprint Planning Meeting：</strong>计划会，周期末开展，总结冲刺燃尽图，评估冲刺订单。</td><td></td><td></td></tr><tr><td><strong>Daily Standuy Meeting：</strong>每日例会，每天早上开展，十五分钟内的短会，所有开发人员对昨天的工作成果，今天的工作内容，现在遇到的问题这三个问题进行描述，方便会议之后解决问题和让开发团队每一个成员了解到当前进度。</td><td></td><td></td></tr><tr><td><strong>Review Meeting：</strong>评审会，评审UserStory的可行性和工期。</td><td></td><td></td></tr><tr><td><strong>Retrospective Meeting：</strong>回顾会，每个迭代上线之后，以匿名的方式投票总结成员各自看到的问题，并在下一个迭代尝试解决。</td><td></td><td></td></tr><tr><td>#### Scrum 流程</td><td></td><td></td></tr></tbody></table><p><img src="https://qiniucdn.wayneshao.com/%E4%B8%A4%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%80%91%E5%B8%83%E4%B8%8E%E6%95%8F%E6%8D%B7/20181101040633936.png" alt></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>开发模式</tag>
        <tag>瀑布模式</tag>
        <tag>敏捷开发</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitLab CI 进行 hexo 的持续集成</title>
    <url>/posts/34874.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>其实很早之前我就意识到，把博客的源码不加掩饰的直接托管在 Github 是一件颇为危险的事，配置文件中配置的各种平台的 key 随时有可能被窃取，只是一直懒得动手，今天得闲把整个流程捋顺了，遂记录一下。</p><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ol><li>本文使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuY29t" title="https://gitlab.com">GitLab<i class="fa fa-external-link"></i></span> 提供的共享 gitlab-runner 来进行持续集成，本来手头有一台腾讯云的 1GB RAM、 CentOS 7.6 主机，在上面直接部署私有 gitlab_runner 其实能让整个过程变得更加简单一些，可惜经过测试通过 SSH 访问 gitlab.com 速度实在感人，就放弃了。</li><li>本文所用的持续集成方式是：<br>共享 github-runner Docker 编译打包 -&gt; WebHook -&gt; 下载最新包 -&gt; 部署</li><li>迁移源码到GitLab的步骤略过不提。</li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="新增访问令牌"><a href="#新增访问令牌" class="headerlink" title="新增访问令牌"></a>新增访问令牌</h2><p>在下载文件时，需要使用访问令牌，转到个人设置菜单，新增一个访问令牌：<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228080940646.png" alt><br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228080958633.png" alt><br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228081053893.png" alt><br>访问令牌仅能在生成后查看一次，注意妥善保存。</p><h2 id="配置-SSH-私钥与-known-hosts"><a href="#配置-SSH-私钥与-known-hosts" class="headerlink" title="配置 SSH 私钥与 known_hosts"></a>配置 SSH 私钥与 known_hosts</h2><p>参照官方文档，命名为 SSH_PRIVATE_KEY 和 SSH_KNOWN_HOSTS。<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228093822749.png" alt></p><h1 id="配置-gitlab-ci-yml"><a href="#配置-gitlab-ci-yml" class="headerlink" title="配置  .gitlab-ci.yml"></a>配置 .gitlab-ci.yml</h1><p><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228080142533.png" alt><br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228084859229.png" alt></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file is a template, and might need editing before it works on your project.</span></span><br><span class="line"><span class="comment"># Full project: https://gitlab.com/pages/hexo</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">node:10.15.3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="string">-s)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-Rf</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">touch</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"$SSH_PRIVATE_KEY"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-Rf</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">touch</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"$SSH_KNOWN_HOSTS"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh/*</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"owner@wayneshao.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"玮仔Wayne"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span> <span class="string">-e</span> <span class="string">package.json</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">3</span> <span class="string">days</span>  <span class="comment"># &lt;== !!!</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">project</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span></span><br></pre></td></tr></table></figure><p>如果没有禁用共享 git-runner，那提交 .gitlab-ci.yml 之后就能看到如下的部署过程了，可能会比较慢，等待邮件通知即可。<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228080418766.png" alt><br>之后就能看到生成的作业产物——打包好的 public 目录<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228080524554.png" alt><br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228080542637.png" alt></p><h1 id="WebHook"><a href="#WebHook" class="headerlink" title="WebHook"></a>WebHook</h1><h2 id="配置-WebHook-仓库集成"><a href="#配置-WebHook-仓库集成" class="headerlink" title="配置 WebHook 仓库集成"></a>配置 WebHook 仓库集成</h2><p><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228104145125.png" alt></p><h2 id="WebHook-监听"><a href="#WebHook-监听" class="headerlink" title="WebHook 监听"></a>WebHook 监听</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打算这里我打算使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FkbmFuaC93ZWJob29r" title="https://github.com/adnanh/webhook">WebHook<i class="fa fa-external-link"></i></span> 做 Web 监听，集成工作使用 shell 脚本来完成，先安装配置 WebHook ：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">go get github.com/adnanh/webhook</span><br><span class="line">cd go/bin</span><br><span class="line">vi hooks.json</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>hooks.json中按需求输入以下内容</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"blog"</span>,</span><br><span class="line">        <span class="attr">"execute-command"</span>: <span class="string">"/var/scripts/update-blog.sh"</span>,</span><br><span class="line">        <span class="attr">"command-working-directory"</span>: <span class="string">"/opt/backup-blog"</span>,</span><br><span class="line">        <span class="attr">"pass-arguments-to-command"</span>: [</span><br><span class="line">            <span class="comment">//传入打包文件大小用于校验</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"payload"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"builds.0.artifacts_file.size"</span> </span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"response-message"</span>: <span class="string">"job done!"</span>,</span><br><span class="line">        <span class="comment">//Hook条件</span></span><br><span class="line">        <span class="attr">"trigger-rule"</span>: &#123;</span><br><span class="line">            <span class="attr">"and"</span>: [</span><br><span class="line">                <span class="comment">//校验 Secret Token</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"value"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="string">"(仓库中配置的 Secret Token)"</span>,</span><br><span class="line">                        <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                            <span class="attr">"source"</span>: <span class="string">"header"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"X-Gitlab-Token"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//校验 payload 类型</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"value"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="string">"pipeline"</span>,</span><br><span class="line">                        <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                            <span class="attr">"source"</span>: <span class="string">"payload"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"object_kind"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//校验 payload 状态，只有成功才Hook</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"value"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="string">"success"</span>,</span><br><span class="line">                        <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                            <span class="attr">"source"</span>: <span class="string">"payload"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"object_attributes.status"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>PS:一定要有 response-message ，没有返回时 GitLab 会判定为访问失败</strong></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nohup ~/go/bin/webhook <span class="literal">-hooks</span> ~/go/bin/hooks.json <span class="literal">-verbose</span> &amp;</span><br></pre></td></tr></table></figure><p>访问 :9000/hooks/blog 测试<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228081926884.png" alt></p><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228082134051.png" alt><br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8GitLabCI%E8%BF%9B%E8%A1%8Chexo%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/20191228082148103.png" alt></p><h2 id="Shell-脚本实现"><a href="#Shell-脚本实现" class="headerlink" title="Shell 脚本实现"></a>Shell 脚本实现</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间以作为文件名/版本号</span></span><br><span class="line">datename=<span class="variable">$</span>(date +%Y%m%d%H%M%S)</span><br><span class="line"><span class="comment"># 获取最后一个文件名 </span></span><br><span class="line">filename=`ls <span class="literal">-l</span> | tail <span class="literal">-n</span> <span class="number">1</span> | awk <span class="string">'&#123;print $9&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用令牌下载最新的编译产出</span></span><br><span class="line">wget -<span class="literal">-header</span> <span class="string">"PRIVATE-TOKEN: （访问令牌)"</span> <span class="string">"https://gitlab.com/api/v4/projects/(项目ID)/jobs/artifacts/(源码所在的分支)/download?job=pages"</span> <span class="literal">-O</span> /opt/<span class="built_in">backup-blog</span>/<span class="variable">$datename</span>.zip</span><br><span class="line"></span><br><span class="line">echo </span><br><span class="line"><span class="comment"># 校验文件大小</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>(<span class="type">stat</span> --<span class="type">format</span>=%<span class="type">s</span> /<span class="type">opt</span>/<span class="built_in">backup-blog</span>/<span class="variable">$datename</span><span class="type">.zip</span>) == <span class="variable">$1</span> ]; then	</span><br><span class="line">	echo <span class="string">"[OK]size check passed."</span></span><br><span class="line">	<span class="comment"># 对比 Md5 校验是否为旧文件</span></span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$</span>(<span class="type">md5sum</span> <span class="variable">$datename</span><span class="type">.zip</span> | <span class="type">cut</span> -<span class="type">c1</span>-<span class="number">32</span>) == <span class="variable">$</span>(<span class="type">md5sum</span> <span class="variable">$filename</span> | <span class="type">cut</span> -<span class="type">c1</span>-<span class="number">32</span>) ]; then</span><br><span class="line">		echo <span class="string">"[ERROR]same with last."</span></span><br><span class="line">		rm <span class="literal">-Rf</span> /opt/<span class="built_in">backup-blog</span>/<span class="variable">$datename</span>.zip</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		echo <span class="string">"[OK]last md5 equal passed."</span></span><br><span class="line">		<span class="comment"># 解压</span></span><br><span class="line">		unzip <span class="literal">-o</span> /opt/<span class="built_in">backup-blog</span>/<span class="variable">$datename</span>.zip</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 更新</span></span><br><span class="line">		sudo rm <span class="literal">-Rf</span> /opt/blog</span><br><span class="line">		mkdir <span class="literal">-p</span> /opt/blog</span><br><span class="line">		cp <span class="literal">-rf</span> ./public/* /opt/blog</span><br><span class="line">		rm <span class="literal">-Rf</span> ./public</span><br><span class="line">		<span class="comment"># 重载 nginx</span></span><br><span class="line">		nginx <span class="literal">-s</span> reload</span><br><span class="line">	fi</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	echo <span class="string">"[ERROR]size not equal."</span></span><br><span class="line">	rm <span class="literal">-Rf</span> /opt/<span class="built_in">backup-blog</span>/<span class="variable">$datename</span>.zip</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>下载文件时需要在 http 请求头中设置键 PRIVATE-TOKEN 的值为访问令牌，才能请求到对应的文件。</li><li>最新产出文件的地址如图，注意修改项目 ID 和源码所在的分支名（项目 ID 可以再项目的设置中获得）。</li></ol>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>CI/CD</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Git提交记录中的文件更改时间来修改文件的更改时间</title>
    <url>/posts/9412.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在今天更新文章的时候，实验性的使用了按照更新时间排序，却发现所有文章的更新时间都是当天，推测是因为读取了文件的更新时间，而文件更新时间由于仓库刚刚新拉取而通通保持了当期时间，所以有了标题所示的需求。</p><a id="more"></a><h2 id="以下操作环境均为Linux系统"><a href="#以下操作环境均为Linux系统" class="headerlink" title="以下操作环境均为Linux系统"></a>以下操作环境均为Linux系统</h2><p>首先需要对git做设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中文目录处理</span></span><br><span class="line">git config core.quotepath <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>然后直接上脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 git 仓库中所有文件的最新修改时间并应用在文件上</span></span><br><span class="line">git ls-tree -r --name-only HEAD | <span class="keyword">while</span> <span class="built_in">read</span> filename; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$filename</span>;</span><br><span class="line">touch  -t <span class="string">"<span class="variable">$(date -d "$(git log -1 --pretty=format:"%aI" "$filename")</span>"</span> <span class="string">"+%Y%m%d%H%M.%S"</span>)<span class="string">" "</span><span class="variable">$filename</span><span class="string">";</span></span><br><span class="line"><span class="string">done</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用不安全代码 + 反射修改 String.Empty 的值</title>
    <url>/posts/25922.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>前几天的时候看到了 <span class="exturl" data-url="aHR0cHM6Ly9tdnAubWljcm9zb2Z0LmNvbS9lbi11cy9QdWJsaWNQcm9maWxlLzUwMDMyMjU=" title="https://mvp.microsoft.com/en-us/PublicProfile/5003225">吕毅<i class="fa fa-external-link"></i></span> 大佬写的博客<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLndhbHRlcmx2LmNvbS9wb3N0L3doeS1zdHJpbmctZW1wdHktaXMtYS1yZWFkb25seS1maWVsZC1idXQtbm90LWEtY29uc3RhbnQuaHRtbA==" title="https://blog.walterlv.com/post/why-string-empty-is-a-readonly-field-but-not-a-constant.html">为什么 C# 的 string.Empty 是一个静态只读字段，而不是一个常量呢？<i class="fa fa-external-link"></i></span>，<br>非常感谢吕毅大佬的分享，在文章的末尾大佬提到了通过反射修改 String.Empty 的可能，于是我打算自己实践一下。<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311084845629.png" alt></p><a id="more"></a><h2 id="反射修改"><a href="#反射修改" class="headerlink" title="反射修改"></a>反射修改</h2><p>首先上一个我自己封装的 ReflectionExtension 类，方便直接进行反射操作（这里只展示部分代码，完整代码会附上下载链接）</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System.Reflection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReflectionExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> BindingFlags Flags = BindingFlags.Public | BindingFlags.NonPublic |</span><br><span class="line">                         BindingFlags.Static | BindingFlags.Instance |</span><br><span class="line">                         BindingFlags.DeclaredOnly;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 通过反射设置字段的值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="instance"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="fieldName"&gt;</span>字段名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="value"&gt;</span>要修改为的值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetField</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">object</span> instance, <span class="keyword">string</span> fieldName, <span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> type = instance.GetType();</span><br><span class="line">            <span class="keyword">var</span> field = type.GetField(fieldName) ?? type.GetField(fieldName, Flags);</span><br><span class="line">            field?.SetValue(instance, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建项目的框架为 .NET Framework 3.5，使用以下代码完成反射修改 String.Empty ：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"Empty : <span class="subst">&#123;<span class="keyword">string</span>.Empty&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>.Empty.SetField(<span class="string">"m_stringLength"</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="string">""</span>.SetField(<span class="string">"Empty"</span>,<span class="string">"CBA"</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"Empty Reflection : <span class="subst">&#123;<span class="keyword">string</span>.Empty&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如图：<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311090724793.png" alt><br>有效!<br>查看一下 String.cs 的源码<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311112213462.png" alt><br>.NET Framework 3.5 以下版本中的 String.Empty 就是一个普通的共有只读字段。</p><p>下面将框架版本升级到 4.0 以上再次尝试：<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311112442989.png" alt><br>同样的方法在 4.0 以上的版本就行不通了，转到源码看一下：<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311112600692.png" alt><br>String.Empty 上增加了 <strong><code>__DynamicallyInvokable</code></strong> Attribute，查找资料:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Each blessed API will be annotated with a "__DynamicallyInvokableAttribute".</span></span><br><span class="line"><span class="comment">// This "__DynamicallyInvokableAttribute" is a type defined in its own assembly.</span></span><br><span class="line"><span class="comment">// So the ctor is always a MethodDef and the type a TypeDef.</span></span><br><span class="line"><span class="comment">// We cache this ctor MethodDef token for faster custom attribute lookup.</span></span><br><span class="line"><span class="comment">// If this attribute type doesn't exist in the assembly, it means the assembly</span></span><br><span class="line"><span class="comment">// doesn't contain any blessed APIs.</span></span><br><span class="line">Type invocableAttribute = GetType(<span class="string">"__DynamicallyInvokableAttribute"</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (invocableAttribute != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"> Contract.Assert(((MetadataToken)invocableAttribute.MetadataToken).IsTypeDef);</span><br><span class="line"></span><br><span class="line"> ConstructorInfo ctor = invocableAttribute.GetConstructor(Type.EmptyTypes);</span><br><span class="line"> Contract.Assert(ctor != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> token = ctor.MetadataToken;</span><br><span class="line"> Contract.Assert(((MetadataToken)token).IsMethodDef);</span><br><span class="line"></span><br><span class="line"> flags |= (ASSEMBLY_FLAGS)token &amp; ASSEMBLY_FLAGS.ASSEMBLY_FLAGS_TOKEN_MASK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据注释中的介绍，这个特性只是某种用于提升速度的标记，看来大约是跟 CLR 有关，与这个 Attribute 并没有什么关系。</p><h2 id="不安全代码"><a href="#不安全代码" class="headerlink" title="不安全代码"></a>不安全代码</h2><p>下面加入不安全代码，使用指针来实现我们的设置 String.Empty 。<br>首先打开项目属性，设置生成中的允许<strong>不安全代码</strong>选项<br><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311114311684.png" alt><br>代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StringHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 使用反射 + 不安全代码直接修改 string 的值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="str"&gt;</span>原始字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="newStr"&gt;</span>新字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> str, <span class="keyword">string</span> newStr</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//使用反射设置字符串的长度属性</span></span><br><span class="line">            str.SetField(<span class="string">"m_stringLength"</span>, newStr.Length);</span><br><span class="line">            <span class="comment">//指针大法好</span></span><br><span class="line">            <span class="keyword">fixed</span> (<span class="keyword">char</span>* pe = str)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; newStr.Length; i++)</span><br><span class="line">                    pe[i] = newStr[i];</span><br><span class="line">                pe[newStr.Length] = <span class="string">'\0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 .NET Framework 4.7.2 下重新运行下面的测试代码</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"Empty : <span class="subst">&#123;<span class="keyword">string</span>.Empty&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>.Empty.SetField(<span class="string">"m_stringLength"</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="string">""</span>.SetField(<span class="string">"Empty"</span>,<span class="string">"CBA"</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"Empty Reflection : <span class="subst">&#123;<span class="keyword">string</span>.Empty&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>.Empty.SetValue(<span class="string">"ABC"</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"Empty Unsafe : <span class="subst">&#123;<span class="keyword">string</span>.Empty&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9-String.Empty-%E7%9A%84%E5%80%BC/20190311114612307.png" alt><br>不安全代码可以在最新版 Framework 上实现修改 String.Empty。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在各个平台下运行测试代码，结论如下：</p><table><thead><tr><th>平台</th><th>反射</th><th>不安全代码</th></tr></thead><tbody><tr><td>.NET Framework 1.0 - 3.5</td><td><strong>√</strong></td><td><strong>√</strong></td></tr><tr><td>.NET Framework 4.0 - 4.7.2</td><td><strong>×</strong></td><td><strong>√</strong></td></tr><tr><td>.NET Core 1.0 - 2.0</td><td><strong>×</strong></td><td><strong>√</strong></td></tr><tr><td>.NET Core 2.1 - 2.2</td><td><strong>×</strong></td><td><strong>×</strong></td></tr><tr><td>.NET Core 3.0 preview</td><td><strong>FieldAccessException</strong><br>Cannot set initonly static field ‘Empty’ after type ‘System.String’ is initialized.</td><td><strong>×</strong></td></tr></tbody></table>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>反射</tag>
        <tag>unsafe</tag>
        <tag>String.Empty</tag>
        <tag>不安全代码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用委托解决方法的跨线程调用问题</title>
    <url>/posts/51547.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明和需进行跨线程调用的方法相同形参表的委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">AddStatusInfoToFormCallback</span>(<span class="params"><span class="keyword">string</span> str</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddStatusInfoToForm</span>(<span class="params"><span class="keyword">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//检测调用控件的线程和创建控件的线程是否相同</span></span><br><span class="line">    <span class="comment">//如果调用控件的线程和创建创建控件的线程不是同一个则为True</span></span><br><span class="line">    <span class="keyword">if</span> (InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用委托调用本方法</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> AddStatusInfoToFormCallback(AddStatusInfoToForm);</span><br><span class="line">        Invoke(d, str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当前线程调用</span></span><br><span class="line">        Controls.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Winform</tag>
        <tag>跨线程</tag>
        <tag>委托</tag>
      </tags>
  </entry>
  <entry>
    <title>关于.Net 调用广州医保HG_Interface.dll调用的一些总结（外部组件异常）</title>
    <url>/posts/57100.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>开始做的时候也遇到了奇葩的情况、创智提供的dll只能在有UI的Winform、WPF上使用，WebForm、WPF、WebService完全没办法使用，Console在加上了[STAThread]的线程Attribute之后也可以成功调用，推测和dll使用MFC编写有关、但是各种引入MFC的dll均无果，一筹莫展之际把问题提到了交流群里，吾乐吧的牛总给出了可行的解决方案—-使用WCF来调用。</p><p>有了具体解决方案一切就顺风顺水了，但是完成程序之后又出现了奇葩的问题，部署到服务器也会出现外部组件异常的问题，本机调试可以部署却不行，很明显就是环境的问题了，由于dll为非托管dll，我们无法从错误中得到有效的错误信息，从环境下手尝试解决，虽然最终成功了，但是目前还并不清楚到底是因为什么，这里的经验是MSSOAP、MSXML、WebMatrix一定要装，如果还是不能成功运行可以考虑安装VS环境试试看。期待能有高手给出具体的解决之道。</p><a id="more"></a>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>广州医保</tag>
        <tag>HG_Interface.dll</tag>
        <tag>外部组件异常</tag>
      </tags>
  </entry>
  <entry>
    <title>关于租房到期离职纠结</title>
    <url>/posts/18742.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>　　去年4月8日换工作时租的 Loft 公寓即将到期，而决定续租与否或是租在哪里的最重要的因素无疑就是要不要换工作，遂写一篇博客辅助分析。</p><a id="more"></a><h2 id="换"><a href="#换" class="headerlink" title="换 ~"></a>换 ~</h2><h3 id="租房合同即将到期"><a href="#租房合同即将到期" class="headerlink" title="租房合同即将到期"></a>租房合同即将到期</h3><p>　　我现在租住的是一间复式的 Loft 公寓，去年 4月8日 签了为期一年的合同，月租1850。到今天已经询问过续租价格为2400，涨幅30%。</p><h3 id="995-确实是对人性的很大磨损。"><a href="#995-确实是对人性的很大磨损。" class="headerlink" title="995 确实是对人性的很大磨损。"></a>995 确实是对人性的很大磨损。</h3><p>　　现在的作息基本就是周日晚上到周五晚上每天九点半以后到家，看会儿电视，逛逛论坛，再翻几页书，基本就到了十二点，再坐一些杂七杂八的事，到洗漱完成睡觉大约就是一点到两点了，八点左右起床，洗漱、喝咖啡，上班。如此往复，到周末确实是极累的，周末作息基本就是中午起床，晚上依然是一两点睡觉。<br>这套作息带来的问题有：</p><ol><li>自我提升的时间较少。</li><li>厌恶社交，越来越宅。（租住地偏远，外出社交成本至少是一小时以上的地铁）</li></ol><h3 id="工作内容重复，温水煮青蛙"><a href="#工作内容重复，温水煮青蛙" class="headerlink" title="工作内容重复，温水煮青蛙"></a>工作内容重复，温水煮青蛙</h3><ol><li>我所在的项目组属于公司里支撑部门，用于内部培训，各种内部考核、人才培训相关的需求都会转到组里，需求迭代非常快，经常有紧急需求需要处理，所以大部分时间都是各种重复度很高的业务接口，很多技术框架的调整一直想要做，却没有足够的时间。</li><li>项目到现在已经经历了两年多，底层框架是较为成熟的老框架，有些问题需要更换框架才能解决，但是时间不足。</li><li>现在的工作模式是前后端分离，我作为后端开发的主要工作就是约定、完成接口，重复度极高。</li></ol><h3 id="起薪低带来的未来不可期"><a href="#起薪低带来的未来不可期" class="headerlink" title="起薪低带来的未来不可期"></a>起薪低带来的未来不可期</h3><p>　　之前所在的公司是从实习期起一直就职的，故而没有积累到这方面的经验。去年四月跳槽到现在的公司属于技术转型，因为刚开始从事后端工作，没有足够的经验，故而起薪很低。<br>　　到年底统一调薪之后暗示直系领导无果之后，我才意识到，起薪真的是非常重要。<br>　　有资格上调薪资的领导和我中间隔了一层，一般没办法直接接触到，故而领导主动注意到我的成绩并且我调整薪水基本不可能，剩下的机会就只有统一调薪，而统一调薪基本就属于“侮辱性普调”。<br>　　我现在是组里的主程序员，我带着一位去年入职的校招生。虽然没有主动去了解过校招的工资，但是也大概知道他们的薪资范围，就目前的统一调薪频率来看，如果他们薪资一直不变，我大约再过两年才能有他们现在的工资。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　995虽然是很累，不过在行业里也不算压力最大的，工作重复也其实是大部分工作的特点，或许凑巧遇到合适的工作，这两点也能够有改进，但现在的情况也不是完全不能忍受。我也在主动调整作息，用一些碎片时间进行自我提升。目前房租的剧烈变化和薪水的不可期是我想要换工作最重要的原因。</p><h2 id="不换"><a href="#不换" class="headerlink" title="不换 ~"></a>不换 ~</h2><h3 id="主程的技术自由"><a href="#主程的技术自由" class="headerlink" title="主程的技术自由"></a>主程的技术自由</h3><p>　　去年下半年做了项目组的主程，技术上有很大的自由性，虽然现在的业务压力确实很忙，但未来的一段时间内应该也有一些机会对我私下抽空研究的一些技术做一些时间。</p><h3 id="工作年限不高就业自由度低"><a href="#工作年限不高就业自由度低" class="headerlink" title="工作年限不高就业自由度低"></a>工作年限不高就业自由度低</h3><p>　　工作年限较低，很多工作对年限的要求都未能达到。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>　　目前的打算是，先租一间便宜一些的公寓，未来半年内裸辞寻觅新的工作。</p>]]></content>
      <categories>
        <category>闹着玩儿</category>
      </categories>
      <tags>
        <tag>租房</tag>
        <tag>离职</tag>
      </tags>
  </entry>
  <entry>
    <title>多益大学技术简单总结</title>
    <url>/posts/31741.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>距离离职也有了大半个月，决定对整个大学项目开发的方方面面做一个简要总结。</p><a id="more"></a><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://qiniucdn.wayneshao.com/%E5%A4%9A%E7%9B%8A%E5%A4%A7%E5%AD%A6%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/20191015083234133.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大学的整体结构采用单体架构，整套架构是从传统三层架构+MVC扩展演进而来的，目前大部分页面都已经完成了前后端分离，目前大部分的业务代码都集中在BLL层。</p><h3 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h3><h4 id="前后端分离不彻底"><a href="#前后端分离不彻底" class="headerlink" title="前后端分离不彻底"></a>前后端分离不彻底</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>系统已经做了前后端分离，现在的情况是，所有的模块都是SPA，但是SPA本身还是通过 MVC 渲染模式，Router由后端完成， View 进行渲染。</p><h5 id="拟解决"><a href="#拟解决" class="headerlink" title="拟解决"></a>拟解决</h5><ol><li>把所有的单页整合到一个更大的单页里，把所有交互跳转都交给前端来做。</li><li>将整个前端代码分离到另一个库，前端的发版交由前端自行完成，不再由后端统一维护。</li></ol><h4 id="后端服务层耦合严重"><a href="#后端服务层耦合严重" class="headerlink" title="后端服务层耦合严重"></a>后端服务层耦合严重</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>系统经历了两年，多代程序员的维护，业务层各个Service中代码耦合严重，导致维护难度很大，也几乎不可能直接向微服务架构迁移。</p><h5 id="拟解决-1"><a href="#拟解决-1" class="headerlink" title="拟解决"></a>拟解决</h5><p>把各个Service里的引用收束到服务实体本身，所有需要跟其他业务实体交互的部分，部封装一层聚合服务来解决，将整个程序的架构演进到“面向微服务的单体应用架构”。（截止到离职前用户部分已经完成）</p><p>Wait…</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>某某大学</tag>
        <tag>工作经历</tag>
      </tags>
  </entry>
  <entry>
    <title>如何修改 .NET Core Kestrel 下的端口</title>
    <url>/posts/15088.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　今天在尝试 Consul 的时候需要动态改变 .NET Core Kestrel 下的端口以方便测试，故而查了查，发现原来除了最常使用的 UseUrls 之外，还有许多其他方法，故而总结一下。<br><a id="more"></a></p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="ASPNETCORE-URLS-环境变量"><a href="#ASPNETCORE-URLS-环境变量" class="headerlink" title="ASPNETCORE_URLS 环境变量"></a>ASPNETCORE_URLS 环境变量</h2><p>使用环境变量可以配置 Kestrel 使用的端口<br><strong>CODE</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> ASPNETCORE_URLS=http://127.0.0.1:5008;http://0.0.0.0:5009</span><br></pre></td></tr></table></figure><p><strong>RESULT</strong><br><img src="https://qiniucdn.wayneshao.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-.NET-Core/20190220123000050.png" alt></p><h2 id="–urls-命令行参数"><a href="#–urls-命令行参数" class="headerlink" title="–urls 命令行参数"></a>–urls 命令行参数</h2><p>使用 –urls 命令行参数可以配置 Kestrel 使用的端口<br><strong>CODE</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> dotnet EndpointConfigurationTest2.0.dll --urls http://0.0.0.0:5698;https://127.0.0.1:6936</span><br></pre></td></tr></table></figure><p><strong>RESULT</strong><br><img src="https://qiniucdn.wayneshao.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-.NET-Core/20190220123329442.png" alt></p><h2 id="UseUrls"><a href="#UseUrls" class="headerlink" title="UseUrls"></a>UseUrls</h2><p>使用 <strong>IWebHostBuilder</strong> 的扩展方法 UseUrls() 可以为 Kestrel 绑定一个或者多个 url ，支持 http 与 https，支持多个 string 参数或者单个 string 中使用分号分割。</p><p><strong>CODE</strong></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .UseUrls(<span class="string">"http://localhost:4411"</span>,<span class="string">"https://localhost:4412"</span>,<span class="string">"http://0.0.0.0:4413;https://localhost:4414"</span>)</span><br><span class="line">        .UseStartup&lt;Startup&gt;();</span><br></pre></td></tr></table></figure><p><strong>RESULT</strong><br><img src="https://qiniucdn.wayneshao.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-.NET-Core/20190219113830792.png" alt></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在配置文件中增加 Kestrel 节点来配置 Kestrel 使用的端口<br><strong>CODE</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Warning"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span>,</span><br><span class="line">  <span class="attr">"Kestrel"</span>: &#123;</span><br><span class="line">    <span class="attr">"EndPoints"</span>: &#123;</span><br><span class="line">      <span class="attr">"Http"</span>: &#123;</span><br><span class="line">        <span class="attr">"Url"</span>: <span class="string">"http://localhost:5000"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Https"</span>: &#123;</span><br><span class="line">        <span class="attr">"Url"</span>: <span class="string">"https://localhost:5006"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RESULT</strong><br><img src="https://qiniucdn.wayneshao.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-.NET-Core/20190220124242947.png" alt></p><h2 id="UseKestrel-或者-ConfigureKestrel"><a href="#UseKestrel-或者-ConfigureKestrel" class="headerlink" title="UseKestrel 或者 ConfigureKestrel"></a>UseKestrel 或者 ConfigureKestrel</h2><p>使用 <strong>IWebHostBuilder</strong> 的扩展方法 UseKestrel() 可以更精确的设置 Kestrel 的更多配置信息 ，在 .NET Core 2.1 版本以上也可以为 ConfigureKestrel()。</p><p><strong>CODE</strong></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .UseUrls(<span class="string">"http://localhost:4411"</span>,<span class="string">"https://localhost:4412"</span>,<span class="string">"http://0.0.0.0:4413;https://localhost:4414"</span>)</span><br><span class="line">        .UseStartup&lt;Startup&gt;()</span><br><span class="line">        .UseKestrel((context, options) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.Listen(IPAddress.Any, <span class="number">5620</span>);</span><br><span class="line">            options.Listen(IPAddress.Loopback, <span class="number">5588</span>, listenOptions =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                listenOptions.UseHttps();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>RESULT</strong><br><img src="https://qiniucdn.wayneshao.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-.NET-Core/20190220121433663.png" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　以上几种方法就是我根据官方文档整理的修改 Kestrel 端口的方法，实测优先级由上到下依次增高，使用优先级更高的方式可以覆盖掉优先级低的方式。<br>　　综上，需要测试 Consul 服务治理时，更合适的方式是使用命令行 –urls 方式.</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Kestrel</tag>
        <tag>端口修改</tag>
        <tag>终结点配置</tag>
        <tag>Endpoint</tag>
      </tags>
  </entry>
  <entry>
    <title>如何判定一个类型支不支持 await 异步等待(代码)</title>
    <url>/posts/8777.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近由于一些业务上的需求,需要在 OnActionExcutionAsync 和 OnActionExcuted 中判断当前请求的接口是否是异步的接口，刚好前几天看过<span class="exturl" data-url="aHR0cHM6Ly93YWx0ZXJsdi5jb20=" title="https://walterlv.com">吕毅大佬<i class="fa fa-external-link"></i></span>的文章《<span class="exturl" data-url="aHR0cHM6Ly93YWx0ZXJsdi5jb20vcG9zdC93aGF0LWlzLWFuLWF3YWl0ZXIuaHRtbA==" title="https://walterlv.com/post/what-is-an-awaiter.html">.NET 中什么样的类是可使用 await 异步等待的？<i class="fa fa-external-link"></i></span>》，遂封装实现一下判断类型是否为可等待类型的方法。</p><a id="more"></a><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><blockquote><p>总结起来，要想使一个方法可被 <code>await</code> 等待，必须具备以下条件：</p></blockquote><ol><li>这个方法返回一个类 A 的实例，这个类 A 必须满足后面的条件。</li><li>此类 A 有一个可被访问到的 <code>GetAwaiter</code> 方法（扩展方法也行，这算是黑科技吗？），方法返回类 B 的实例，这个类 B 必须满足后面的条件；</li><li>此类 B 实现 <code>INotifyCompletion</code> 接口，且拥有 <code>bool IsCompleted { get; }</code>属性、<code>GetResult()</code> 方法、<code>void OnCompleted(Action continuation)</code>方法。</li></ol><p>第三点中，<code>OnCompleted</code>方法本身就是 <code>INotifyCompletion</code> 接口要求实现的，所以只需要校验前三点即可。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>按照要求封装以下扩展方法：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReflectionExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsAsyncType</span>(<span class="params"><span class="keyword">this</span> Type type</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> awaiter = type.GetMethod(<span class="string">"GetAwaiter"</span>);</span><br><span class="line">            <span class="keyword">if</span> (awaiter == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> retType = awaiter.ReturnType;</span><br><span class="line">            <span class="comment">//.NET Core 1.1及以下版本中没有 GetInterface 方法，为了兼容性使用 GetInterfaces</span></span><br><span class="line">            <span class="keyword">if</span> (retType.GetInterfaces().All(i =&gt; i.Name != <span class="string">"INotifyCompletion"</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (retType.GetProperty(<span class="string">"IsCompleted"</span>) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (retType.GetMethod(<span class="string">"GetResult"</span>) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借用大佬博客中的测试类：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">typeof</span>(Test).IsAsyncType());</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Test2 <span class="title">GetAwaiter</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test2</span> : <span class="title">INotifyCompletion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsCompleted &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetResult</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/%E5%A6%82%E4%BD%95%E5%88%A4%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E6%94%AF%E4%B8%8D%E6%94%AF%E6%8C%81%E5%BC%82%E6%AD%A5/20190320032022556.png" alt></p><h2 id="在-OnActionExcutionAsync-和-OnActionExcuted-中的使用"><a href="#在-OnActionExcutionAsync-和-OnActionExcuted-中的使用" class="headerlink" title="在 OnActionExcutionAsync 和 OnActionExcuted 中的使用"></a>在 <code>OnActionExcutionAsync</code> 和 <code>OnActionExcuted</code> 中的使用</h2><p>在 <code>OnActionExcutionAsync</code> 和 <code>OnActionExcuted</code> 中使用时，可以再封装一层扩展方法，方便直接使用事件中的上下文实例调用。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsAsyncAction</span>(<span class="params"><span class="keyword">this</span> FilterContext context</span>) </span></span><br><span class="line"><span class="function"></span>    =&gt; ((ControllerActionDescriptor) context.ActionDescriptor).MethodInfo.ReturnType.IsAsyncType();</span><br></pre></td></tr></table></figure><p>调用方式：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context.IsAsyncAction())</span><br><span class="line">        Console.WriteLine(<span class="string">"Current action is support async."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context.IsAsyncAction())</span><br><span class="line">        Console.WriteLine(<span class="string">"Current action is support async."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">OnActionExecutionAsync</span>(<span class="params">ActionExecutingContext context, ActionExecutionDelegate next</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context.IsAsyncAction())</span><br><span class="line">        Console.WriteLine(<span class="string">"Current action is support async."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">base</span>.OnActionExecutionAsync(context, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上↑</strong></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>反射</tag>
        <tag>.NET</tag>
        <tag>await</tag>
        <tag>异步等待</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在IIS中托管.NET Core应用</title>
    <url>/posts/19877.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Asp.NET Core 应用如果需要托管在IIS下，需要为IIS<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9uZXQvZG93bmxvYWQvYWxs" title="https://www.microsoft.com/net/download/all">下载<i class="fa fa-external-link"></i></span>安装 AspNetCoreModule 模块。</p><a id="more"></a><p>下面以最新的.NET Core Runtime 2.1.0-preview1版本为例：</p><h2 id="安装-Server-Hosting-Installer"><a href="#安装-Server-Hosting-Installer" class="headerlink" title="安装 Server Hosting Installer"></a>安装 Server Hosting Installer</h2><p>首先访问微软的<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9uZXQvZG93bmxvYWQvYWxs" title="https://www.microsoft.com/net/download/all">.Net下载中心<i class="fa fa-external-link"></i></span><br>，并找到我们要下载的版本。<br><img src="https://qiniucdn.wayneshao.com/20180305013606660/20180305014343191.png" alt><br>点击进入详情页后，找到 Windows 分类下的 <strong>Server Hosting Installer</strong> 链接，并点击下载<br><img src="https://qiniucdn.wayneshao.com/20180305013606660/20180305014516178.png" alt><br>下载安装完成以后即可在IIS的模块中找到托管.NET Core 应用所需的 AspNetCoreModule 模块。<br><img src="https://qiniucdn.wayneshao.com/20180305013606660/20180305014647982.png" alt></p><h2 id="发布程序"><a href="#发布程序" class="headerlink" title="发布程序"></a>发布程序</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet publish -o D:\Web\aspnetcoredemo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误</title>
    <url>/posts/35658.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近DotNetCore更新到了1.0.1，Azure tools也更新到了2.9.5，尝试更新时发现，DotNetCore更新失败，提示：0x80072f8a未指定的错误，而Azure Tools中也包含了DotNetCore的更新，0x80072f8a问题，导致两个软件都不能成功地完成更新。</p><p>研究安装的错误日志后才发现，原来使因为证书过期导致的无法下载微软在线资源，所以无法成功安装，解决证书问题之后就顺利的成功安装啦！</p><a id="more"></a><p>和大家分享一下解决的方法：</p><h3 id="方案一，修改IE选项，取消选项-“检查服务器证书是否已吊销”"><a href="#方案一，修改IE选项，取消选项-“检查服务器证书是否已吊销”" class="headerlink" title="方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”"></a>方案一，修改IE选项，取消选项 “检查服务器证书是否已吊销”</h3><p><img src="https://qiniucdn.wayneshao.com/20180218224858/20180218104959569.png" alt></p><h3 id="方案二，修改时间到证书有效期内即可"><a href="#方案二，修改时间到证书有效期内即可" class="headerlink" title="方案二，修改时间到证书有效期内即可"></a>方案二，修改时间到证书有效期内即可</h3><p>具体证书有效期是什么范围我也不太清楚，不过经我测试直接把年修改为2015即可成功安装<br><img src="https://qiniucdn.wayneshao.com/20180218224858/20180218105022336.png" alt></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>软件心得</tag>
      </tags>
  </entry>
  <entry>
    <title>新手正式入驻博客园</title>
    <url>/posts/63944.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="本人是计算机专业大二狗一枚，目前在学习C-，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。"><a href="#本人是计算机专业大二狗一枚，目前在学习C-，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。" class="headerlink" title="本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。"></a>本人是计算机专业大二狗一枚，目前在学习C#，今天突发奇想，打算开一个博客，定期记录一些自己学习期间的心得，希望各位大牛能多多提点。</h3><p><img src="https://qiniucdn.wayneshao.com/20180218125523/20180218125653974.png" alt></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>MVP——最小可行化产品</title>
    <url>/posts/13416.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="最简可行产品："><a href="#最简可行产品：" class="headerlink" title="最简可行产品："></a>最简可行产品：</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFNiU5QyU4MCVFNyVCMCVBMSVFNSU4RiVBRiVFOCVBMSU4QyVFNyU5NCVBMiVFNSU5MyU4MQ==" title="https://zh.wikipedia.org/zh-cn/%E6%9C%80%E7%B0%A1%E5%8F%AF%E8%A1%8C%E7%94%A2%E5%93%81"><strong>最简可行产品</strong><i class="fa fa-external-link"></i></span>（<strong><em>minimum viable product</em></strong>，简称<strong>MVP</strong>）是<strong>新产品开发</strong>中的名词，是指有部分机能，恰好可以让设计者表达其<strong>核心设计概念</strong>的产品。<br>设计者可以进行<strong>验证式学习</strong>，根据使用者的<strong>回馈</strong>，进一步<strong>了解使用情形</strong>，并且<strong>继续开发</strong>此产品 。<br>由最简可行产品来搜集相关想法常常会比开发有更多机能的产品要<strong>便宜</strong>。开发更多机能产品的的费用较高，也会有产品失败的风险（例如产品基本假设有误的情形）。<br>最简可行产品一词是由<strong>法兰克·罗宾生</strong>（<strong><em>Frank Robinson</em></strong>）创建，因<strong>史蒂夫·布兰克</strong>及<strong>埃里克·莱斯</strong>的使用而流行。</p><blockquote><p><strong><em>“要贩售愿景及提供最简可行产品给有远见的人，不是给所有的人。”</em></strong><br>——<strong>史蒂夫·布兰克</strong></p></blockquote><a id="more"></a><p><strong>MVP具有以下三个特点：</strong></p><ol><li>是一种避免开发出客户并不真正需要的产品的开发策略。</li><li>快速地构建出符合产品预期功能的最小功能集合，通过迭代来完善。</li><li>是让开发团队用最小的代价实现一个产品，以此最大程度上了解和验证对用户问题的解决程度。</li></ol><h2 id="设计技巧"><a href="#设计技巧" class="headerlink" title="设计技巧"></a>设计技巧</h2><ol><li>定位一致，满足<strong>核心需求</strong></li><li>体现<strong>核心竞争力/亮点</strong><br>只做核心功能（人无我有，人有我精）<br>快速试验亮点功能并获得第一批用户<br>例：支付宝初期核心功能为支付和担保交易</li><li><strong>成本尽可能低</strong><br>使用“轮子”，尽可能套用现有方案以快速实现</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>假设客户需要一辆汽车，我们应该使用什么样的流程完成骑车的开发呢？</strong></p><ol><li>传统软件开发流程中如上半部分图片的流程，我们会慢慢的将汽车的每一个部件按顺序制造出来，最终得到整个骑车。</li><li>MVP最小可行化产品设计流程中，我们应该意识到，客户需要一辆汽车的本质其实是需要一个出行工具，应该用最小的可以满足客户需求的方式实现用户出行的需求，然后再不断对工具进行迭代，最终得到一辆汽车。</li></ol><p>图示如下：</p><p><img src="https://qiniucdn.wayneshao.com/20181029225554434/20181030120041552.png" alt></p><p>最小可行化，即，不断获取可行化与最小化交集：<br><img src="https://qiniucdn.wayneshao.com/20181029225554434/20181030121542129.png" alt></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>避免粗糙</strong>造成印象分扣减（注重MVP的体验，而不只是功能）</li><li><strong>避免切分范围太小</strong>达不到验证效果（需要完整的表达出需求）</li><li>保持<strong>与主要定位一致</strong>避免影响核心理念（体现出正确的价值）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>以用户问题为中心，而不是以解决方案为中心。</li><li>首先着眼于基本的客户需求，通过客户反馈，逐步修正产品设计和实现。</li><li>在各个迭代过程中，做出来的产品始终是可为客户所用的产品。</li></ol><p><img src="https://qiniucdn.wayneshao.com/20181029225554434/20181030121949833.png" alt></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>产品</tag>
        <tag>MVP</tag>
        <tag>最小可行化</tag>
        <tag>最简可行</tag>
      </tags>
  </entry>
  <entry>
    <title>查看当前IP和归属地的方法</title>
    <url>/posts/2316.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>可以通过http协议进行get请求来获得当前IP及归属地信息。</p><a id="more"></a><h2 id="IPV4"><a href="#IPV4" class="headerlink" title="IPV4"></a>IPV4</h2><h3 id="ip138"><a href="#ip138" class="headerlink" title="ip138"></a><span class="exturl" data-url="aHR0cHM6Ly8yMDIxLmlwMTM4LmNvbQ==" title="https://2021.ip138.com">ip138<i class="fa fa-external-link"></i></span></h3><p>Xpath获取文字信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//center</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/20180219214549906/20180219095338344.png" alt></p><h3 id="whatismyip"><a href="#whatismyip" class="headerlink" title="whatismyip"></a><span class="exturl" data-url="aHR0cDovL3d3dy53aGF0aXNteWlwLmNvbS50dy8=" title="http://www.whatismyip.com.tw/">whatismyip<i class="fa fa-external-link"></i></span></h3><p>Xpath获取信息:</p><ol><li><p>IP地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//body/span[1]</span><br></pre></td></tr></table></figure></li><li><p>来源地区</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//body/span[2]</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://qiniucdn.wayneshao.com/20180219214549906/20180219095925145.png" alt></p><h3 id="3322"><a href="#3322" class="headerlink" title="3322"></a><span class="exturl" data-url="aHR0cDovL21lbWJlcnMuMzMyMi5vcmcvZHluZG5zL2dldGlw" title="http://members.3322.org/dyndns/getip">3322<i class="fa fa-external-link"></i></span></h3><p>直接访问域名会跳转到pubyun（公云）服务商，推测可能是该云的用户搭建的服务。</p><h3 id="ZX"><a href="#ZX" class="headerlink" title="ZX"></a><span class="exturl" data-url="aHR0cDovL2lwLnp4aW5jLm9yZy9nZXRpcA==" title="http://ip.zxinc.org/getip">ZX<i class="fa fa-external-link"></i></span></h3><p>访问内容为ZX的个人网站，提供各种行政区划等数据，根据内容分析，站长可能是复旦的学生或者校友。</p><h3 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h3><p>前二者网页大小差不多，均为300+KB。ip138 为国内服务商，对国内IP地址可以精确到市级，并且会包含运营商信息，不过信息包含在一个标签中，需要获取之后自行截取。whatismyip 为台湾网站，只能精确到国家，但是比较方便的是IP地址和来源是包含在两个标签中的，获取更为方便，新增加的3322和ZX返回的内容直接就是IP地址且服务器在国内，速度也很快，最推荐使用。</p><h2 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h2><h3 id="ZX-1"><a href="#ZX-1" class="headerlink" title="ZX)"></a><span class="exturl" data-url="aHR0cDovL3Y2LmlwLnp4aW5jLm9yZy9nZXRpcA==" title="http://v6.ip.zxinc.org/getip">ZX<i class="fa fa-external-link"></i></span>)</h3><p>同样是ZX个人网站提供的服务。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>软件心得</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化InnoSetup依赖项安装</title>
    <url>/posts/24425.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>原文在这里:<span class="exturl" data-url="aHR0cDovL3d3dy5jb2RlcHJvamVjdC5jb20vQXJ0aWNsZXMvMjA4NjgvTkVULUZyYW1ld29yay1JbnN0YWxsZXItZm9yLUlubm9TZXR1cA==" title="http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup">http://www.codeproject.com/Articles/20868/NET-Framework-Installer-for-InnoSetup<i class="fa fa-external-link"></i></span></p><p>源文件地址:<span class="exturl" data-url="aHR0cDovL3d3dy5jb2RlcHJvamVjdC5jb20vS0IvaW5zdGFsbC9kb3RuZXRmeF9pbm5vc2V0dXBfaW5zdGFsL2lubm9kZXBlbmRlbmN5aW5zdGFsbGVyLnppcA==" title="http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip">http://www.codeproject.com/KB/install/dotnetfx_innosetup_instal/innodependencyinstaller.zip<i class="fa fa-external-link"></i></span></p><p>源文件需要注册登录CodeProject才能下载</p><a id="more"></a><p><img src="https://qiniucdn.wayneshao.com/20180218232333/20180218112438669.png" alt><br><img src="https://qiniucdn.wayneshao.com/20180218232333/20180218112442373.png" alt></p><p><strong>说明:<br>通过添加模块化innosetup脚本来自动下载和安装各种依赖项 如.NET Framework 、VC++运行环境等。</strong></p><p>源代码是模块化的，结构如下：<br><img src="https://qiniucdn.wayneshao.com/20180218232333/20180218112524045.png" alt></p><ul><li><p>setup.iss - 包含基本设置，其中包含所需的模块（产品）。<br>你需要把所需的模块在顶部使用#include命令包含在源代码中,例如：<br>#include “scripts\products\dotnetfx11.iss”<br>然后你只需要在[Code]段调用它们的main函数,如：<br>dotnetfx11();</p></li><li><p>bin - 包含安装程序的最终输出</p></li><li><p>src - 包含您的程序的应用程序文件</p></li><li><p>scripts</p><ul><li>products.iss - 包含产品脚本的共享代码。 您只需要更改[CustomMessages]部分和[Files]部分（包括isxdl语言文件）</li><li>isxdl - 包含用于设置（如果有要下载的内容）及其语言文件（例如german.ini）的下载器DLL。 这是您可以放置​​isxdldownloader的语言文件的地方。</li><li>products - 包含应用程序所需的产品的脚本（例如.NET Framework 2.0）<ul><li>dotnetfx11.iss - .NET Framework 1.1</li><li>dotnetfx11lp.iss - .NET Framework 1.1 Language Pack</li><li>dotnetfx11sp1.iss - .NET Framework 1.1 + Service Pack 1</li><li>dotnetfx20.iss - .NET Framework 2.0</li><li>dotnetfx20lp.iss - .NET Framework 2.0 Language Pack</li><li>dotnetfx20sp1.iss - .NET Framework 2.0 + Service Pack 1</li><li>dotnetfx20sp1lp.iss - .NET Framework 2.0 Service Pack 1 Language Pack</li><li>dotnetfx20sp2.iss - .NET Framework 2.0 + Service Pack 2</li><li>dotnetfx20sp2lp.iss - .NET Framework 2.0 Service Pack 2 Language Pack</li><li>dotnetfx35.iss - .NET Framework 3.5</li><li>dotnetfx35lp.iss - .NET Framework 3.5 Language Pack</li><li>dotnetfx35sp1.iss - .NET Framework 3.5 + Service Pack 1</li><li>dotnetfx35sp1lp.iss - .NET Framework 3.5 Service Pack 1 Language Pack</li><li>dotnetfx40client.iss - .NET Framework 4.0 Client Profile</li><li>dotnetfx40full.iss - .NET Framework 4.0 Full</li><li>dotnetfx46.iss - .NET Framework 4.6</li><li>ie6.iss - Internet Explorer 6</li><li>iis.iss - Internet Information Services (just a check if it is installed)</li><li>jet4sp8.iss - Jet 4 + Service Pack 8</li><li>kb835732.iss - Security Update (KB835732) which is required by .NET Framework 2.0 Service Pack 1 on Windows 2000 Service Pack 4</li><li>mdac28.iss - Microsoft Data Access Components (MDAC) 2.8</li><li>msi20.iss - Windows Installer 2.0</li><li>msi31.iss - Windows Installer 3.1</li><li>msi45.iss - Windows Installer 4.5</li><li>sql2005express.iss - SQL Server 2005 Express + Service Pack 3</li><li>sql2008express.iss - SQL Server 2008 Express R2</li><li>sqlcompact35sp2.iss - SQL Server Compact 3.5 + Service Pack 2</li><li>vcredist2005.iss - Visual C++ 2005 Redistributable</li><li>vcredist2008.iss - Visual C++ 2008 Redistributable</li><li>vcredist2010.iss - Visual C++ 2010 Redistributable</li><li>vcredist2012.iss - Visual C++ 2012 Redistributable</li><li>vcredist2013.iss - Visual C++ 2013 Redistributable</li><li>vcredist2015.iss - Visual C++ 2015 Redistributable</li><li>wic.iss - Windows Imaging Component</li><li>winversion.iss - helper functions to determine the installed Windows version</li><li>fileversion.iss - helper functions to determine the version of a file</li><li>stringversion.iss - helper functions to correctly parse a version string</li><li>dotnetfxversion.iss - helper functions to determine the installed .NET Framework version including service packs</li><li>msiproduct.iss - helper functions to check for installed msi products</li></ul></li></ul></li></ul><p>你很可能需要调整setup.iss，以适应不同Windows版本所需的依赖项。</p><p>如果依赖项没有安装，安装过程会检查相关依赖项的安装文件是否存在于.\MyProgramDependencies.文件夹下。如果不存在那么程序将会自动下载。<br><img src="https://qiniucdn.wayneshao.com/20180218232333/20180218112911329.png" alt><br><img src="https://qiniucdn.wayneshao.com/20180218232333/20180218112917754.png" alt><br>用于脚本的应用程序包括：</p><ul><li><span class="exturl" data-url="aHR0cDovL3d3dy5qcnNvZnR3YXJlLm9yZy9pc2luZm8ucGhw" title="http://www.jrsoftware.org/isinfo.php">Inno Setup<i class="fa fa-external-link"></i></span> - (版本5.5.5)</li><li><span class="exturl" data-url="aHR0cDovL3d3dy5pc3Rvb2wub3JnL2RlZmF1bHQuYXNweA==" title="http://www.istool.org/default.aspx">ISTool<i class="fa fa-external-link"></i></span> - Inno Setup的扩展组件。但是我只需要 isxdl.dll downloader (版本5.3.0)</li></ul>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>InnoSetup</tag>
        <tag>安装包</tag>
      </tags>
  </entry>
  <entry>
    <title>汇总一下 Visual Studio 各个版本的 Key</title>
    <url>/posts/28460.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>方便日后查用，汇总一下 Visual Studio 各个版本的 Key。如果侵犯了您或您公司的权益，请<span class="exturl" data-url="bWFpbHRvOi8vb3duZXJAd2F5bmVzaGFvLmNvbQ==" title="mailto://owner@wayneshao.com">联系我<i class="fa fa-external-link"></i></span>删除。</p><a id="more"></a><h2 id="Visual-Studio-2019"><a href="#Visual-Studio-2019" class="headerlink" title="Visual Studio 2019"></a>Visual Studio 2019</h2><p>Visual Studio 2019 Enterprise:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</span><br></pre></td></tr></table></figure><p>Visual Studio 2019 Professional:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-2017"><a href="#Visual-Studio-2017" class="headerlink" title="Visual Studio 2017"></a>Visual Studio 2017</h2><p>Visual Studio 2017 Professional:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KBJFW-NXHK6-W4WJM-CRMQB-G3CDH</span><br><span class="line">HMGNV-WCYXV-X7G9W-YCX63-B98R2</span><br><span class="line">HFDVM-KS3K9-OKYN1-N1ZS7-PVSQ8</span><br><span class="line">96OLO-CXFRC-16CKR-Y1933-04MX6</span><br><span class="line">7VMX9-TI69C-NXRG0-S4T89-9ABS4</span><br><span class="line">70I9S-MIZ6L-RPH8Q-Q9C70-XQPRT</span><br></pre></td></tr></table></figure><p>Visual Studio 2017 Enterprise:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NJVYC-BMHX2-G77MM-4XJMR-6Q8QF</span><br><span class="line">IOX0M-LAVBL-FPHQY-N0ROK-9K3MD</span><br><span class="line">4SB42-1Q0ZT-CMBDT-TN2XI-FIET1</span><br><span class="line">7Z16L-372ES-M15YD-O8QM7-V6C25</span><br><span class="line">EBVI7-26CXQ-3CQD4-ZS3IR-6Q3K5</span><br><span class="line">7BHBQ-3NNHM-I4ROB-R7L02-ZOSFM</span><br></pre></td></tr></table></figure><p>Visual Studio 2017 Enterprise:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NJVYC-BMHX2-G77MM-4XJMR-6Q8QF</span><br><span class="line">CXP3Q-XKCIN-GXDTX-O369X-ALFPK</span><br><span class="line">AF7CS-PO8AZ-YL4GI-C95BV-9QXCN</span><br><span class="line">643OA-ACK9A-8N2NH-6YB8R-1OM0X</span><br><span class="line">328DP-Y1I77-DXNCM-L3XVT-7M89B</span><br><span class="line">BNZLP-XK60H-MT0SG-2L790-Q87Z7</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-2015"><a href="#Visual-Studio-2015" class="headerlink" title="Visual Studio 2015"></a>Visual Studio 2015</h2><p>Visual Studio 2015 Enterprise:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2XNFG-KFHR8-QV3CP-3W6HT-683CH</span><br></pre></td></tr></table></figure><p>Visual Studio 2015 Professional:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMGNV-WCYXV-X7G9W-YCX63-B98R2</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-2013"><a href="#Visual-Studio-2013" class="headerlink" title="Visual Studio 2013"></a>Visual Studio 2013</h2><p>Visual Studio 2013 Ultimate:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BWG7X-J98B3-W34RT-33B3R-JVYW9</span><br><span class="line">87DQC-G8CYR-CRPJ4-QX9K8-RFV2B</span><br></pre></td></tr></table></figure><p>Visual Studio 2013 Team Foundation Server:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6T3MC-YX8XF-7CWXW-462TQ-8G2B4</span><br></pre></td></tr></table></figure><p>Visual Studio 2013 Premium:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FBJVC-3CMTX-D8DVP-RTQCT-92494</span><br></pre></td></tr></table></figure><p>Visual Studio 2013 Professional:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KCQWK-Q43V3-M3F2T-83VGV-Y6VTX</span><br></pre></td></tr></table></figure><p>Visual Studio 2013 Test Professional:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TTDB9-9YPYH-7FBVY-X2CTQ-D8F2H</span><br></pre></td></tr></table></figure><p>Visual Studio 2013 Premium &amp; Express:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P27TG-XXX2W-XK8TK-QD9FK-V36W4</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-2012"><a href="#Visual-Studio-2012" class="headerlink" title="Visual Studio 2012"></a>Visual Studio 2012</h2><p>Visual Studio 2012 Ultimate:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RBCXF-CVBGR-382MK-DFHJ4-C69G8</span><br></pre></td></tr></table></figure><p>Visual Studio 2012 Professional:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4D974-9QX42-9Y43G-YJ7JG-JDYBP</span><br></pre></td></tr></table></figure><p>Visual Studio 2012 Premium:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MH2FR-BC9R2-84433-47M63-KQVWC</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-2010"><a href="#Visual-Studio-2010" class="headerlink" title="Visual Studio 2010"></a>Visual Studio 2010</h2><p>Visual Studio 2010 Ultimate:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YCFHQ-9DWCY-DKV88-T2TMH-G7BHP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>闹着玩儿</category>
      </categories>
      <tags>
        <tag>VS</tag>
        <tag>VisualStudio</tag>
        <tag>Key</tag>
      </tags>
  </entry>
  <entry>
    <title>用户无感知更新</title>
    <url>/posts/9411.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>公司目前的整个CI体系都是使用了GitLab的全家桶，基本已经趋于完善，目前最大的问题是每次发版都需要停机处理，用户感知明显，所以多数时候发版的时间都集中在晚上十点以后，故而决定设法解决这个问题。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>目前整套服务里，部分环境单体，部分环境负载均衡，均使用原生部署，K8S的滚动更新可以解决这个问题，但是目前的状况和K8S无疑还有很大的距离，负载均衡环境中可以一台台逐步更新，但因为实际情况中还涉及到了单体的情况，所以思路就分成了两条：</p><ol><li>所有的服务都采用负载均衡部署，即使是只有单个API服务，单个API服务在发版时，启动一个新的API服务并加入负载，健康检查合格后，杀死旧的API进程，让服务无痕切换。多个API服务跟以上类似，只不过无需杀死服务，而可以直接将待操作服务的负载全部转到其他服务，直接停掉待操作服务操作。</li><li>保持原有整个架构不变，但是在原本的 负载均衡/反向代理 和 API服务 中间加一层端口转发，端口转发服务监听和 负载均衡/反向代理 交互的 端口，API服务采用不固定端口模式，在启用且健康检查合格后才通知端口转发服务将通讯端口转发到新服务的端口上。<br>基于现有情况考虑，决定采用第二种思路，为了保证统一性，端口转发依然采用nginx。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>整理整个过程为：<br>获取随机可用端口 -&gt; 使用端口启动服务 -&gt; 健康检查 -&gt; 切换端口</p><h3 id="获取随机可用端口"><a href="#获取随机可用端口" class="headerlink" title="获取随机可用端口"></a>获取随机可用端口</h3><p>这里我是用Shell脚本做了对应的处理，具体脚本如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># portRange="80-81" 	# 可用于读取配置文件</span></span><br><span class="line"><span class="comment"># rangeStart=$(echo $&#123;portRange&#125; | awk -F '-' '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># rangeEnd=$(echo $&#123;portRange&#125; | awk -F '-' '&#123;print $2&#125;')</span></span><br><span class="line"></span><br><span class="line">rangeStart=<span class="variable">$1</span></span><br><span class="line">rangeEnd=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -le <span class="variable">$2</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"123"</span> &gt;/dev/null</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"error: please check port range"</span></span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">PORT=0</span><br><span class="line"><span class="comment"># 判断当前端口是否被占用，没被占用返回0，反之1</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Listening</span></span>() &#123;</span><br><span class="line">	TCPListeningnum=$(netstat -an | grep <span class="string">":<span class="variable">$1</span> "</span> | awk <span class="string">'$1 == "tcp" &amp;&amp; $NF == "LISTEN" &#123;print $0&#125;'</span> | wc -l)</span><br><span class="line">	UDPListeningnum=$(netstat -an | grep <span class="string">":<span class="variable">$1</span> "</span> | awk <span class="string">'$1 == "udp" &amp;&amp; $NF == "0.0.0.0:*" &#123;print $0&#125;'</span> | wc -l)</span><br><span class="line">	((Listeningnum = TCPListeningnum + UDPListeningnum))</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$Listeningnum</span> == 0 ]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"0"</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"1"</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定区间随机数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">random_range</span></span>() &#123;</span><br><span class="line">	shuf -i <span class="variable">$1</span>-<span class="variable">$2</span> -n1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到随机端口</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_random_port</span></span>() &#123;</span><br><span class="line">	templ=0</span><br><span class="line">	<span class="keyword">while</span> [ <span class="variable">$PORT</span> == 0 ]; <span class="keyword">do</span></span><br><span class="line">		temp1=$(random_range <span class="variable">$1</span> <span class="variable">$2</span>)</span><br><span class="line">		<span class="keyword">if</span> [ $(Listening <span class="variable">$temp1</span>) == 0 ]; <span class="keyword">then</span></span><br><span class="line">			PORT=<span class="variable">$temp1</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$PORT</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line">get_random_port <span class="variable">$&#123;rangeStart&#125;</span> <span class="variable">$&#123;rangeEnd&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：依赖了指令netstat，需要安装对应的包</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">apt install -y net-tools</span><br><span class="line"><span class="comment"># CentOS/Redhat</span></span><br><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure><p>调用逻辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> AVAILABLE_PORT=$(/opt/script/check/available_port.sh 8000 9000)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$AVAILABLE_PORT</span></span><br></pre></td></tr></table></figure><h2 id="使用对应端口启动服务"><a href="#使用对应端口启动服务" class="headerlink" title="使用对应端口启动服务"></a>使用对应端口启动服务</h2><p>因为已经使用了PM2作为 Daemon ，所以无法使用启动参数的形式以命令行把口传给服务了，有些服务器上不止放了一个服务，故而全局环境变量的思路也可能不行，最终选择了使用Shell命令修改配置文件中的绑定地址</p><p>此处用到了健康检查的脚本 api_health_check.sh ，具体实现如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">url=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义函数check_http：</span></span><br><span class="line"><span class="comment">#使用curl命令检查http服务器的状态</span></span><br><span class="line"><span class="comment">#-m设置curl不管访问成功或失败，最大消耗的时间为5秒，5秒连接服务为相应则视为无法连接</span></span><br><span class="line"><span class="comment">#-s设置静默连接，不显示连接时的连接速度、时间消耗等信息</span></span><br><span class="line"><span class="comment">#-o将curl下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)</span></span><br><span class="line"><span class="comment">#-w设置curl命令需要显示的内容%&#123;http_code&#125;，指定curl返回服务器的状态码</span></span><br><span class="line"><span class="function"><span class="title">check_http</span></span>()&#123;</span><br><span class="line">    status_code=$(curl -m 5 -s -o /dev/null -w %&#123;http_code&#125; <span class="variable">$url</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> varible1 <span class="keyword">in</span> &#123;1..25&#125;</span><br><span class="line"><span class="comment">#for varible1 in 1 2 3 4 5</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     check_http</span><br><span class="line">       date=$(date +%Y%m%d-%H:%M:%S) </span><br><span class="line">        <span class="comment">#生成报警邮件的内容</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"当前时间为:<span class="variable">$date</span></span></span><br><span class="line"><span class="string">       <span class="variable">$url</span>服务器异常,状态码为<span class="variable">$&#123;status_code&#125;</span>.</span></span><br><span class="line"><span class="string">       请尽快排查异常."</span> &gt; /tmp/http$$.pid</span><br><span class="line">        <span class="comment">#指定测试服务器状态的函数，并根据返回码决定是发送邮件报警还是将正常信息写入日志</span></span><br><span class="line">       <span class="keyword">if</span> [ <span class="variable">$status_code</span> -ne 200 ];<span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$&#123;varible1&#125;</span> -lt 20 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> 1</span><br><span class="line">                sleep 1</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$varible1</span></span><br><span class="line">                sleep <span class="variable">$varible1</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$url</span>连接正常"</span></span><br><span class="line">            <span class="built_in">exit</span> 0</span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取版本 自增版本号</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"/opt/rolling-update/ShortUrl.current"</span> ]; <span class="keyword">then</span> <span class="built_in">echo</span> 0 &gt; /opt/rolling-update/ShortUrl.current; <span class="built_in">export</span> CURRENT_VERSION=A; <span class="built_in">export</span> NEXT_VERSION=0; <span class="keyword">else</span> <span class="built_in">export</span> CURRENT_VERSION=$(cat /opt/rolling-update/ShortUrl.current); (<span class="built_in">echo</span> <span class="variable">$CURRENT_VERSION</span>| awk <span class="string">'&#123;print (int($0)+1)%5&#125;'</span>)  &gt; /opt/rolling-update/ShortUrl.current; <span class="built_in">export</span> NEXT_VERSION=$(cat /opt/rolling-update/ShortUrl.current); <span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 新建新版本文件夹</span></span><br><span class="line">mkdir ~/ShortUrl<span class="variable">$NEXT_VERSION</span></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">dotnet publish -c Release --output bin/publish</span><br><span class="line"><span class="built_in">cd</span> bin/publish</span><br><span class="line">zip -r <span class="variable">$COMMIT_TIME_STR</span>.zip ./</span><br><span class="line"><span class="comment"># PUSH文件</span></span><br><span class="line">lftp sftp://<span class="variable">$DEV_URL</span> -e <span class="string">"user <span class="variable">$PUB_USER</span> <span class="variable">$DEV_PASS</span>; cd /~/ShortUrl<span class="variable">$NEXT_VERSION</span>; put <span class="variable">$COMMIT_TIME_STR</span>.zip; bye"</span></span><br><span class="line"><span class="comment"># 替换配置文件中的端口</span></span><br><span class="line"><span class="built_in">cd</span> ~/ShortUrl<span class="variable">$NEXT_VERSION</span></span><br><span class="line">sed -E <span class="string">"s|http[^\"^\']*:8750|http://*:<span class="variable">$AVAILABLE_PORT</span>|g"</span> appsettings.json -i.bak</span><br><span class="line"><span class="comment"># 启动 Daemon 监听</span></span><br><span class="line">pm2 start <span class="string">"dotnet ShortUrl.dll"</span> --name ShortUrl<span class="variable">$NEXT_VERSION</span> --env=&#123;<span class="string">"ASPNETCORE_ENVIRONMENT"</span>:<span class="string">"Development"</span>&#125;</span><br><span class="line"><span class="comment"># 健康检查</span></span><br><span class="line">/opt/script/check/api_health.sh http://127.0.0.1:<span class="variable">$AVAILABLE_PORT</span>/healthz</span><br><span class="line"><span class="comment"># 切换代理</span></span><br><span class="line">rm -Rf /etc/nginx/port_transfer/stm/short_url.stm;</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"upstream short-url&#123; server 127.0.0.1:<span class="variable">$AVAILABLE_PORT</span>; &#125;"</span> &gt;&gt; /etc/nginx/port_transfer/stm/short_url.stm;</span><br><span class="line">nginx -t;</span><br><span class="line">nginx -s reload;</span><br><span class="line"><span class="comment"># 等待时间</span></span><br><span class="line">sleep 5</span><br><span class="line"><span class="comment"># 杀死旧进程</span></span><br><span class="line">pm2 stop ShortUrl<span class="variable">$CURRENT_VERSION</span></span><br><span class="line">pm2 del ShortUrl<span class="variable">$CURRENT_VERSION</span></span><br><span class="line">pm2 save</span><br><span class="line"><span class="comment"># 清除旧版文件</span></span><br><span class="line">rm -Rf ~/ShortUrl<span class="variable">$CURRENT_VERSION</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>SRE</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>离职总结及未来一段时间的计划</title>
    <url>/posts/12390.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>2019 年 9 月 20 日 15 时 58 分，我签下了离职证明和放行条，为我在广州多益网络股份有限公司 530 天的工作画上了句号。</p><a id="more"></a><h2 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h2><p>说实话，到现在我自己都还没有想清楚离职的准确原因，<br>或许是因为察觉到自己在过去一年的反复又繁复的业务中并没有很大的长进却又不得不囿于加班文化，也没有足够的自学时间，<br>或许是因为明明意识到系统架构的系统性问题，整体结构很需要重新划分，模块需要使用更合适的技术重构，却又在各种急促繁复的需求压迫下不得不无限妥协的无奈，<br>或许是因为今年年中连续几个月平均加班到十一点的加班，<br>或许是因为我和身边同事相比缩水一半的工资，<br>也或许是前半年我跟领导提出了工资倒挂的情况希望能调整工资，却在几个月后，已经处于离职的边缘时才告诉我保证留下来才可以加薪，</p><p>总之，我在听到加薪消息的隔天（2019 年 8 月 21 日 17 时 58 分）按下了辞职信的发送键，为这场旅途画下了句号。</p><p>回顾过去的一年半，非常感谢廖总和蔡总能给我机会，让我这个后端门外汉以1.5年经验（实习一年 + 工作半年）的流媒体开发攻城师菜鸟的身份成功入职多益网络信息技术中心的 Web 后端开发一职，在多益的一年半里，我从一个后端菜鸟成功晋级为一个熟练码农，从原本一手全包的开发模式晋升到了前后端分离的团队开发模式，又从一个只管实现需求的人偶码农晋升为了能推敲需求，和策划为了我认为不合理的需求吵得脸红脖子粗的主程序员。</p><p>我负责公司内部培训系统 “多益大学” 的后端开发工作，前半段和组里的同事一起完成了系统几个大模块的重构和新模块的开发，并于今年开始成功进一步接手多益大学全部后端工作后主导系统的开发，而后完成了统一考试、训练营重构、职级晋升等模块的开发，在职级晋升模块成功上限使用之后提出了离职，经历了半个月的继续开发之后交接离开。</p><p>总结这段经历，总体来讲还是觉得受益匪浅，当初因为喜欢后端开发，喜欢比较新的技术，遂从上家公司的“流媒体/Windows桌面开发”岗位辞职，转而从事后端开发。说实话当时面试表现得确实比较差，非常感谢面试官能给我这个机会，也非常欣喜能在公司学习并实践喜欢的技术，总结离开的原因，同样也是因为较长的工作时间下没有足够的时间学习新的技术，急促反复的需求下也没有空间实践新的技能，我对此非常遗憾，但是也并不会感到后悔。</p><h2 id="接下来的计划"><a href="#接下来的计划" class="headerlink" title="接下来的计划"></a>接下来的计划</h2><p>接下来我打算先修整一段时间，预计 1-2 个月，然后对已有技能进行整合，结合就业市场需求的方向对一些新技术进行学习实践，经过深思熟虑之后再寻找新的就业机会。</p><ol><li>技能<ul><li>微服务</li><li>读完《CLR via C#》、《C# 7.0 本质论》</li><li>参与 NCC 的开源项目</li></ul></li><li>习惯<ul><li>按时进行睡眠洗漱等习惯的养成</li><li>指定奖惩规则，记录执行情况</li></ul></li><li>减肥<ul><li>控制脂肪、糖类的摄入</li><li>记录每天摄入的卡路里</li><li>自己做减肥餐吃</li><li>每天完成一定时长的健身</li></ul></li><li>理财<ul><li>记账</li><li>理论学习</li></ul></li><li>读书<ul><li>列书单，记录读书情况</li><li>大约保持每天半小时到一小时的阅读时长</li></ul></li></ol>]]></content>
      <categories>
        <category>偶有所得</category>
      </categories>
      <tags>
        <tag>离职总结</tag>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>编写高质量C#程序的建议（6-10）</title>
    <url>/posts/2345.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="#建议六：区别-readonly-和-const-的区别">建议六：区别 readonly 和 const 的区别</a><br><a href="#建议七：将-0-作为枚举的默认值">建议七：将 0 作为枚举的默认值</a><br><a href="#建议八：避免给枚举类型的元素提供显式的值">建议八：避免给枚举类型的元素提供显式的值</a><br><a href="#建议九：习惯重载运算符">建议九：习惯重载运算符</a><br><a href="#建议十：创建对象时需要考虑是否实现比较器">建议十：创建对象时需要考虑是否实现比较器</a></p><a id="more"></a><h2 id="建议六：区别-readonly-和-const-的区别"><a href="#建议六：区别-readonly-和-const-的区别" class="headerlink" title="建议六：区别 readonly 和 const 的区别"></a>建议六：区别 readonly 和 const 的区别</h2><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const 是一个编译期常亮，用使用 const 的理由只有一个，那就是效率。const只能修饰基元类型、枚举类型或字符串类型。经过编译器编译后，我们在代码中引用 const 变量的地方会用 const 变量 所对应的实际值来代替，如，以下两句 WriteLine 语句的 IL 代码是一致的：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ConstValue = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(ConstValue);</span><br><span class="line">Console.WriteLine(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>readonly 是运行时常量，修饰类型没有限制。readonly 常量的复制行为发生在运行时，它在运行时第一次被赋值后将不可改变。</p><ol><li>对于值类型，之本身不可改变。</li><li>对于引用类型，引用本身（指针）不可改变。</li></ol><h2 id="建议七：将-0-作为枚举的默认值"><a href="#建议七：将-0-作为枚举的默认值" class="headerlink" title="建议七：将 0 作为枚举的默认值"></a>建议七：将 0 作为枚举的默认值</h2><p>这里的主要原因是出于0作为默认值时所具有的工程上的意义。<br>原因参见以下代码：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week</span><br><span class="line">&#123;</span><br><span class="line">    Monday = <span class="number">1</span>,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday,</span><br><span class="line">    Sunday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> Week week;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(week);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出值会是超出枚举定义范围的 0。</p><h2 id="建议八：避免给枚举类型的元素提供显式的值"><a href="#建议八：避免给枚举类型的元素提供显式的值" class="headerlink" title="建议八：避免给枚举类型的元素提供显式的值"></a>建议八：避免给枚举类型的元素提供显式的值</h2><p>一般情况下，没有必要给枚举类型的元素提供显式的值。创建枚举的理由之一，就是为了代替使用实际的数值。不正确的为枚举类型设定显式的值，会带来意想不到的错误。</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week</span><br><span class="line">&#123;</span><br><span class="line">    Monday = <span class="number">1</span>,</span><br><span class="line">    Tuesday = <span class="number">2</span>,</span><br><span class="line">    TempValue，</span><br><span class="line">    Wednesday = <span class="number">3</span>,</span><br><span class="line">    Thursday = <span class="number">4</span>,</span><br><span class="line">    Friday = <span class="number">5</span>,</span><br><span class="line">    Saturday = <span class="number">6</span>,</span><br><span class="line">    Sunday = <span class="number">7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举中，未显式指定的值会自动等于上一个值 +1，所以在这个枚举类型 Week 中，TempValue 和 Wednesday 的值均为 3 ，这会在实际业务中带来毁灭性的问题。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Week week= Week.TempValue；</span><br><span class="line">Console.WriteLine(week);</span><br><span class="line">Console.WriteLine(week == Week.Wednesday);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Wednesday</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="建议九：习惯重载运算符"><a href="#建议九：习惯重载运算符" class="headerlink" title="建议九：习惯重载运算符"></a>建议九：习惯重载运算符</h2><p>如果业务意义上的加减乘除复制等运算，应该习惯于重载运算符，而不是使用普通方法。</p><h2 id="建议十：创建对象时需要考虑是否实现比较器"><a href="#建议十：创建对象时需要考虑是否实现比较器" class="headerlink" title="建议十：创建对象时需要考虑是否实现比较器"></a>建议十：创建对象时需要考虑是否实现比较器</h2><p>有对象的地方就会存在比较，在 .NET 的世界中也一样。创建类型时需要根据业务上的可能性，考虑为类型实现 ICompareable 接口。</p>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>高质量代码</tag>
      </tags>
  </entry>
  <entry>
    <title>编写高质量C#程序的建议（1-5）</title>
    <url>/posts/61676.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　最近开始阅读<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHVtaW5qaS8=" title="https://www.cnblogs.com/luminji/">陆敏技先生<i class="fa fa-external-link"></i></span>在<span class="exturl" data-url="aHR0cDovL3d3dy5jbXBlZHUuY29tLw==" title="http://www.cmpedu.com/">机械工业出版社<i class="fa fa-external-link"></i></span>出版的<span class="exturl" data-url="aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMDg2MDI4NC5odG1s" title="https://item.jd.com/10860284.html">《编写高质量代码：改善C#程序的157个建议》<i class="fa fa-external-link"></i></span>一书，打算把其中涉及的所有的观点做一下总结和分析，用于总结和事后翻阅，如果有侵权请联系我删除。</p><h2 id="建议一：正确操作字符串"><a href="#建议一：正确操作字符串" class="headerlink" title="建议一：正确操作字符串"></a>建议一：正确操作字符串</h2><h3 id="确保尽量小的装箱"><a href="#确保尽量小的装箱" class="headerlink" title="确保尽量小的装箱"></a>确保尽量小的装箱</h3><p>　　在自己编写的代码中，应当尽可能地避免编写不必要的装箱代码。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"str1"</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"str2"</span> + <span class="number">9.</span>ToString();</span><br></pre></td></tr></table></figure><p>　　第一句代码中，+ 连接时是将 值类型 int 转换为 引用类型 string 之后在进行 Concat 操作，故而性能更差。</p><p>　　装箱之所以带来性能损耗的原因是，装箱需要以下三个步骤：</p><ol><li>首先，会为值类型在托管堆中分配内存。除了值类型本身所分配的内存外，内存总量还要加上类型对象指针和同步块索引所占用的内存。</li><li>将值类型的值复制到新分配的堆内存中。</li><li>返回已经成为引用类型的对象的地址。</li></ol><h3 id="避免分配额外的内存空间"><a href="#避免分配额外的内存空间" class="headerlink" title="避免分配额外的内存空间"></a>避免分配额外的内存空间</h3><p>　　频繁的进行字符串的拼接操作时，最好使用 StringBuilder，字符串的任何方法或者进行任何运算都会在内存中创建一个新的字符串对象。</p><h2 id="建议二：使用默认转型方法"><a href="#建议二：使用默认转型方法" class="headerlink" title="建议二：使用默认转型方法"></a>建议二：使用默认转型方法</h2><ol><li>使用类型的转换运算符。</li><li>使用类型内置的 Parse、TryParse，或者如 ToString、ToDouble 和 ToDateTime 等方法。</li><li>使用帮助类提供的方法。</li><li>使用 CLR 支持的转型</li></ol><h2 id="建议三：区别对待强制转型与-as-和-is"><a href="#建议三：区别对待强制转型与-as-和-is" class="headerlink" title="建议三：区别对待强制转型与 as 和 is"></a>建议三：区别对待强制转型与 as 和 is</h2><ol><li>如果类型之间都上溯到了某个共同的基类，那么根据此基类进行的转型（即基类转型为子类本身）应该使用 as。子类与子类之间的转型，则应该提供转换操作符，以便进行强制转型。</li><li>as 操作符永远不会抛出异常，如果类型不匹配则会返回 null。</li><li>as 不能操作基元类型，如果涉及基元类型的算法，就需要通过 is 转型前的类型进行判断，以避免转型失败。</li><li>C# 7.0 中提供了 is 的新语法，以下两个方法其实是完全等价的：<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A2</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = obj <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line">    <span class="keyword">if</span> (str != <span class="literal">null</span>)</span><br><span class="line">        Console.WriteLine(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A3</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> <span class="keyword">string</span> str)</span><br><span class="line">        Console.WriteLine(str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="建议四：-TryParse-比-Parse-好"><a href="#建议四：-TryParse-比-Parse-好" class="headerlink" title="建议四： TryParse 比 Parse 好"></a>建议四： TryParse 比 Parse 好</h2><p>Parse 和 TryParse 如果执行成功，他们的效率在一个数量级上，但如果执行失败，Parse 方法在转化失败的时候会引发异常，极大地消耗效率，而 TryParse 并不会。</p><h2 id="建议五：-使用-int-来确保值类型也可以为-null"><a href="#建议五：-使用-int-来确保值类型也可以为-null" class="headerlink" title="建议五： 使用 int? 来确保值类型也可以为 null"></a>建议五： 使用 int? 来确保值类型也可以为 null</h2><p>　　业务需求中，int 类型的字段在无意义时在业务上为 null 比它的默认值 0 更为合适。</p>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>高质量代码</tag>
      </tags>
  </entry>
  <entry>
    <title>缺少google api密钥,因此chromium的部分功能将无法使用”的解决办法</title>
    <url>/posts/37840.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>使用Chromium时会遇到 “缺少google api密钥,因此chromium的部分功能将无法使用”提示，google了一下 setx Google_API_KEY 和 chromium portable google api keys are missing 找到了解决办法。<br><a id="more"></a><br>打开windows的cmd命令提示符，依次输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">setx GOOGLE_API_KEY "no" </span><br><span class="line">setx GOOGLE_DEFAULT_CLIENT_ID "no" </span><br><span class="line">setx GOOGLE_DEFAULT_CLIENT_SECRET "no"</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/20180218230720/20180218110847654.png" alt><br>当然,这样只是可以去掉chromium开启时的提示,如果需要使用Google API 服务,还是推荐去谷歌申请,然后重新setx为真实api key。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>软件心得</tag>
      </tags>
  </entry>
  <entry>
    <title>聚会合租选点：计算距离多个地铁站点综合时间最少的聚会地点</title>
    <url>/posts/63564.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>　　五人小组的聚会由于最初不知为何定在了体育中心、体育西一带，之后一直延续这个传统，鉴于前几次的聚会高度重复，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNoY2F0eS5jbi8yMDE5LzAyLzI0LyVFOCU4MSU5QSVFNCVCQyU5QSVFOSU5QSU4RiVFNiU4MyVCMy8jJUU1JTg1JUIzJUU0JUJBJThFJUU4JTgxJTlBJUU0JUJDJTlB" title="https://blog.chcaty.cn/2019/02/24/%E8%81%9A%E4%BC%9A%E9%9A%8F%E6%83%B3/#%E5%85%B3%E4%BA%8E%E8%81%9A%E4%BC%9A">聚会体验越来越差<i class="fa fa-external-link"></i></span>，便起了一个想法：</p><blockquote><p>为什么不做一个小工具来计算相对几位参与人居住地点最划算的聚会地点呢？</p></blockquote><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>　　在各大地图APP上都有提供各种行程规划的功能，但是利用这个功能来完成预期的业务希望是相当繁琐的，而这个功能如果要自己实现，需要得到的数据就是地铁路线图上任意两个点之间所需要的时间、购票费用等数据。<br>　　经过在网上的搜寻，我最终决定的数据来源方案为百度开放平台中的<span class="exturl" data-url="aHR0cDovL2xic3l1bi5iYWlkdS5jb20vanNkZW1vLmh0bSNzdWJ3YXk0XzE=" title="http://lbsyun.baidu.com/jsdemo.htm#subway4_1">地铁图JS API<i class="fa fa-external-link"></i></span></p><h2 id="抓取关键数据"><a href="#抓取关键数据" class="headerlink" title="抓取关键数据"></a>抓取关键数据</h2><pre><code>在源代码编辑器中将调试的城市名称改为＇广州＇，点击编辑器右上角的运行按钮，在调试窗口中就能找到相关的API请求，所有地铁站数据都可以在这次请求中获得。</code></pre><p>　　<img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317105515992.png" alt></p><p>实体类:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Line</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Station&gt; Stations &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;Station&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Station</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> UId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; Lines &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Json数据解析转换为实体类型并保存到文件中</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jobject = JsonHelper.DeserializeObject(json);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> l <span class="keyword">in</span> jobject[<span class="string">"subways"</span>][<span class="string">"l"</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> line = <span class="keyword">new</span> Line &#123; Name = l[<span class="string">"l_xmlattr"</span>][<span class="string">"lb"</span>].Value&lt;<span class="keyword">string</span>&gt;() &#125;;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> l[<span class="string">"p"</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pname = p[<span class="string">"p_xmlattr"</span>][<span class="string">"lb"</span>].Value&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(pname) &amp;&amp; p[<span class="string">"p_xmlattr"</span>][<span class="string">"uid"</span>] != <span class="literal">null</span>)</span><br><span class="line">            line.Stations.Add(<span class="keyword">new</span> Station</span><br><span class="line">            &#123;</span><br><span class="line">                Name = pname,</span><br><span class="line">                Lines = p[<span class="string">"p_xmlattr"</span>][<span class="string">"lb"</span>].Value&lt;<span class="keyword">string</span>&gt;().Split(<span class="string">','</span>).Select(s =&gt; s.Substring(s.IndexOf(<span class="string">"|"</span>) + <span class="number">1</span>)).ToList(),</span><br><span class="line">                UId = p[<span class="string">"p_xmlattr"</span>][<span class="string">"uid"</span>].Value&lt;<span class="keyword">string</span>&gt;()</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    Lines.Add(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File.WriteAllText(<span class="string">"Data/line.json"</span>, Lines.ToFormatedJsonString());</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317110105885.png" alt></p><p>那么接下来我们就要获取两点之前的数据的方法：<br><img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317110533303.png" alt></p><p>同样，我们找到了页面请求这个数据的API<br><img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317110619477.png" alt><br><img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317110804123.png" alt><br>经测试，只要将圈中的数据替换为响应站点的UID和Name，即可获取到相应的数据。</p><p>实体类:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TwoStationInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span>[] TwoStationNames &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Distance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> SubwayPrice &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> WalkDistance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> WalkTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓取:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stationsList = Lines.Select(l =&gt; l.Stations);</span><br><span class="line"><span class="keyword">var</span> stations = <span class="keyword">new</span> List&lt;Station&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> ss <span class="keyword">in</span> stationsList)</span><br><span class="line">    stations.AddRange(ss);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stations.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; stations.Count; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (TwoStationInfos.Any(ts =&gt; ts.TwoStationNames.Contains(stations[i].Name) &amp;&amp; ts.TwoStationNames.Contains(stations[j].Name))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> client.GetStringAsync(</span><br><span class="line">            <span class="string">$"https://api.map.baidu.com/?qt=bt2&amp;newmap=1&amp;ie=utf-8&amp;f=%5B1,12,13,14%5D&amp;c=257&amp;sn=0$$<span class="subst">&#123;stations[i].UId&#125;</span>$$undefined,undefined$$<span class="subst">&#123;stations[i].Name&#125;</span>$$&amp;en=0$$<span class="subst">&#123;stations[j].UId&#125;</span>$$undefined,undefined$$<span class="subst">&#123;stations[j].Name&#125;</span>$$&amp;m=sbw&amp;ccode=257&amp;from=dtzt&amp;sy=0&amp;t=1552814046118&amp;callback=BMapSub._rd._cbk22197"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> index = result.IndexOf(<span class="string">'&#123;'</span>);</span><br><span class="line">        result = result.Substring(index, result.Length - index - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> jResult = JsonHelper.DeserializeObject(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jResult[<span class="string">"content"</span>] == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> two = <span class="keyword">new</span> TwoStationInfo</span><br><span class="line">        &#123;</span><br><span class="line">            Time = jResult[<span class="string">"content"</span>][<span class="number">0</span>][<span class="string">"exts"</span>][<span class="number">0</span>][<span class="string">"time"</span>].Value&lt;<span class="keyword">int</span>&gt;(),</span><br><span class="line">            Distance = jResult[<span class="string">"content"</span>][<span class="number">0</span>][<span class="string">"exts"</span>][<span class="number">0</span>][<span class="string">"distance"</span>].Value&lt;<span class="keyword">int</span>&gt;(),</span><br><span class="line">            Price = jResult[<span class="string">"content"</span>][<span class="number">0</span>][<span class="string">"exts"</span>][<span class="number">0</span>][<span class="string">"price"</span>].Value&lt;<span class="keyword">int</span>&gt;(),</span><br><span class="line">            SubwayPrice = jResult[<span class="string">"content"</span>][<span class="number">0</span>][<span class="string">"exts"</span>][<span class="number">0</span>][<span class="string">"subway_price"</span>].Value&lt;<span class="keyword">int</span>&gt;(),</span><br><span class="line">            WalkDistance = jResult[<span class="string">"content"</span>][<span class="number">0</span>][<span class="string">"exts"</span>][<span class="number">0</span>][<span class="string">"walk_distance"</span>].Value&lt;<span class="keyword">int</span>&gt;(),</span><br><span class="line">            WalkTime = jResult[<span class="string">"content"</span>][<span class="number">0</span>][<span class="string">"exts"</span>][<span class="number">0</span>][<span class="string">"walk_time"</span>].Value&lt;<span class="keyword">int</span>&gt;(),</span><br><span class="line">            TwoStationNames = <span class="keyword">new</span>[] &#123; stations[i].Name, stations[j].Name &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TwoStationInfos.Add(two);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$@"<span class="subst">&#123;stations[i].Name&#125;</span> =&gt; <span class="subst">&#123;stations[j].Name&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">File.WriteAllText(<span class="string">"Data/info.json"</span>, TwoStationInfos.ToFormatedJsonString());</span><br></pre></td></tr></table></figure><p>最终得到了所有数据，$C_{224}^2$ 大约25000条：<br><img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317111150999.png" alt></p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>得到了数据，那计算就只是体力活了，计算代码如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strs = listBox1.Items.Cast&lt;<span class="keyword">string</span>&gt;().ToList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routeInfos = StationNames.Select(n =&gt; GetRouteInfo(strs, n)).ToList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minTime = routeInfos.Min(r =&gt; r.Routes.Sum(rr =&gt; rr.Time + rr.WalkTime));</span><br><span class="line"><span class="keyword">var</span> minTimeRoute = routeInfos.First(r =&gt; r.Routes.Sum(rr =&gt; rr.Time + rr.WalkTime) == minTime);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minPrice = routeInfos.Min(r =&gt; r.Routes.Sum(rr =&gt; rr.Price));</span><br><span class="line"><span class="keyword">var</span> minPriceRoute = routeInfos.First(r =&gt; r.Routes.Sum(rr =&gt; rr.Price) == minPrice);</span><br><span class="line"></span><br><span class="line">textBox3.Clear();</span><br><span class="line"></span><br><span class="line">textBox3.AppendText(<span class="string">$"综合耗时最短：<span class="subst">&#123;minTimeRoute.DestStation&#125;</span> 耗时: <span class="subst">&#123;Second2Chs(minTime)&#125;</span> \r\n其中地铁时间: <span class="subst">&#123;Second2Chs(minTimeRoute.Routes.Sum(rr =&gt; rr.Time))&#125;</span> 步行时间:<span class="subst">&#123;Second2Chs(minTimeRoute.Routes.Sum(rr =&gt; rr.WalkTime))&#125;</span>\r\n\r\n"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> info <span class="keyword">in</span> minTimeRoute.Routes)</span><br><span class="line">    textBox3.AppendText(</span><br><span class="line">        <span class="string">$"<span class="subst">&#123;info.TwoStationNames[<span class="number">1</span>]&#125;</span>=&gt;<span class="subst">&#123;info.TwoStationNames[<span class="number">0</span>]&#125;</span> 耗时: <span class="subst">&#123;Second2Chs(info.Time + info.WalkTime)&#125;</span> \r\n其中地铁时间: <span class="subst">&#123;Second2Chs(info.Time)&#125;</span> 步行时间:<span class="subst">&#123;Second2Chs(info.WalkTime)&#125;</span> \r\n"</span>);</span><br><span class="line">textBox3.AppendText(<span class="string">$"\r\n\r\n"</span>);</span><br><span class="line">textBox3.AppendText(<span class="string">$"综合花费最少：<span class="subst">&#123;minPriceRoute.DestStation&#125;</span> 花费：<span class="subst">&#123;minPrice/<span class="number">100.0</span>&#125;</span> \r\n\r\n"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> info <span class="keyword">in</span> minPriceRoute.Routes)</span><br><span class="line">    textBox3.AppendText(</span><br><span class="line">        <span class="string">$"<span class="subst">&#123;info.TwoStationNames[<span class="number">1</span>]&#125;</span>=&gt;<span class="subst">&#123;info.TwoStationNames[<span class="number">0</span>]&#125;</span> 花费: <span class="subst">&#123;info.Price / <span class="number">100.0</span>&#125;</span> \r\n"</span>);</span><br></pre></td></tr></table></figure><p>运行结果截图:<br><img src="https://qiniucdn.wayneshao.com/%E8%81%9A%E4%BC%9A%E5%90%88%E7%A7%9F%E9%80%89%E7%82%B9%EF%BC%9A%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9%E7%BB%BC%E5%90%88%E6%97%B6%E9%97%B4%E6%9C%80%E5%B0%91%E7%9A%84%E8%81%9A%E4%BC%9A%E5%9C%B0%E7%82%B9/20190317112034374.png" alt></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dheW5lU2hhby9QYXJ0eVN1YndheVNhdGlvbkRlbW8=" title="https://github.com/WayneShao/PartySubwaySationDemo">代码：包含已抓取到的数据<i class="fa fa-external-link"></i></span></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>首先，软件还比较粗糙，只是简单地数据计算筛选，结果只能做参考。</li><li>同样也可以用于在不同地点工作的人寻找合租的地点，但在这个应用中缺少权值计算，而且往往时间最短的地点都坐落于两条或者多条线的交界处，通勤时的等待时间往往也比较长。</li><li>以后考虑为每个地点增加一些美食指数之类的多维度权值，可以按照不同需求求出最优解。</li></ol>]]></content>
      <categories>
        <category>闹着玩儿</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>广州地铁</tag>
        <tag>聚会</tag>
        <tag>合租</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net 讯飞语音识别Demo</title>
    <url>/posts/43271.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cDovL3d3dy54Znl1bi5jbi9zZXJ2aWNlcy92b2ljZWRpY3RhdGlvbg==" title="http://www.xfyun.cn/services/voicedictation">讯飞语音识别<i class="fa fa-external-link"></i></span>官方号称具有以下六个优势：</p><ol><li>超过95%的准确率</li><li>支持多种语种和方言</li><li>方便快捷的信息沟通</li><li>个性的语音识别</li><li>中文标点智能预测</li><li>支持垂直领域和应用级听写</li></ol><p><img src="https://qiniucdn.wayneshao.com/20180302113535116/20180302114420073.png" alt></p><a id="more"></a><h2 id="获得APPID和调用Dll"><a href="#获得APPID和调用Dll" class="headerlink" title="获得APPID和调用Dll"></a>获得APPID和调用Dll</h2><p>在讯飞开放平台的<span class="exturl" data-url="aHR0cDovL2NvbnNvbGUueGZ5dW4uY24vYXBwL215YXBw" title="http://console.xfyun.cn/app/myapp">控制台<i class="fa fa-external-link"></i></span>新建一个应用，平台选择Windows，新建完成后为应用添加语音听写服务。<br><img src="https://qiniucdn.wayneshao.com/20180302113535116/20180302114712451.png" alt><br>下载SDK<br><img src="https://qiniucdn.wayneshao.com/20180302113535116/20180302114758665.png" alt></p><p>解压出你下载的压缩包bin目录中的msc.dll等待使用<br><img src="https://qiniucdn.wayneshao.com/20180302113535116/20180302114914214.png" alt><br><strong>注意：下面步骤里的Dll必须使用自行下载的版本，此Dll并不通用</strong></p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><h3 id="识别文件实现"><a href="#识别文件实现" class="headerlink" title="识别文件实现"></a>识别文件实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 执行语音识别的异步方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="inFile"&gt;</span>音频文件，pcm无文件头，采样率16k，数据16位，单声道<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="outFile"&gt;</span>输出识别结果到文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Audio2TxtAsync</span>(<span class="params"><span class="keyword">string</span> inFile, <span class="keyword">string</span> outFile = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dlt = <span class="keyword">new</span> DltSpeek(Audio2Txt);</span><br><span class="line">    dlt.BeginInvoke(inFile, outFile, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 进行声音识别</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="inFile"&gt;</span>音频文件，pcm无文件头，采样率16k，数据16位，单声道<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="outFile"&gt;</span>输出识别结果到文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Audio2Txt</span>(<span class="params"><span class="keyword">string</span> inFile, <span class="keyword">string</span> outFile = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//模拟录音，输入音频</span></span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(inFile)) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件"</span> + inFile + <span class="string">"不存在！"</span>);</span><br><span class="line">        <span class="keyword">if</span> (inFile.Substring(inFile.Length - <span class="number">3</span>, <span class="number">3</span>).ToUpper() != <span class="string">"WAV"</span> &amp;&amp; inFile.Substring(inFile.Length - <span class="number">3</span>, <span class="number">3</span>).ToUpper() != <span class="string">"PCM"</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"音频文件格式不对！"</span>);</span><br><span class="line">        <span class="keyword">var</span> fp = <span class="keyword">new</span> FileStream(inFile, FileMode.Open);</span><br><span class="line">        <span class="keyword">if</span> (inFile.Substring(inFile.Length - <span class="number">3</span>, <span class="number">3</span>).ToUpper() == <span class="string">"WAV"</span>) fp.Position = <span class="number">44</span>;</span><br><span class="line">        <span class="keyword">var</span> buff = <span class="keyword">new</span> <span class="keyword">byte</span>[BufferNum];</span><br><span class="line">        <span class="keyword">var</span> bp = Marshal.AllocHGlobal(BufferNum);</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">var</span> status = AudioStatus.IsrAudioSampleContinue;</span><br><span class="line">        <span class="keyword">var</span> epStatus = EpStatus.IsrEpNull;</span><br><span class="line">        <span class="keyword">var</span> recStatus = RecogStatus.IsrRecNull;</span><br><span class="line">        <span class="keyword">var</span> rsltStatus = RecogStatus.IsrRecNull;</span><br><span class="line">        <span class="comment">//ep_status        端点检测（End-point detected）器所处的状态</span></span><br><span class="line">        <span class="comment">//rec_status       识别器所处的状态</span></span><br><span class="line">        <span class="comment">//rslt_status      识别器所处的状态</span></span><br><span class="line">        <span class="keyword">while</span> (fp.Position != fp.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            len = fp.Read(buff, <span class="number">0</span>, BufferNum);</span><br><span class="line">            Marshal.Copy(buff, <span class="number">0</span>, bp, buff.Length);</span><br><span class="line">            <span class="comment">//开始向服务器发送音频数据</span></span><br><span class="line">            ret = AsrDll.QISRAudioWrite(_sessID, bp, (<span class="keyword">uint</span>)len, status, <span class="keyword">ref</span> epStatus, <span class="keyword">ref</span> recStatus);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fp.Close();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"QISRAudioWrite err,errCode="</span> + ((ErrorCode)ret).ToString(<span class="string">"G"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//服务器返回部分结果</span></span><br><span class="line">            <span class="keyword">if</span> (recStatus == RecogStatus.IsrRecStatusSuccess)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> p = AsrDll.QISRGetResult(_sessID, <span class="keyword">ref</span> rsltStatus, WaitTime, <span class="keyword">ref</span> ret);</span><br><span class="line">                <span class="keyword">if</span> (p != IntPtr.Zero)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> tmp = FlyTts.Ptr2Str(p);</span><br><span class="line">                    DataArrived?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> DataArrivedEventArgs(tmp));</span><br><span class="line">                    result += tmp;</span><br><span class="line">                    Console.WriteLine(<span class="string">@"返回部分结果！:"</span> + tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fp.Close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后一块数据</span></span><br><span class="line">        status = AudioStatus.IsrAudioSampleLast;</span><br><span class="line"></span><br><span class="line">        ret = AsrDll.QISRAudioWrite(_sessID, bp, <span class="number">1</span>, status, <span class="keyword">ref</span> epStatus, <span class="keyword">ref</span> recStatus);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"QISRAudioWrite write last audio err,errCode="</span> + ((ErrorCode)ret).ToString(<span class="string">"G"</span>));</span><br><span class="line">        Marshal.FreeHGlobal(bp);</span><br><span class="line">        <span class="keyword">var</span> loopCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最后一块数据发完之后，循环从服务器端获取结果</span></span><br><span class="line">        <span class="comment">//考虑到网络环境不好的情况下，需要对循环次数作限定</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = AsrDll.QISRGetResult(_sessID, <span class="keyword">ref</span> rsltStatus, WaitTime, <span class="keyword">ref</span> ret);</span><br><span class="line">            <span class="keyword">if</span> (p != IntPtr.Zero)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = FlyTts.Ptr2Str(p);</span><br><span class="line">                DataArrived?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> DataArrivedEventArgs(tmp)); <span class="comment">//激发识别数据到达事件</span></span><br><span class="line">                result += tmp;</span><br><span class="line">                Console.WriteLine(<span class="string">@"传完音频后返回结果！:"</span> + tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"QISRGetResult err,errCode="</span> + ((ErrorCode)ret).ToString(<span class="string">"G"</span>));</span><br><span class="line">            Thread.Sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (rsltStatus != RecogStatus.IsrRecStatusSpeechComplete &amp;&amp; loopCount++ &lt; <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">if</span> (outFile != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> fout = <span class="keyword">new</span> FileStream(outFile, FileMode.OpenOrCreate);</span><br><span class="line">            fout.Write(Encoding.Default.GetBytes(result), <span class="number">0</span>, Encoding.Default.GetByteCount(result));</span><br><span class="line">            fout.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        ret = AsrDll.QISRSessionEnd(_sessID, <span class="keyword">string</span>.Empty);</span><br><span class="line">        ret = AsrDll.MSPLogout();</span><br><span class="line">        IsrEnd?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> EventArgs()); <span class="comment">//通知识别结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="录音实现"><a href="#录音实现" class="headerlink" title="录音实现"></a>录音实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartRecoding</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WaveMonitor = <span class="keyword">new</span> WaveInEvent &#123; WaveFormat = <span class="keyword">new</span> WaveFormat(<span class="number">16000</span>, <span class="number">16</span>, <span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(<span class="string">"temp"</span>))</span><br><span class="line">        Directory.CreateDirectory(<span class="string">"temp"</span>);</span><br><span class="line">    _fileName = Path.Combine(<span class="string">"temp"</span>, Guid.NewGuid() + <span class="string">".wav"</span>);</span><br><span class="line"></span><br><span class="line">    Writer = <span class="keyword">new</span> WaveFileWriter(_fileName, WaveMonitor.WaveFormat);</span><br><span class="line"></span><br><span class="line">    WaveMonitor.DataAvailable += (s, a) =&gt; Writer.Write(a.Buffer, <span class="number">0</span>, a.BytesRecorded);</span><br><span class="line">    WaveMonitor.RecordingStopped += (s, a) =&gt; &#123; Writer?.Dispose(); WaveMonitor?.Dispose(); &#125;;</span><br><span class="line"></span><br><span class="line">    WaveMonitor.StartRecording();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopRecoding</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WaveMonitor.StopRecording();</span><br><span class="line">    Writer?.Close();</span><br><span class="line"></span><br><span class="line">    Audio2Txt(_fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h3><p>托管在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dheW5lU2hhby9pRmx5RG90TmV0" title="https://github.com/WayneShao/iFlyDotNet">GitHub<i class="fa fa-external-link"></i></span></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>讯飞语音识别实测识别率其实并没有比百度好多少，准确率在服务提供商看来是越精确越好，但在实际应用中90%和95%差距并不大，故虽然讯飞看起来在数据上更好一些，但是API易用性实在比较差，还是更推荐百度一些。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>ASR</tag>
        <tag>TTS</tag>
        <tag>NAudio</tag>
        <tag>语音识别</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次失败平衡车破解提速之旅</title>
    <url>/posts/15092.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　记录为期一天的失败破解之旅．</p><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>　　最近突然觉得手头的 Ninebot 平衡车速度是确实有几分慢了，想起了刚买到手的时候似乎在论坛看到过一篇帖子是讲如何破解速度上限的，拼着几丝印象找到了当时的帖子：<span class="exturl" data-url="aHR0cDovL2Jicy5uaW5lYm90LmNuL3RocmVhZC0xOTczMDEtMS0xLmh0bWw=" title="http://bbs.ninebot.cn/thread-197301-1-1.html">传送门<i class="fa fa-external-link"></i></span></p><a id="more"></a><p>　　<img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310121120037.png" alt><br>　　帖子里描述的方法是使用 JLink V8 之类的 ARM模拟器把网友编写的固件刷入主板，对于我一个手残来说，首先是硬件成本，从 JLink ，到铜线、引脚，再到电烙铁和焊锡全都要新买，另外虽然不用担心刷固件把车子搞坏，但是万一手残把主板焊坏，那就死定了。<br>　　向下翻打算借鉴一下经验看要买哪一款模拟器的时候，发现了一位坛友的分享：<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310121953854.png" alt><br>　　咦，居然还有这么清真的方式？虽然不算便宜，但是两百以内也完全可以接受，关键是，不用拆机，省了不少事儿，就顺着这条线继续往下查，找到了[这篇帖子：](<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS5lbGVjdHJpY3VuaWN5Y2xlLm9yZy90b3BpYy8xMTk3Ni1uaW5ldG9vbC1pbmNyZWFzZQ==" title="https://forum.electricunicycle.org/topic/11976-ninetool-increase">https://forum.electricunicycle.org/topic/11976-ninetool-increase<i class="fa fa-external-link"></i></span>﻿-max-﻿﻿﻿speed﻿-ninebot-and-change-model)<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310122324594.png" alt><br>　　简单看了一下，安卓软件，需要购买 License ，三十刀，界面相当简洁。</p><blockquote><p>To change the model, you need an activation code, you can get it from me, you need to send a screenshot of the program screen on the example as in the screenshot below.</p></blockquote><p>　　看来 License 是根据读取了设备的三个 key 和 Sn 经由某种算法计算出来的，一台设备对应一个 License。<br>遂安装到手机试了试，交互十分简单，点击 Set Model 的时候会触发授权码校验。</p><p>　　至此，突然萌生了一丝侥幸，这么简陋，我是不是可以自学一下安卓逆向，把它破解掉呢？<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310122856503.png" alt></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>　　首先测试了一下交互，校验失败会直接弹出提示，内容里会包含文本框里的内容。<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310122710140.png" alt><br>　　然后抓包尝试了一下，发现校验完全是本地操作，并无在线校验。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>　　之前在学校的时候简单研究过一些逆向分析的知识，对 .NET 的逆向分析研究多一些，当时学习主要是在吾爱破解，现在想要学安卓逆向，同样也是到吾爱找了一套教程，大佬为兄弟写的一套教程<span class="exturl" data-url="aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtNjQ4NTMwLTEtMS5odG1s" title="https://www.52pojie.cn/thread-648530-1-1.html">《教我兄弟学Android逆向》<i class="fa fa-external-link"></i></span>。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>祭出 Android Killer :<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310124045297.png" alt><br>分析主界面的代码 FMXNativeActivity.smali :</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.field private mStartupGCM:Landroid/os/Bundle;</span><br><span class="line"></span><br><span class="line">.field private mTextView:Lcom/embarcadero/firemonkey/text/FMXTextEditorProxy;</span><br><span class="line"></span><br><span class="line">.field private mViewGroup:Landroid/view/ViewGroup;</span><br><span class="line"></span><br><span class="line">.field private mViewStack:Lcom/embarcadero/firemonkey/ViewStack;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.method public surfaceCreated(Landroid/view/SurfaceHolder;)V</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.method public surfaceDestroyed(Landroid/view/SurfaceHolder;)V</span><br></pre></td></tr></table></figure><p>噗<del>~</del></p><p><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310124531125.png" alt></p><p>我的天。。。<br>界面的代码里根本没有控件的渲染和事件，有种不祥的预感，再一看 lib 文件夹下：<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310124721318.png" alt></p><p>祭出 IDA ：<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310125105181.png" alt></p><p>字符串窗口来看，控件逻辑果然是在 so 文件中，再看到处窗口：<br><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310125231743.png" alt></p><p>只有两个校验失败的方法。。。</p><p>至此。。我大概意识到我的半吊子功夫是搞不定了，也意识到看似简单的界面，实则是作者早有防备。</p><p><img src="https://qiniucdn.wayneshao.com/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85/20190310125514608.png" alt></p>]]></content>
      <categories>
        <category>闹着玩儿</category>
      </categories>
      <tags>
        <tag>安卓</tag>
        <tag>逆向</tag>
        <tag>破解</tag>
        <tag>Ninebot</tag>
      </tags>
  </entry>
  <entry>
    <title>【微服务学习】Consul 服务治理发现</title>
    <url>/posts/15089.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Consul-服务治理发现"><a href="#Consul-服务治理发现" class="headerlink" title="Consul 服务治理发现"></a>Consul 服务治理发现</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>　　Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul的方案更“<strong>一站式</strong>”，内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（比如ZooKeeper等）。使用起来也较为简单。Consul使用Go语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与Docker等轻量级容器可无缝配合 。</p><ul><li><strong>service discovery</strong>：consul通过DNS或者HTTP接口使服务注册和服务发现变的很容易，一些外部服务，例如saas提供的也可以一样注册。</li><li><strong>health checking</strong>：健康检测使consul可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障的服务上面。</li><li><strong>key/value storage</strong>：一个用来存储动态配置的系统。提供简单的HTTP接口，可以在任何地方操作。</li><li>*<em>multi-datacenter</em>：无需复杂的配置，即可支持任意数量的区域。</li></ul><p>　　Consul 是注册中心，服务提供者、服务消费者等都要注册到 Consul 中，这样就可以实现服务提供者、服务消费者的隔离。<br>　　除了 Consul 之外，还有 Eureka、Zookeeper、Etcd 等类似服务发现框架。</p><h3 id="Consul-相关概念"><a href="#Consul-相关概念" class="headerlink" title="Consul 相关概念"></a>Consul 相关概念</h3><p><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190220082541153.png" alt></p><ul><li><p><strong>CLIENT</strong><br>CLIENT表示consul的client模式，就是客户端模式。是consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到SERVER，本身是不持久化这些信息。</p></li><li><p><strong>SERVER</strong><br>SERVER表示consul的server模式，表明这个consul是个server，这种模式下，功能和CLIENT都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。</p></li><li><p><strong>SERVER-LEADER</strong><br>中间那个SERVER下面有LEADER的字眼，表明这个SERVER是它们的老大，它和其它SERVER不一样的一点是，它需要负责同步注册的信息给其它的SERVER，同时也要负责各个节点的健康监测。</p></li><li><p><strong>其它信息</strong><br>其它信息包括它们之间的通信方式，还有一些协议信息，算法。它们是用于保证节点之间的数据同步，实时性要求等等一系列集群问题的解决。这些有兴趣的自己看看官方文档。</p></li></ul><h3 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h3><p>　　Consul 的整体功能其实就类似于互联网中的 DNS 服务器，Consul 服务端根据客户端传入的服务名，返回所有提供该服务的地址，整个流程跟 DNS 服务器将域名转化为 IP 地址有异曲同工之妙。</p><h2 id="Consul-在-NET-Core-下的实践"><a href="#Consul-在-NET-Core-下的实践" class="headerlink" title="Consul 在 .NET Core 下的实践"></a>Consul 在 .NET Core 下的实践</h2><p>　　我是用的开发平台是 Windows 64bit，鉴于 Windows 使用 Docker 的繁琐和诸多问题，以下流程直接下载运行 Consul 而不使用 Docker。</p><h3 id="下载安装运行"><a href="#下载安装运行" class="headerlink" title="下载安装运行"></a>下载安装运行</h3><ol><li>从<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29uc3VsLmlvL2Rvd25sb2Fkcy5odG1s" title="https://www.consul.io/downloads.html">Consul 下载页面<i class="fa fa-external-link"></i></span>下载对应平台的最新版本的 Consul 程序并解压。<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190220085150466.png" alt><br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190220085227813.png" alt></li><li>运行 <strong>consul.exe agent -dev</strong> （使用开发模式进行测试，如需生产环境集群使用，只要需要一台 Server，多台 Agent）<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190220085306129.png" alt></li><li>访问自带的 Web 后台查看即时信息<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190220085443153.png" alt></li></ol><h3 id="NET-Core-下的-Consul-实践"><a href="#NET-Core-下的-Consul-实践" class="headerlink" title=".NET Core 下的 Consul 实践"></a>.NET Core 下的 Consul 实践</h3><blockquote><p>Install-Package Consul</p></blockquote><p>　　<strong>程序与 Consul 的交互主要有三种：</strong></p><ul><li>服务注册</li><li>服务查询</li><li>服务健康检查</li></ul><h4 id="服务注册与反注册"><a href="#服务注册与反注册" class="headerlink" title="服务注册与反注册"></a>服务注册与反注册</h4><h5 id="随机获取一个可用端口"><a href="#随机获取一个可用端口" class="headerlink" title="随机获取一个可用端口"></a>随机获取一个可用端口</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net.NetworkInformation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsulDemo.Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PortHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 产生一个随机可用端口</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> <span class="doctag">///</span> <span class="doctag">&lt;param name="minPort"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="maxPort"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetRandAvailablePort</span>(<span class="params"><span class="keyword">int</span> minPort = <span class="number">1024</span>, <span class="keyword">int</span> maxPort = <span class="number">65535</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> rand = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> port = rand.Next(minPort, maxPort);</span><br><span class="line">                <span class="keyword">if</span> (!IsPortInUsed(port))</span><br><span class="line">                    <span class="keyword">return</span> port;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 判断端口是否在使用中</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="port"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsPortInUsed</span>(<span class="params"><span class="keyword">int</span> port</span>)</span> =&gt;</span><br><span class="line">            IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpListeners().Any(p =&gt; p.Port == port) ||</span><br><span class="line">            IPGlobalProperties.GetIPGlobalProperties().GetActiveUdpListeners().Any(p =&gt; p.Port == port) ||</span><br><span class="line">            IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpConnections().Any(conn =&gt; conn.LocalEndPoint.Port == port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Program-增加属性-CurrentPort"><a href="#Program-增加属性-CurrentPort" class="headerlink" title="Program 增加属性 CurrentPort"></a>Program 增加属性 <strong>CurrentPort</strong></h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="keyword">using</span> ConsulDemo.Extensions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsulDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> CurrentPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt; </span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">            .UseStartup&lt;Startup&gt;()</span><br><span class="line">            .UseUrls(<span class="string">$"http://*:<span class="subst">&#123;CurrentPort = PortHelper.GetRandAvailablePort()&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将注册与反注册的方法绑定到生命周期的开始和结束"><a href="#将注册与反注册的方法绑定到生命周期的开始和结束" class="headerlink" title="将注册与反注册的方法绑定到生命周期的开始和结束"></a>将注册与反注册的方法绑定到生命周期的开始和结束</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    app.UseMvc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">string</span> ip = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">var</span> port = Program.CurrentPort;</span><br><span class="line">    <span class="keyword">var</span> serviceID = <span class="string">$"ConsulDemo_<span class="subst">&#123;Environment.TickCount&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Consul 客户端</span></span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> ConsulClient((obj) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        obj.Address = <span class="keyword">new</span> Uri(<span class="string">"http://127.0.0.1:8500"</span>);</span><br><span class="line">        obj.Datacenter = <span class="string">"dc1"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在生命周期开始时注册服务</span></span><br><span class="line">    lifetime.ApplicationStarted.Register(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = client.Agent.ServiceRegister(<span class="keyword">new</span> AgentServiceRegistration</span><br><span class="line">        &#123;</span><br><span class="line">            ID = serviceID,</span><br><span class="line">            Name = <span class="string">"ConsulDemo"</span>,</span><br><span class="line">            Address = ip,</span><br><span class="line">            Port = port,</span><br><span class="line">            Check = <span class="keyword">new</span> AgentServiceCheck</span><br><span class="line">            &#123;</span><br><span class="line">                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class="number">5</span>),</span><br><span class="line">                Interval = TimeSpan.FromSeconds(<span class="number">5</span>),</span><br><span class="line">                HTTP = <span class="string">$"http://<span class="subst">&#123;ip&#125;</span>:<span class="subst">&#123;port&#125;</span>/api/values/0"</span>,</span><br><span class="line">                Timeout = TimeSpan.FromSeconds(<span class="number">5</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$"Consul-ServiceRegister:<span class="subst">&#123;result.Result.StatusCode&#125;</span> - <span class="subst">&#123;result.Result.RequestTime&#125;</span>"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在生命周期结束时反注册服务</span></span><br><span class="line">    lifetime.ApplicationStopping.Register(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = client.Agent.ServiceDeregister(serviceID);</span><br><span class="line">        Console.WriteLine(<span class="string">$"Consul-ServiceDeregister:<span class="subst">&#123;result.Result.StatusCode&#125;</span> - <span class="subst">&#123;result.Result.RequestTime&#125;</span>"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果视图"><a href="#结果视图" class="headerlink" title="结果视图"></a>结果视图</h5><p>启动五个服务提供程序，图中可以看得到连接成功后的打印以及 Consul 健康检查得请求日志。<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221072754356.png" alt><br>从 Consul 的后台可以清楚的看到已经成功注册了五个 ConsulDemo 服务提供程序。<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221073245220.png" alt><br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221073230199.png" alt></p><h4 id="服务消费程序"><a href="#服务消费程序" class="headerlink" title="服务消费程序"></a>服务消费程序</h4><h5 id="首先我们新建一个-RestTemplate"><a href="#首先我们新建一个-RestTemplate" class="headerlink" title="首先我们新建一个 RestTemplate"></a>首先我们新建一个 RestTemplate</h5><p>RestTemplate（模仿 Spring Cloud 中的）</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Consul;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http.Headers;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsulTemplate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RestTemplate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _consulServerUrl;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RestTemplate</span>(<span class="params"><span class="keyword">string</span> consulServerUrl = <span class="string">"http://127.0.0.1:8500"</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _consulServerUrl = consulServerUrl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取服务的第一个实现地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="serviceName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">ResolveRootUrlAsync</span>(<span class="params"><span class="keyword">string</span> serviceName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> consulClient = <span class="keyword">new</span> ConsulClient(c =&gt; c.Address = <span class="keyword">new</span> Uri(_consulServerUrl)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> services = (<span class="keyword">await</span> consulClient.Agent.Services()).Response;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">"当前所有服务"</span>);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> service <span class="keyword">in</span> services)</span><br><span class="line">                    Console.WriteLine(<span class="string">$"Service:<span class="subst">&#123;service.Value.Service&#125;</span>Address:<span class="subst">&#123;service.Value.Address&#125;</span>Port:<span class="subst">&#123;service.Value.Port&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> agentServices = services.Where(s =&gt; s.Value.Service.Equals(serviceName, StringComparison.CurrentCultureIgnoreCase)).Select(s =&gt; s.Value).ToArray();</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据当前TickCount对服务器个数取模，“随机”取一个机器出来，避免“轮询”的负载均衡策略需要计数加锁问题</span></span><br><span class="line">                <span class="keyword">var</span> agentService = agentServices.ElementAt(Environment.TickCount % agentServices.Length);</span><br><span class="line"></span><br><span class="line">                 Console.WriteLine(<span class="string">$"随机选取 Service:<span class="subst">&#123;agentService.Service&#125;</span>Address:<span class="subst">&#123;agentService.Address&#125;</span>Port:<span class="subst">&#123;agentService.Port&#125;</span>"</span>);</span><br><span class="line">                <span class="keyword">return</span> agentService.Address + <span class="string">":"</span> + agentService.Port;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 转化到实际接口地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="url"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">ResolveUrlAsync</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> uri = <span class="keyword">new</span> Uri(url);</span><br><span class="line">            <span class="keyword">var</span> serviceName = uri.Host;</span><br><span class="line">            <span class="keyword">var</span> realRootUrl = <span class="keyword">await</span> ResolveRootUrlAsync(serviceName);</span><br><span class="line">            <span class="keyword">return</span> uri.Scheme + <span class="string">"://"</span> + realRootUrl + uri.PathAndQuery;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ResponseEntity&lt;T&gt;&gt; GetForEntityAsync&lt;T&gt;(<span class="keyword">string</span> url, HttpRequestHeaders requestHeaders = <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> requestMsg = <span class="keyword">new</span> HttpRequestMessage();</span><br><span class="line">                <span class="keyword">if</span> (requestHeaders != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> header <span class="keyword">in</span> requestHeaders)</span><br><span class="line">                        requestHeaders.Add(header.Key, header.Value);</span><br><span class="line"></span><br><span class="line">                requestMsg.Method = HttpMethod.Get;</span><br><span class="line">                requestMsg.RequestUri = <span class="keyword">new</span> Uri(<span class="keyword">await</span> ResolveUrlAsync(url));</span><br><span class="line">                <span class="keyword">var</span> result = <span class="keyword">await</span> httpClient.SendAsync(requestMsg);</span><br><span class="line">                <span class="keyword">var</span> respEntity = <span class="keyword">new</span> ResponseEntity&lt;T&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    StatusCode = result.StatusCode</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> bodyStr = <span class="keyword">await</span> result.Content.ReadAsStringAsync();</span><br><span class="line">                respEntity.Body = JsonConvert.DeserializeObject&lt;T&gt;(bodyStr);</span><br><span class="line">                respEntity.Headers = respEntity.Headers;</span><br><span class="line">                <span class="keyword">return</span> respEntity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ResponseEntity&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> HttpStatusCode StatusCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> T Body &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//返回的json反序列化出来的对象</span></span><br><span class="line">    <span class="keyword">public</span> HttpResponseHeaders Headers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//响应的报文头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用代码"><a href="#调用代码" class="headerlink" title="调用代码"></a>调用代码</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"请求开始"</span>);</span><br><span class="line">        <span class="keyword">var</span> rest = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">var</span> data = rest.GetForEntityAsync&lt;DateTime&gt;(<span class="string">"http://ConsulDemo/api/Values"</span>).Result;</span><br><span class="line">        Console.WriteLine(data.StatusCode);</span><br><span class="line">        Console.WriteLine(<span class="keyword">string</span>.Join(<span class="string">","</span>, data.Body));</span><br><span class="line">        Console.WriteLine(<span class="string">"请求结束\r\n\r\n"</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221075743368.png" alt></p><p>手动关掉一个服务端</p><p><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221080109388.png" alt><br>关掉的程序成功消失(反注册)<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221080152025.png" alt><br>资源管理器杀掉一个程序<br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221080431270.png" alt><br><img src="https://qiniucdn.wayneshao.com/Consul-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%8F%91%E7%8E%B0/20190221080513331.png" alt></p><p>源码 <span class="exturl" data-url="aHR0cHM6Ly9xaW5pdWNkbi53YXluZXNoYW8uY29tL0NvbnN1bERlbW8uN3o=" title="https://qiniucdn.wayneshao.com/ConsulDemo.7z">ConsulDemo.7z<i class="fa fa-external-link"></i></span></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>服务治理发现</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium PhantomJS 巧妙过渡到 Firefox/Chrome</title>
    <url>/posts/40690.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="PhantomJS-Obsolete"><a href="#PhantomJS-Obsolete" class="headerlink" title="PhantomJS Obsolete"></a>PhantomJS Obsolete</h1><h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p>前段时间因为一些个人爱好，想要对某网站的数据进行整站采集，其中需要对某些页面的一些区块进行截图采集，整个采集任务中还涉及一些验证码识别之类的工作。学艺不精，我当前掌握的 Scrapy 知识很难完成这样一个爬虫，就使用了 Selenium + PhantomJS 制作了一个模拟浏览器访问来爬取数据的小爬虫，完成了整套抓取任务。<br><img src="https://qiniucdn.wayneshao.com/20180711045204672.gif" alt></p><a id="more"></a><p>然而上个月手误格掉了整块数据硬盘，之前的代码也没留下备份，我还仍然有同样的数据采集需要，只能准备按照原有思路重新做一个爬虫，这本来应该只是个体力活，只要重新抓样本，做好验证码识别，之后就应该一马平川，一泻千里了。<br><img src="https://qiniucdn.wayneshao.com/Selenium-+-Firefox-Chrome-%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711050254778.png" alt><br>然而就在我开始动手的时候，PhantomJSDriver 类型下的蓝色下划线成功吸引了有强迫症的程序员本尊的注意<br><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180711101818131.png" alt><br><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180711101850349.png" alt><br><img src="https://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080149417.png" alt></p><p>运用我考了三遍都没过的四级英语定睛一看，这个意思是说， PhantomJSDriver 类型已经被<strong>弃用</strong>，PhantomJS 的开发工作已经停止，PhantomJS 的驱动<strong>将会在未来的某个 release 版本上被移除</strong>。<br><strong>天哪~！</strong><br><img src="https://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080102494.png" alt><br>告诉我不是真的！Selenium 居然放弃了他的好基友 PhantomJS！<br><strong><em>（这个声明颇有 “不是我他跟不上我的进步被我抛弃，而是他渣，他抛弃了我” 的戏剧性，让我不由得想要查证一下）</em></strong></p><h2 id="Investigate"><a href="#Investigate" class="headerlink" title="Investigate"></a>Investigate</h2><p>不敢相信的我祭出了谷歌神器</p><blockquote><p>Chrome 59 将支持 Headless 模式。而在 Chrome 未提供原生 Headless 模式前，Web 开发者可以使用 PhantomJS 等第三方 Headless 浏览器。现在官方准备提供 Headless 了，PhantomJS 主要的贡献者 Vitaly Slobodin 随即在邮件列表上宣布辞职。<br><img src="https://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711080802730.png" alt><br>因为这半年都没有过写新爬虫的需求，而最近一直在跑着的爬虫用的是老版本 Selenium 开发，所以还 PhantomJS 玩得很嗨，殊不知已经 Out 了。查了一下，<strong>去年四月份的 Chrome 59 版本和六月份的 Firefox 56 版本都引入了 Headless 模式</strong>，PhantomJS 的独领风骚地位瞬间丧失，开发者流失，仅剩的一位开发者 Vitaly Slobodin 看不到 PhantomJS 的未来，选择了<strong>停止开发</strong>，然后 “不思进取” 的 PhantomJS 逐渐消失在历史的尘埃中…… 小厂出的创新产品，大厂做出类似产品之后，小厂 GG，大概也就是这么一回事吧……<br><strong><em>（虽然果真是 PhantomJS 做了负心汉，但还是莫名悲壮，有种丈夫不思进取，觉得配不上努力上进妻子然后自我了断给妻子自由的既视感）</em></strong></p></blockquote><h1 id="Headless-Chrome-Firefox"><a href="#Headless-Chrome-Firefox" class="headerlink" title="Headless Chrome/Firefox"></a>Headless Chrome/Firefox</h1><p>想要使用 Selenium 控制 Firefox 进行页面浏览，需要先做以下的准备工作：</p><h2 id="Headless-Firefox"><a href="#Headless-Firefox" class="headerlink" title="Headless Firefox"></a>Headless Firefox</h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><ol><li>安装最新版本的 Firefox 浏览器。</li><li>下载最新版本的适应当前系统的 GeckoDriver。</li><li>将步骤 2 下载的 GeckoDriver 的程序文件移动到 Firefox 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。</li></ol><p>然后引入官方的四个 Nuget 包：<br><img src="https://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png" alt></p><blockquote><p>Install-Package Selenium.WebDriver<br>Install-Package Selenium.WebDriverBackedSelenium<br>Install-Package Selenium.Support<br>Install-Package Selenium.RC</p></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><p>随意拉一个窗体用于测试，然后敲入以下代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firefoxOption = <span class="keyword">new</span> FirefoxOptions();</span><br><span class="line">firefoxOption.AddArguments(<span class="string">"-headless"</span>);</span><br><span class="line"><span class="keyword">var</span> firefoxDriver = <span class="keyword">new</span> FirefoxDriver(firefoxOption);</span><br><span class="line"></span><br><span class="line">firefoxDriver.Navigate().GoToUrl(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line"></span><br><span class="line">textBox1.Text = firefoxDriver.PageSource;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180711105729884.png" alt></p><h2 id="Headless-Chrome"><a href="#Headless-Chrome" class="headerlink" title="Headless Chrome"></a>Headless Chrome</h2><h3 id="Prepare-1"><a href="#Prepare-1" class="headerlink" title="Prepare"></a>Prepare</h3><p>想要使用 Selenium 控制 Chrome 进行页面浏览，需要做的准备工作和上面的 Firefox 大同小异：</p><ol><li>安装最新版本的 Chrome 浏览器（也可以考虑像我一样使用国内大牛写的 Chrome 绿色化工具 MyChrome 安装绿色版 Chrome ，在版本控制、用户文件本地化方面更具优势）。</li><li>下载最新版本的适应当前系统的 ChromeDriver。</li><li>将步骤 2 下载的 ChromeDriver 的程序文件移动到 Chrome 的程序目录中，使两个程序的执行文件处于同一目录中，并将程序所在的目录加入到环境变量中。</li></ol><p>依然是官方的四个 Nuget 包（如果已经安装过，则直接跳过）：<br><img src="https://qiniucdn.wayneshao.com/Selenium%E5%85%A8%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%9B%BE/20180711082732423.png" alt></p><blockquote><p>Install-Package Selenium.WebDriver<br>Install-Package Selenium.WebDriverBackedSelenium<br>Install-Package Selenium.Support<br>Install-Package Selenium.RC</p></blockquote><h3 id="Coding-1"><a href="#Coding-1" class="headerlink" title="Coding"></a>Coding</h3><p>随意拉一个窗体用于测试，然后敲入以下代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chromeOption = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">chromeOption.AddArguments(<span class="string">"--headless"</span>, <span class="string">"--disable-gpu"</span>);</span><br><span class="line"><span class="keyword">var</span> chromeDriver = <span class="keyword">new</span> ChromeDriver(chromeOption);</span><br><span class="line"></span><br><span class="line">chromeDriver.Navigate().GoToUrl(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line"></span><br><span class="line">textBox1.Text = chromeDriver.PageSource;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180711111201947.png" alt></p><h2 id="Full-Page-ScreenShot"><a href="#Full-Page-ScreenShot" class="headerlink" title="Full Page ScreenShot"></a>Full Page ScreenShot</h2><p>无头模式是已经实现了，在打开时间上效率略差于 PhantomJS，但是执行页面抓取是却要更优于 PhantomJS ，无愧于老牌浏览器的称号。可是接下来就遇到了新的问题，上面提到的，我的爬虫求有截取页面某一区域图片的需求，而 Selenium 的驱动 API 标准获取图片的只有 GetScreenShot ，在之前使用 PhantomJS 时，由于 PhantomJS 从从诞生时起就是一个为爬虫服务的没有界面的浏览器，所以截图 API 截到的就是整个页面的图片，在获取某一区域的渲染图片时，只需要从截到的全页面图中将区域所在的矩形取出来，就可以完成要求。但是对于 Chrome 和 Firefox 这样的浏览器，虽然有 Headless 模式，但是窗口的概念是一只存在的， GetScreenShot 截到的只会是浏览器窗口显示的部分页面的截图，所以我们需要找到一种可以截全图的方法。</p><h3 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h3><p>想要在每次只能截到浏览器显示区域截图的情况下得到整个页面的截图，有如下两个思路：</p><ol><li>控制浏览器滚动条移动，将所有区域的截图全都获取到，再根据每次截图时滚动条所处的位置信息，将所有截图合并到一起，最终得到全页面的截图。</li><li>把浏览器的窗口大小设置到页面一样大，甚至比页面稍大些，再进行截图，就可以得到全页面的截图。<br>比较而言无疑是思路 2 更为简单高效，而且在 Headless 模式下，浏览器窗口的变化也完全不会有什么影响，故我们选用第二种思路来实现全页面截图。</li></ol><h3 id="Coding-2"><a href="#Coding-2" class="headerlink" title="Coding"></a>Coding</h3><p>这里我们使用. NET 知名开源图片处理组件 ImageProcessor 来进行图片裁剪。</p><blockquote><p>Install-Package ImageProcessor</p></blockquote><p>并非专业前端的我开始觉得 html 标签的尺寸应该就是整个页面的尺寸了，所以有了如下的代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">GetElementImage</span>(<span class="params"><span class="keyword">this</span> RemoteWebDriver driver, IWebElement element</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    driver.Manage().Window.Size = driver.FindElementByTagName(<span class="string">"html"</span>).Size;</span><br><span class="line">    <span class="keyword">var</span> photoBytes = driver.GetScreenshot().AsByteArray;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> inStream = <span class="keyword">new</span> MemoryStream(photoBytes))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> outStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> imageFactory = <span class="keyword">new</span> ImageFactory(<span class="literal">true</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                imageFactory.Load(inStream)</span><br><span class="line">                    .Crop(<span class="keyword">new</span> Rectangle(element.Location, element.Size))</span><br><span class="line">                    .Save(outStream);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Image.FromStream(outStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在测试过程中发现并非如此，具体测试页面为 “Selenium 的维基百科关键词主页”<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VsZW5pdW1fKHNvZnR3YXJlKQ==" title="https://en.wikipedia.org/wiki/Selenium_(software)">https://en.wikipedia.org/wiki/Selenium_(software)<i class="fa fa-external-link"></i></span><br>调用代码：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">pictureBox1.Image =</span><br><span class="line">                chromeDriver.GetElementImage(</span><br><span class="line">                    chromeDriver.FindElementByXPath(<span class="string">@"//*[@id=""footer-copyrightico""]/a/img"</span>));</span><br></pre></td></tr></table></figure><p><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180711115157926.png" alt></p><p>调用代码中的 XPath 命中的标签为页面底部的维基百科 logo 图片，调试信息可知，该标签的 Y 坐标远大于 Html 标签的 Height ，故 Html 的尺寸应该和页面实际尺寸并不完全吻合。</p><p>居然不对？！<br><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180712120904055.png" alt></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwODE2ODc5" title="https://www.zhihu.com/question/20816879">查询资料大法：<i class="fa fa-external-link"></i></span></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//页面尺寸</span></span><br><span class="line"><span class="keyword">var</span> pageWidth = Math.max(</span><br><span class="line">     document.body.scrollWidth,</span><br><span class="line">     document.documentElement.scrollWidth,</span><br><span class="line">     document.body.offsetWidth, </span><br><span class="line">     document.documentElement.offsetWidth,</span><br><span class="line">     document.documentElement.clientWidth</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pageHeight = Math.max(</span><br><span class="line">     document.body.scrollHeight,</span><br><span class="line">     document.documentElement.scrollHeight,</span><br><span class="line">     document.body.offsetHeight, </span><br><span class="line">     document.documentElement.offsetHeight,</span><br><span class="line">     document.documentElement.clientHeight</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>于是我决定改用执行 JS 代码来获取页面实际尺寸：<br>封装 JS 执行方法：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T Execute&lt;T&gt;(<span class="keyword">this</span> IWebDriver driver, <span class="keyword">string</span> script) </span><br><span class="line">            =&gt; (T)((IJavaScriptExecutor)driver).ExecuteScript(script);</span><br></pre></td></tr></table></figure><p>获取实际尺寸</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> height = driver.Execute&lt;<span class="keyword">long</span>&gt;(<span class="string">"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);"</span>);</span><br><span class="line"><span class="keyword">var</span> width = driver.Execute&lt;<span class="keyword">long</span>&gt;(<span class="string">"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);"</span>);</span><br></pre></td></tr></table></figure><p>使用新思路重新封装方法</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">GetElementImage</span>(<span class="params"><span class="keyword">this</span> RemoteWebDriver driver, IWebElement element</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//driver.Manage().Window.Size = driver.FindElementByTagName("html").Size;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> height = driver.Execute&lt;<span class="keyword">long</span>&gt;(<span class="string">"return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);"</span>);</span><br><span class="line">    <span class="keyword">var</span> width = driver.Execute&lt;<span class="keyword">long</span>&gt;(<span class="string">"return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);"</span>);</span><br><span class="line"></span><br><span class="line">    driver.Manage().Window.Size = <span class="keyword">new</span> Size((<span class="keyword">int</span>)width + <span class="number">100</span>, (<span class="keyword">int</span>)height + <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> photoBytes = driver.GetScreenshot().AsByteArray;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> inStream = <span class="keyword">new</span> MemoryStream(photoBytes))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> outStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> imageFactory = <span class="keyword">new</span> ImageFactory(<span class="literal">true</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                imageFactory.Load(inStream)</span><br><span class="line">                    .Crop(<span class="keyword">new</span> Rectangle(element.Location, element.Size))</span><br><span class="line">                    .Save(outStream);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Image.FromStream(outStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行结果如下：<br><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180712120513778.png" alt></p><p>成功！</p><p><img src="https://qiniucdn.wayneshao.com/20180711213420950/20180712120712325.png" alt></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>selenium</tag>
        <tag>full page screenshot</tag>
        <tag>全页面截图</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】1.项目结构搭建及单个类在各个层次中的实现</title>
    <url>/posts/21959.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>新人刚开始学习ASP.NET MVC，若有不足之处希望能得到您的指点，不胜感激！</p><a id="more"></a><h2 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h2><p>先来一张项目的层级结构图:<br><img src="https://qiniucdn.wayneshao.com/20180218213243/20180218093427987.png" alt><br>Model：模型层，主要是各种类型、枚举以及ORM框架，框架完成数据库和实体类的映射。项目中选用了微软的开源ORM框架 EntityFramework 6.0 （以下简称EF），数据库则选择了微软的轻量级数据库SQL Server Compact 4.0本地数据库（简称Compact），Compact对EF支持比较完美，又属于文档型数据库，部署起来比较简洁。</p><ul><li><p><strong><em>DAL</em></strong>：<strong>数据访问层</strong>，主要是对数据库的操作层，为业务逻辑层或表示层提供数据服务。</p></li><li><p><strong><em>IDAL</em></strong>：<strong>数据访问接口层</strong>，是数据访问层的接口，降低耦合。</p></li><li><p><strong><em>DALFactory</em></strong>：<strong>数据会话层</strong>，封装了所有数据操作类实例的创建，将数据访问层与业务逻辑层解耦。</p></li><li><p><strong><em>BLL</em></strong>：<strong>业务逻辑层</strong>，主要负责对数据层的操作，把一些数据层的操作进行组合以完成业务的需要。</p></li><li><p><strong><em>IBLL</em></strong>：<strong>业务逻辑接口层</strong>，业务逻辑层的接口，降低耦合。</p></li><li><p><strong><em>WebApp</em></strong>：<strong>表现层</strong>，是一个ASP.NET MVC项目，完成具体网站的实现。</p></li><li><p><strong><em>Common</em></strong>：<strong>通用层</strong>，用来存放一些工具类。</p></li></ul><p>下面是各个层级之间具体的实现，首先创建以 项目名.层级名 命名的各个层次，除WebApp层为ASP.NET MVC项目外，其余均创建为类库项目。<br><img src="https://qiniucdn.wayneshao.com/20180218213243/20180218093803742.png" alt></p><h2 id="各层级搭建"><a href="#各层级搭建" class="headerlink" title="各层级搭建"></a>各层级搭建</h2><h3 id="模型层的构建"><a href="#模型层的构建" class="headerlink" title="模型层的构建"></a>模型层的构建</h3><p>先建立模型层，新建ASP.NET 实体数据模型，关联到已经设计好的数据库，EF自动完成模型类的创建。<br><img src="https://qiniucdn.wayneshao.com/20180218213243/20180218093918538.png" alt></p><h3 id="数据访问层的构建"><a href="#数据访问层的构建" class="headerlink" title="数据访问层的构建"></a>数据访问层的构建</h3><p>DAL层中，我们首先需要一个方法来获取单例的EF数据操纵上下文对象，以保证每个用户访问时只有使用一个上下文对象对数据库进行操作。DbContextFactory.cs</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Messaging;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DAL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbContextFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 负责创建EF数据操作上下文实例,必须保证线程内唯一</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbContext <span class="title">CreateContext</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DbContext dbContext = (DbContext)CallContext.GetData(<span class="string">"dbContext"</span>);</span><br><span class="line">            <span class="keyword">if</span> (dbContext != <span class="literal">null</span>) <span class="keyword">return</span> dbContext;</span><br><span class="line">            dbContext = <span class="keyword">new</span> PMSEntities();</span><br><span class="line">            CallContext.SetData(<span class="string">"dbContext"</span>, dbContext);</span><br><span class="line">            <span class="keyword">return</span> dbContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为User类创建DAL层，实现查询、分页查询、增加、删除和修改这五个基本的方法：UserDAL.cs</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DAL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">UserDal</span> </span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">public</span> DbContext DbEntities = DbContextFactory.CreateContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 查询过滤</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="whereLamada"&gt;</span>过滤条件Lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IQueryable&lt;UserDal&gt; <span class="title">LoadEntities</span>(<span class="params">System.Linq.Expressions.Expression&lt;Func&lt;UserDal, <span class="keyword">bool</span>&gt;&gt; whereLamada</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> DbEntities.Set&lt;UserDal&gt;().Where(whereLamada);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分页查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="TS"&gt;</span>排序类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageIndex"&gt;</span>查询的页码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageSize"&gt;</span>每页显示的数目<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="totalCount"&gt;</span>符合条件的总行数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="whereLambda"&gt;</span>过滤条件Lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="orderbyLambda"&gt;</span>排序Lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isAsc"&gt;</span>排序方向<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IQueryable&lt;UserDal&gt; LoadPageEntities&lt;TS&gt;(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;UserDal, <span class="keyword">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;UserDal, TS&gt;&gt; orderbyLambda, <span class="keyword">bool</span> isAsc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = DbEntities.Set&lt;UserDal&gt;().Where(whereLambda);</span><br><span class="line">            totalCount = temp.Count();</span><br><span class="line">            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - <span class="number">1</span>) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - <span class="number">1</span>) * pageSize).Take(pageSize);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 删除数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>待删数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>删除结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">DeleteEntity</span>(<span class="params">UserDal entity</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DbEntities.Entry(entity).State = EntityState.Deleted;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 编辑数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>待编辑数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>编辑结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">EditEntity</span>(<span class="params">UserDal entity</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DbEntities.Entry(entity).State = EntityState.Modified;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 添加数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>待添加数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>已添加数据<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserDal <span class="title">AddEntity</span>(<span class="params">UserDal entity</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            entity = DbEntities.Set&lt;UserDal&gt;().Add(entity);</span><br><span class="line">            <span class="keyword">return</span> entity;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：这里的增删改操作并不即时进行，而是在封装在数据会话层中，以实现工作单元模式，提高数据库的操作效率。</p><p>考虑到每个类都需要实现相同的数据操作，我们可以将以上方法封装到一个泛型基类中，各类型只需要继承泛型基类就可以实现以上方法：BaseDal.cs</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DAL</span></span><br><span class="line">&#123;</span><br><span class="line">    public class BaseDal&lt;T&gt; where T:class ,new()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> DbContext DbEntities = DbContextFactory.CreateContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 查询过滤</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="whereLamada"&gt;</span>过滤条件Lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IQueryable&lt;T&gt; <span class="title">LoadEntities</span>(<span class="params">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLamada</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> DbEntities.Set&lt;T&gt;().Where(whereLamada);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分页查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="TS"&gt;</span>排序类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageIndex"&gt;</span>查询的页码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageSize"&gt;</span>每页显示的数目<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="totalCount"&gt;</span>符合条件的总行数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="whereLambda"&gt;</span>过滤条件Lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="orderbyLambda"&gt;</span>排序Lambda表达式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isAsc"&gt;</span>排序方向<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体集合<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;TS&gt;(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalCount, System.Linq.Expressions.Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLambda, System.Linq.Expressions.Expression&lt;Func&lt;T, TS&gt;&gt; orderbyLambda, <span class="keyword">bool</span> isAsc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = DbEntities.Set&lt;T&gt;().Where(whereLambda);</span><br><span class="line">            totalCount = temp.Count();</span><br><span class="line">            temp = isAsc ? temp.OrderBy(orderbyLambda).Skip((pageIndex - <span class="number">1</span>) * pageSize).Take(pageSize) : temp.OrderByDescending(orderbyLambda).Skip((pageIndex - <span class="number">1</span>) * pageSize).Take(pageSize);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 删除数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>待删数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>删除结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">DeleteEntity</span>(<span class="params">T entity</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DbEntities.Entry(entity).State = EntityState.Deleted;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 编辑数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>待编辑数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>编辑结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">EditEntity</span>(<span class="params">T entity</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DbEntities.Entry(entity).State = EntityState.Modified;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 添加数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span>待添加数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>已添加数据<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">AddEntity</span>(<span class="params">T entity</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            entity = DbEntities.Set&lt;T&gt;().Add(entity);</span><br><span class="line">            <span class="comment">//DbEntities.SaveChanges();</span></span><br><span class="line">            <span class="keyword">return</span> entity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDal继承BaseDal</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DAL</span></span><br><span class="line">&#123;</span><br><span class="line">    public partial class UserDal : BaseDal&lt;User&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据访问接口层的构建"><a href="#数据访问接口层的构建" class="headerlink" title="数据访问接口层的构建"></a>数据访问接口层的构建</h3><p>然后我们建立相应的IbaseDal接口和IUserDal接口，并且使UserDal类实现IUserDal接口<br>IBaseDal：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IDAL</span></span><br><span class="line">&#123;</span><br><span class="line">    public interface IBaseDal&lt;T&gt; where T:class,new()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">IQueryable&lt;T&gt; <span class="title">LoadEntities</span>(<span class="params">System.Linq.Expressions.Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLamada</span>)</span>;</span><br><span class="line"></span><br><span class="line">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalCount,</span><br><span class="line">            System.Linq.Expressions.Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLambda,</span><br><span class="line">            System.Linq.Expressions.Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class="keyword">bool</span> isAsc);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">DeleteEntity</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">EditEntity</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">T <span class="title">AddEntity</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IUserDal：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IDAL</span></span><br><span class="line">&#123;</span><br><span class="line">    public partial interface IUserDal:IBaseDal&lt;User&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDal实现IUserDal接口：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">public partial class UserDal : BaseDal&lt;User&gt;,IUserDal</span><br></pre></td></tr></table></figure><h3 id="数据会话层的构建"><a href="#数据会话层的构建" class="headerlink" title="数据会话层的构建"></a>数据会话层的构建</h3><p>抽象工厂类AbstractFactory：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DALFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//读取保存在配置文件中的程序集名称与命名空间名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> AssemblyPath = ConfigurationManager.AppSettings[<span class="string">"AssemblyPath"</span>];</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> NameSpace = ConfigurationManager.AppSettings[<span class="string">"NameSpace"</span>];</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取UserDal的实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserDal <span class="title">CreateUserInfoDal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> fullClassName = NameSpace + <span class="string">".UserInfoDal"</span>;</span><br><span class="line">            <span class="keyword">return</span> CreateInstance(fullClassName) <span class="keyword">as</span> IUserDal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 通过反射获得程序集中某类型的实例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="className"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">object</span> <span class="title">CreateInstance</span>(<span class="params"><span class="keyword">string</span> className</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> assembly = Assembly.Load(AssemblyPath);</span><br><span class="line">            <span class="keyword">return</span> assembly.CreateInstance(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据会话类DbSession：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"><span class="keyword">using</span> PMS.DAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DALFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DbSession</span>:<span class="title">IDbSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> DbContext Db</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> DbContextFactory.CreateContext(); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> IUserDal _userDal;</span><br><span class="line">        <span class="keyword">public</span> IUserDal UserDal</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _userDal ?? (_userDal = AbstractFactory.CreateUserInfoDal()); &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _userDal = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 工作单元模式，统一保存数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">SaveChanges</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.SaveChanges() &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务逻辑层的构建"><a href="#业务逻辑层的构建" class="headerlink" title="业务逻辑层的构建"></a>业务逻辑层的构建</h3><p>业务类基类BaseService</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"><span class="keyword">using</span> PMS.DALFactory;</span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.BLL</span></span><br><span class="line">&#123;</span><br><span class="line">    public abstract class BaseService&lt;T&gt; where T:class,new()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> IDbSession CurrentDbSession</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> DbSession();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> IBaseDal&lt;T&gt; CurrentDal &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SetCurrentDal</span>(<span class="params"></span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">BaseService</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           SetCurrentDal();<span class="comment">//子类一定要实现抽象方法，以指明当前类的子类类型。</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 查询过滤</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="whereLambda"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> IQueryable&lt;T&gt; <span class="title">LoadEntities</span>(<span class="params">Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLambda</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> CurrentDal.LoadEntities(whereLambda);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 分页</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="s"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageIndex"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="pageSize"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="totalCount"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="whereLambda"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="orderbyLambda"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isAsc"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalCount, Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLambda,</span><br><span class="line">           Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class="keyword">bool</span> isAsc)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> CurrentDal.LoadPageEntities&lt;s&gt;(pageIndex, pageSize, <span class="keyword">out</span> totalCount, whereLambda, orderbyLambda, isAsc);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 删除</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">DeleteEntity</span>(<span class="params">T entity</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           CurrentDal.DeleteEntity(entity);</span><br><span class="line">           <span class="keyword">return</span> CurrentDbSession.SaveChanges();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 编辑</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">EditEntity</span>(<span class="params">T entity</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           CurrentDal.EditEntity(entity);</span><br><span class="line">           <span class="keyword">return</span> CurrentDbSession.SaveChanges();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 添加数据</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="entity"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> T <span class="title">AddEntity</span>(<span class="params">T entity</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           CurrentDal.AddEntity(entity);</span><br><span class="line">           CurrentDbSession.SaveChanges();</span><br><span class="line">           <span class="keyword">return</span> entity;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService类：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> PMS.IBLL;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.BLL</span></span><br><span class="line">&#123;</span><br><span class="line">    public partial class UserService : BaseService&lt;User&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetCurrentDal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CurrentDal = CurrentDbSession.UserDal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务逻辑接口层的构建"><a href="#业务逻辑接口层的构建" class="headerlink" title="业务逻辑接口层的构建"></a>业务逻辑接口层的构建</h3><p>直接建立对应的接口并使用UserService类实现IUserService接口</p><p>IBaseService接口：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IBLL</span></span><br><span class="line">&#123;</span><br><span class="line">    public interface IBaseService&lt;T&gt; where T : class,new()</span><br><span class="line">    &#123;</span><br><span class="line">        IDbSession CurrentDbSession &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        IBaseDal&lt;T&gt; CurrentDal &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SetCurrentDal</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="function">IQueryable&lt;T&gt; <span class="title">LoadEntities</span>(<span class="params">Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLambda</span>)</span>;</span><br><span class="line"></span><br><span class="line">        IQueryable&lt;T&gt; LoadPageEntities&lt;s&gt;(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize, <span class="keyword">out</span> <span class="keyword">int</span> totalCount,</span><br><span class="line">            Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; whereLambda,</span><br><span class="line">            Expression&lt;Func&lt;T, s&gt;&gt; orderbyLambda, <span class="keyword">bool</span> isAsc);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">DeleteEntity</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">EditEntity</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">        <span class="function">T <span class="title">AddEntity</span>(<span class="params">T entity</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IUserService接口:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IBLL</span></span><br><span class="line">&#123;</span><br><span class="line">    public partial interface IUserService:IBaseService&lt;User&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用UserService类实现IUserService接口:</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">public partial class UserService : BaseService&lt;User&gt;, IUserService</span><br></pre></td></tr></table></figure><p>以上我们就完成了整个框架中关于User类的各层次的实现。</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】2.使用T4模板生成其他类的具体实现</title>
    <url>/posts/18563.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在前篇中我们已经将User类中的代码做了具体的实现，但仍然有多个实体类未实现，以后可能还会增加新的数据表，数据表结构也有可能发生变化，所以我们使用T4模板来完成类的生成，这样就算数据库表发生了改变，也会自动根据改变后的实体对类进行重新生成。</p><a id="more"></a><h3 id="DAL层"><a href="#DAL层" class="headerlink" title="DAL层"></a>DAL层</h3><p>下面是数据访问层的T4模板文件 Dal.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//EF实体文件在项目中的路径</span></span><br><span class="line"><span class="keyword">string</span> inputFile = <span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line">&lt;<span class="meta">#//这里为命名空间部分，手动更改为相应的命名空间 #&gt;</span></span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DAL</span></span><br><span class="line">&#123;</span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="comment">// Emit Entity Types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");</span></span><br><span class="line">    <span class="comment">//BeginNamespace(namespaceName, code);    </span></span><br><span class="line"><span class="meta">#&gt;        </span></span><br><span class="line">    public partial class &lt;#=entity.Name#&gt;Dal :BaseDal&lt;&lt;#=entity.Name#&gt;&gt;,I&lt;#=entity.Name#&gt;Dal</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将EF实体文件路径、命名空间更改为对应的值时，<strong>Ctrl+S</strong> 保存，即可生成对应的其他类型的数据访问类</p><p>其他层中也大同小异，只需要做对应的更改即可，下面我将提供相应的代码。</p><h3 id="IDAL层"><a href="#IDAL层" class="headerlink" title="IDAL层"></a>IDAL层</h3><p>IDal.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt; </span></span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> inputFile = <span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IDAL</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="comment">// Emit Entity Types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");</span></span><br><span class="line">    <span class="comment">//BeginNamespace(namespaceName, code);    </span></span><br><span class="line"><span class="meta">#&gt;    </span></span><br><span class="line">    public partial interface I&lt;#=entity.Name#&gt;Dal :IBaseDal&lt;&lt;#=entity.Name#&gt;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDbSession.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> inputFile = <span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IDAL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">interface</span> <span class="title">IDbSession</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="comment">// Emit Entity Types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");</span></span><br><span class="line">    <span class="comment">//BeginNamespace(namespaceName, code);    </span></span><br><span class="line"><span class="meta">#&gt;    </span></span><br><span class="line">        I&lt;<span class="meta">#=entity.Name#&gt;Dal &lt;#=entity.Name#&gt;Dal&#123;get;set;&#125;</span></span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DALFactory层"><a href="#DALFactory层" class="headerlink" title="DALFactory层"></a>DALFactory层</h3><p>SimpleDalFactory.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> inputFile =<span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> SW.OA.IDAL;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SW.OA.DALFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">   </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;    </span><br><span class="line"><span class="meta">#&gt;        </span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> I&lt;<span class="meta">#=entity.Name#&gt;Dal Create&lt;#=entity.Name#&gt;Dal()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">string</span> fullClassName = NameSpace + <span class="string">".&lt;#=entity.Name#&gt;Dal"</span>;</span><br><span class="line">          <span class="keyword">return</span> CreateInstance(fullClassName) <span class="keyword">as</span> I&lt;<span class="meta">#=entity.Name#&gt;Dal;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DbSession.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> inputFile = <span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line"><span class="keyword">using</span> PMS.DAL;</span><br><span class="line"><span class="keyword">using</span> PMS.IDAL;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.DALFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">DBSession</span> : <span class="title">IDBSession</span></span><br><span class="line">    &#123;</span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="comment">// Emit Entity Types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");</span></span><br><span class="line">    <span class="comment">//BeginNamespace(namespaceName, code);    </span></span><br><span class="line"><span class="meta">#&gt;    </span></span><br><span class="line">        <span class="keyword">private</span> I&lt;<span class="meta">#=entity.Name#&gt;Dal _&lt;#=entity.Name#&gt;Dal;</span></span><br><span class="line">        <span class="keyword">public</span> I&lt;<span class="meta">#=entity.Name#&gt;Dal &lt;#=entity.Name#&gt;Dal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(_&lt;<span class="meta">#=entity.Name#&gt;Dal == null)</span></span><br><span class="line">                &#123;</span><br><span class="line">                    _&lt;<span class="meta">#=entity.Name#&gt;Dal = AbstractFactory.Create&lt;#=entity.Name#&gt;Dal();</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _&lt;<span class="meta">#=entity.Name#&gt;Dal;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _&lt;<span class="meta">#=entity.Name#&gt;Dal = value; &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BLL层"><a href="#BLL层" class="headerlink" title="BLL层"></a>BLL层</h3><p>Service.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> inputFile = <span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line"><span class="keyword">using</span> PMS.IBLL;</span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.BLL</span></span><br><span class="line">&#123;</span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="comment">// Emit Entity Types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");</span></span><br><span class="line">    <span class="comment">//BeginNamespace(namespaceName, code);    </span></span><br><span class="line"><span class="meta">#&gt;    </span></span><br><span class="line">    public partial class &lt;#=entity.Name#&gt;Service :BaseService&lt;&lt;#=entity.Name#&gt;&gt;,I&lt;#=entity.Name#&gt;Service</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetCurrentDal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CurrentDal = <span class="keyword">this</span>.CurrentDbSession.&lt;<span class="meta">#=entity.Name#&gt;Dal;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IBLL层"><a href="#IBLL层" class="headerlink" title="IBLL层"></a>IBLL层</h3><p>IService.tt</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language="C#" debug="false" hostspecific="true"#&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ include file="EF.Utility.CS.ttinclude"#&gt;&lt;#@</span></span><br><span class="line"> output extension=<span class="string">".cs"</span><span class="meta">#&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"></span><br><span class="line">CodeGenerationTools code = <span class="keyword">new</span> CodeGenerationTools(<span class="keyword">this</span>);</span><br><span class="line">MetadataLoader loader = <span class="keyword">new</span> MetadataLoader(<span class="keyword">this</span>);</span><br><span class="line">CodeRegion region = <span class="keyword">new</span> CodeRegion(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">MetadataTools ef = <span class="keyword">new</span> MetadataTools(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> inputFile = <span class="string">@"..\\PMS.Model\\PMS.edmx"</span>;</span><br><span class="line"></span><br><span class="line">EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);</span><br><span class="line"><span class="keyword">string</span> namespaceName = code.VsNamespaceSuggestion();</span><br><span class="line"></span><br><span class="line">EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PMS.Model;</span><br><span class="line"><span class="keyword">using</span> PMS.Model.Search;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.IBLL</span></span><br><span class="line">&#123;</span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line"><span class="comment">// Emit Entity Types</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (EntityType entity <span class="keyword">in</span> ItemCollection.GetItems&lt;EntityType&gt;().OrderBy(e =&gt; e.Name))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");</span></span><br><span class="line">    <span class="comment">//BeginNamespace(namespaceName, code);    </span></span><br><span class="line"><span class="meta">#&gt;    </span></span><br><span class="line">    public partial interface I&lt;#=entity.Name#&gt;Service : IBaseService&lt;&lt;#=entity.Name#&gt;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;   </span><br><span class="line">&lt;<span class="meta">#&#125;#&gt;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们完成了基本框架内容的填充。</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】4.使用Log4Net来进行错误日志的记录</title>
    <url>/posts/43794.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在Web应用运行过程中，我们难免会遇到程序运行异常，这个时候我们就应该将异常信息记录下来，以便开发人员和维护人员对异常原因进行还原，对异常原因进行修复。在ASP.NET平台中进行日志记录的组件也有很多，如Log4Net、CommonLogging等，我们这里选用Log4Net进行异常日志的记录。</p><a id="more"></a><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>在ASP.NET MVC中提供了一个全局的异常处理过滤器：HandleErrorAttribute，可以通过该过滤器捕获异常信息。</p><p>我们在Models文件夹下新建类型Log4ExceptionAttribute，继承HandleErrorAttribute类，同时重写OnException方法来捕获异常数据：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Log4ExceptionAttribute</span>:<span class="title">HandleErrorAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 重写OnException方法来捕获异常数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filterContext"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnException(filterContext);</span><br><span class="line">            <span class="comment">//捕获当前异常数据</span></span><br><span class="line">            <span class="keyword">var</span> ex = filterContext.Exception;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建过滤器后我们还需要在Global文件中调用的RegisterGlobalFilters方法中完成自己定义异常处理过滤的注册。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> PMS.WebApp.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span>(<span class="params">GlobalFilterCollection filters</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//filters.Add(new HandleErrorAttribute());</span></span><br><span class="line">            filters.Add(<span class="keyword">new</span> Log4ExceptionAttribute());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列处理"><a href="#队列处理" class="headerlink" title="队列处理"></a>队列处理</h2><p>考虑到多用户并发操作时可能产生的问题，我们需要新建一个队列来进行异常信息的暂存，同时开辟一个线程专门对队列中的异常信息进行处理。</p><p>在Log4ExceptionAttribute类中新建一个静态的异常类型的队列，在发生异常后，程序自动触发OnException方法，方法中将当前的异常信息入队后，跳转到错误页面。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Log4ExceptionAttribute</span>:<span class="title">HandleErrorAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Queue&lt;Exception&gt; Exceptions=<span class="keyword">new</span> Queue&lt;Exception&gt;();</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 重写OnException方法来捕获异常数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filterContext"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext filterContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnException(filterContext);</span><br><span class="line">            <span class="comment">//捕获当前异常数据</span></span><br><span class="line">            <span class="keyword">var</span> ex = filterContext.Exception;</span><br><span class="line">            <span class="comment">//将异常数据入队</span></span><br><span class="line">            Exceptions.Enqueue(ex);</span><br><span class="line">            <span class="comment">//跳转到错误页面</span></span><br><span class="line">            filterContext.HttpContext.Response.Redirect(<span class="string">"/Error.html"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Log4Net的配置是在应用程序配置文件中进行的，我们先在配置文件中进行Log4Net的配置。Log4Net需要配置的节点位置和SpringNet完全相同，首先需要在configSessions中新增子节点,然后在configuration节点中增加log4net节点完成具体配置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"entityFramework"</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"</span> <span class="attr">requirePermission</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--↓Log4Net配置↓--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"log4net"</span> <span class="attr">type</span>=<span class="string">"log4net.Config.Log4NetConfigurationSectionHandler, log4net"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--↑Log4Net配置↑--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--↓Spring.Net配置↓--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sectionGroup</span> <span class="attr">name</span>=<span class="string">"spring"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"context"</span> <span class="attr">type</span>=<span class="string">"Spring.Context.Support.MvcContextHandler, Spring.Web.Mvc4"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sectionGroup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--↑Spring.Net配置↑--&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--↓Spring.Net配置↓--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span> <span class="attr">uri</span>=<span class="string">"file://~/Config/controllers.xml"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span> <span class="attr">uri</span>=<span class="string">"file://~/Config/services.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">spring</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--↑Spring.Net配置↑--&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--↓Log4Net配置↓--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Set root logger level to ERROR and its appenders --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ALL"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SysAppender"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Print only messages of level DEBUG or above in the packages --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"WebLogger"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SysAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender,log4net"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">value</span>=<span class="string">"App_Data/"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"AppendToFile"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"RollingStyle"</span> <span class="attr">value</span>=<span class="string">"Date"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"DatePattern"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;quot;</span>Logs_<span class="symbol">&amp;quot;</span>yyyyMMdd<span class="symbol">&amp;quot;</span>.txt<span class="symbol">&amp;quot;</span>"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"StaticLogFileName"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout,log4net"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d [%t] %-5p %c - %m%n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Header"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;#13;</span><span class="symbol">&amp;#10;</span>----------------------header--------------------------<span class="symbol">&amp;#13;</span><span class="symbol">&amp;#10;</span>"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Footer"</span> <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;#13;</span><span class="symbol">&amp;#10;</span>----------------------footer--------------------------<span class="symbol">&amp;#13;</span><span class="symbol">&amp;#10;</span>"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleApp"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.ConsoleAppender,log4net"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout,log4net"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d [%t] %-5p %c - %m%n"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--↑Log4Net配置↑--&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><p>在配置文件中可以对日志记录的信息、格式、文件名等作出具体的配置，下面是配置信息的详解</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"log4net"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"log4net.Config.Log4NetConfigurationSectionHandler,log4net"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--站点日志配置部分--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--如果没有定义LEVEL的值，则缺省为DEBUG--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileAppender"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"RollingFileAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日志文件名开头--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">file</span> <span class="attr">value</span>=<span class="string">"c:\Log\TestLog4net.TXT"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--多线程时采用最小锁定--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lockingModel</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.FileAppender+MinimalLock"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">datePattern</span> <span class="attr">value</span>=<span class="string">"(yyyyMMdd)"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--是否追加到文件,默认为true，通常无需设置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appendToFile</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--变换的形式为日期，这种情况下每天只有一个日志--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--此时MaxSizeRollBackups和maximumFileSize的节点设置没有意义--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;rollingStyle value="Date"/&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--变换的形式为日志大小--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这种情况下MaxSizeRollBackups和maximumFileSize的节点设置才有意义--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RollingStyle</span> <span class="attr">value</span>=<span class="string">"Size"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--每天记录的日志文件个数，与maximumFileSize配合使用--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MaxSizeRollBackups</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--每个日志文件的最大大小--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--可用的单位:KB|MB|GB--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--不要使用小数,否则会一直写入当前日志--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maximumFileSize</span> <span class="attr">value</span>=<span class="string">"2MB"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--日志格式--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%date [%t]%-5p %c - %m%n"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Global文件中的Application_Start方法中开启一个线程，用于将队列中的错误信息写入日志文件。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Web.Http;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> System.Web.Optimization;</span><br><span class="line"><span class="keyword">using</span> System.Web.Routing;</span><br><span class="line"><span class="keyword">using</span> log4net;</span><br><span class="line"><span class="keyword">using</span> PMS.WebApp.Models;</span><br><span class="line"><span class="keyword">using</span> Spring.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 注意: 有关启用 IIS6 或 IIS7 经典模式的说明，</span></span><br><span class="line">    <span class="comment">// 请访问 http://go.microsoft.com/?LinkId=9394801</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MvcApplication</span> : <span class="title">SpringMvcApplication</span><span class="comment">//HttpApplication</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            log4net.Config.XmlConfigurator.Configure();<span class="comment">//读取Log4Net配置信息</span></span><br><span class="line">            AreaRegistration.RegisterAllAreas();</span><br><span class="line"></span><br><span class="line">            WebApiConfig.Register(GlobalConfiguration.Configuration);</span><br><span class="line">            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">            RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">            BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启一个线程,扫描异常信息队列.</span></span><br><span class="line">            <span class="keyword">var</span> filePath = Server.MapPath(<span class="string">"/Log/"</span>);</span><br><span class="line">            ThreadPool.QueueUserWorkItem((a) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//判断队列中是否有数据</span></span><br><span class="line">                    <span class="keyword">if</span> (Log4ExceptionAttribute.Exceptions.Any())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//出队一条异常信息</span></span><br><span class="line">                        <span class="keyword">var</span> ex = Log4ExceptionAttribute.Exceptions.Dequeue();</span><br><span class="line">                        <span class="comment">//若异常信息不为空</span></span><br><span class="line">                        <span class="keyword">if</span> (ex == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">//将异常信息写入到日志文件中</span></span><br><span class="line">                        <span class="keyword">var</span> logger = LogManager.GetLogger(<span class="string">"errorMsg"</span>);</span><br><span class="line">                        logger.Error(ex.ToString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//若异常信息队列为空，则线程休息三秒</span></span><br><span class="line">                        Thread.Sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, filePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功完成错误日志的配置。</p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>Log4Net</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码仓库】命名风格转化</title>
    <url>/posts/9410.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>一个关于将名称在不同命名风格之间转换的帮助类</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 系统扩展 - 命名风格</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> LetterUpperLowerDistance = <span class="string">'a'</span> - <span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExpiredCache&lt;<span class="keyword">string</span>, NamingStyle&gt; _cache = <span class="keyword">new</span> ExpiredCache&lt;<span class="keyword">string</span>, NamingStyle&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取字符串的命名规范</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 支持类型：UpperCamel、lowerCamel、AllUpper、AllLower、FirstUpper</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="name"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="prefix"&gt;</span>前缀<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="suffix"&gt;</span>后缀<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NamingStyle <span class="title">GetNamingStyle</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name, <span class="keyword">string</span> prefix = <span class="string">""</span>, <span class="keyword">string</span> suffix = <span class="string">""</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_cache.ContainsKey(name))</span><br><span class="line">            <span class="keyword">return</span> _cache[name];</span><br><span class="line">        <span class="comment">//移除前后缀</span></span><br><span class="line">        name = name.RemovePrefix(prefix);</span><br><span class="line">        name = name.RemoveSuffix(suffix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> type = GetNamingStyle(name);</span><br><span class="line">        _cache[name] = type;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> NamingStyle <span class="title">GetNamingStyle</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果含有下划线字符</span></span><br><span class="line">        <span class="keyword">if</span> (name.Contains(<span class="string">"_"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.IsRegexMatch(<span class="string">"^[A-Z_]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline))</span><br><span class="line">                <span class="keyword">return</span> NamingStyle.AllUpper;</span><br><span class="line">            <span class="keyword">if</span> (name.IsRegexMatch(<span class="string">"^[a-z_]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline))</span><br><span class="line">                <span class="keyword">return</span> NamingStyle.AllLower;</span><br><span class="line">            <span class="keyword">if</span> (name[<span class="number">0</span>].IsUpperLetter() &amp;&amp; name.Substring(<span class="number">1</span>).IsRegexMatch(<span class="string">"^[a-z_]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline))</span><br><span class="line">                <span class="keyword">return</span> NamingStyle.FirstUpper;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> NamingStyle.NonStandard;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.IsRegexMatch(<span class="string">"^[A-Z]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline))</span><br><span class="line">            <span class="keyword">return</span> NamingStyle.AllUpper;</span><br><span class="line">        <span class="keyword">if</span> (name.IsRegexMatch(<span class="string">"^[a-z]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline))</span><br><span class="line">            <span class="keyword">return</span> NamingStyle.AllLower;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!name.IsRegexMatch(<span class="string">"^[A-Za-z]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline)) <span class="keyword">return</span> NamingStyle.NonStandard;</span><br><span class="line">        <span class="keyword">return</span> name[<span class="number">0</span>].IsUpperLetter() ? NamingStyle.UpperCamel : NamingStyle.LowerCamel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 转换字符串命名规范</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 支持类型：UpperCamel、lowerCamel、AllUpper、AllLower、FirstUpper</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="name"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="toStyle"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="prefix"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="suffix"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ConvertNamingStyle</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name, NamingStyle toStyle, <span class="keyword">string</span> prefix = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">string</span> suffix = <span class="string">""</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//移除前后缀</span></span><br><span class="line">        name = name.RemovePrefix(prefix);</span><br><span class="line">        name = name.RemoveSuffix(suffix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.GetNamingStyle() == NamingStyle.NonStandard)</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> toName = toStyle <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            NamingStyle.LowerCamel =&gt; name.ToLowerCamel(),</span><br><span class="line">            NamingStyle.AllUpper =&gt; name.ToAllUpper(),</span><br><span class="line">            NamingStyle.AllLower =&gt; name.ToAllLower(),</span><br><span class="line">            NamingStyle.FirstUpper =&gt; name.ToFirstUpper(),</span><br><span class="line">            NamingStyle.UpperCamel =&gt; name.ToUpperCamel(),</span><br><span class="line">            _ =&gt; name</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$"<span class="subst">&#123;prefix&#125;</span><span class="subst">&#123;toName&#125;</span><span class="subst">&#123;suffix&#125;</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//UpperCamel To Other</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">UpperCamelToLowerCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsUpperCamel() ? name : (<span class="keyword">char</span>)(name[<span class="number">0</span>] + LetterUpperLowerDistance) + name.Substring(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">UpperCamelToAllUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsUpperCamel() ? name : <span class="keyword">string</span>.Join(<span class="string">'_'</span>, name.UpperCamelSplit().Select(letter =&gt; letter.ToUpper()));</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">UpperCamelToAllLower</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsUpperCamel() ? name : <span class="keyword">string</span>.Join(<span class="string">'_'</span>, name.UpperCamelSplit().Select(letter =&gt; letter.ToLower()));</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">UpperCamelToFirstUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsUpperCamel() ? name : name[<span class="number">0</span>] + name.UpperCamelToAllLower().Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LowerCamel To Other</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">LowerCamelToUpperCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsLowerCamel() ? name : (<span class="keyword">char</span>)(name[<span class="number">0</span>] - LetterUpperLowerDistance) + name.Substring(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">LowerCamelToAllUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsLowerCamel() ? name : name.LowerCamelToUpperCamel().UpperCamelToAllUpper();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">LowerCamelToAllLower</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsLowerCamel() ? name : name.LowerCamelToUpperCamel().UpperCamelToAllLower();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">LowerCamelToFirstUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsLowerCamel() ? name : (<span class="keyword">char</span>)(name[<span class="number">0</span>] - LetterUpperLowerDistance) + name.LowerCamelToUpperCamel().UpperCamelToFirstUpper().Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AllUpper To Other</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllUpperToUpperCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllUpper() ? name : <span class="keyword">string</span>.Join(<span class="string">""</span>, name.Split(<span class="string">'_'</span>).Select(ToFirstUpperStyle));</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllUpperToLowerCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllUpper() ? name : (<span class="keyword">char</span>)(name[<span class="number">0</span>] + LetterUpperLowerDistance) + name.AllUpperToUpperCamel().Substring(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllUpperToAllLower</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllUpper() ? name : name.ToLower();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllUpperToFirstUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllUpper() ? name : name[<span class="number">0</span>] + name.AllUpperToAllLower().Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AllLower To Other</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllLowerToUpperCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllLower() ? name : <span class="keyword">string</span>.Join(<span class="string">""</span>, name.Split(<span class="string">'_'</span>).Select(ToFirstUpperStyle));</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllLowerToLowerCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllLower() ? name : name[<span class="number">0</span>] + name.AllLowerToUpperCamel().Substring(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllLowerToAllUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllLower() ? name : name.ToUpper();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AllLowerToFirstUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsAllLower() ? name : (<span class="keyword">char</span>)(name[<span class="number">0</span>] - LetterUpperLowerDistance) + name.Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FirstUpper To Other</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">FirstUpperToUpperCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsFirstUpper() ? name : <span class="keyword">string</span>.Join(<span class="string">""</span>, name.Split(<span class="string">'_'</span>).Select(ToFirstUpperStyle));</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">FirstUpperToLowerCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsFirstUpper() ? name : (<span class="keyword">char</span>)(name[<span class="number">0</span>] + LetterUpperLowerDistance) + name.FirstUpperToUpperCamel().Substring(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">FirstUpperToAllUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsFirstUpper() ? name : name.ToUpper();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">FirstUpperToAllLower</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; !name.IsFirstUpper() ? name : name.ToLower();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Orthers To X</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ToUpperCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name.GetNamingStyle() <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            NamingStyle.LowerCamel =&gt; name.LowerCamelToUpperCamel(),</span><br><span class="line">            NamingStyle.AllUpper =&gt; name.AllUpperToUpperCamel(),</span><br><span class="line">            NamingStyle.AllLower =&gt; name.AllLowerToUpperCamel(),</span><br><span class="line">            NamingStyle.FirstUpper =&gt; name.FirstUpperToUpperCamel(),</span><br><span class="line">            _ =&gt; name</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ToLowerCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name.GetNamingStyle() <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            NamingStyle.UpperCamel =&gt; name.UpperCamelToLowerCamel(),</span><br><span class="line">            NamingStyle.AllUpper =&gt; name.AllUpperToLowerCamel(),</span><br><span class="line">            NamingStyle.AllLower =&gt; name.AllLowerToLowerCamel(),</span><br><span class="line">            NamingStyle.FirstUpper =&gt; name.FirstUpperToLowerCamel(),</span><br><span class="line">            _ =&gt; name</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ToAllUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name.GetNamingStyle() <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            NamingStyle.UpperCamel =&gt; name.UpperCamelToAllUpper(),</span><br><span class="line">            NamingStyle.LowerCamel =&gt; name.LowerCamelToAllUpper(),</span><br><span class="line">            NamingStyle.AllLower =&gt; name.AllLowerToAllUpper(),</span><br><span class="line">            NamingStyle.FirstUpper =&gt; name.FirstUpperToAllUpper(),</span><br><span class="line">            _ =&gt; name</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ToAllLower</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name.GetNamingStyle() <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            NamingStyle.UpperCamel =&gt; name.UpperCamelToAllLower(),</span><br><span class="line">            NamingStyle.LowerCamel =&gt; name.LowerCamelToAllLower(),</span><br><span class="line">            NamingStyle.AllUpper =&gt; name.AllUpperToAllLower(),</span><br><span class="line">            NamingStyle.FirstUpper =&gt; name.FirstUpperToAllLower(),</span><br><span class="line">            _ =&gt; name</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ToFirstUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> name.GetNamingStyle() <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            NamingStyle.UpperCamel =&gt; name.UpperCamelToFirstUpper(),</span><br><span class="line">            NamingStyle.LowerCamel =&gt; name.LowerCamelToFirstUpper(),</span><br><span class="line">            NamingStyle.AllUpper =&gt; name.AllUpperToFirstUpper(),</span><br><span class="line">            NamingStyle.AllLower =&gt; name.AllLowerToFirstUpper(),</span><br><span class="line">            _ =&gt; name</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsUpperLetter</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">char</span> letter</span>)</span> =&gt; letter &gt;= <span class="string">'A'</span> &amp;&amp; letter &lt;= <span class="string">'Z'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsLowerLetter</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">char</span> letter</span>)</span> =&gt; letter &gt;= <span class="string">'a'</span> &amp;&amp; letter &lt;= <span class="string">'z'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsLetter</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">char</span> letter</span>)</span> =&gt; letter.IsLowerLetter() || letter.IsUpperLetter();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">RemovePrefix</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> str, <span class="keyword">string</span> prefix</span>)</span> =&gt; str.StartsWith(prefix) ? str.Substring(prefix.Length) : str;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">RemoveSuffix</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> str, <span class="keyword">string</span> suffix</span>)</span> =&gt; str.EndsWith(suffix) ? str.Substring(<span class="number">0</span>, str.Length - suffix.Length) : str;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsUpperCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; name.GetNamingStyle() == NamingStyle.UpperCamel;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsLowerCamel</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; name.GetNamingStyle() == NamingStyle.LowerCamel;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsAllUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; name.GetNamingStyle() == NamingStyle.AllUpper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsAllLower</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; name.GetNamingStyle() == NamingStyle.AllLower;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsFirstUpper</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span> =&gt; name.GetNamingStyle() == NamingStyle.FirstUpper;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">string</span>&gt; <span class="title">UpperCamelSplit</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> Regex.Matches(name, <span class="string">"[A-Z][a-z]+"</span>, RegexOptions.Compiled | RegexOptions.Singleline))</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> match.Value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ToFirstUpperStyle</span>(<span class="params"><span class="keyword">string</span> word</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!word.IsRegexMatch(<span class="string">"^[a-z]+$"</span>, RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase))</span><br><span class="line">            <span class="keyword">return</span> word;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newLetter = <span class="keyword">new</span> <span class="keyword">char</span>[word.Length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; word.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (word[i].IsLowerLetter())</span><br><span class="line">                &#123;</span><br><span class="line">                    newLetter[i] = (<span class="keyword">char</span>)(word[i] - LetterUpperLowerDistance);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    newLetter[i] = word[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (word[i].IsUpperLetter())</span><br><span class="line">                &#123;</span><br><span class="line">                    newLetter[i] = (<span class="keyword">char</span>)(word[i] + LetterUpperLowerDistance);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    newLetter[i] = word[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">string</span>(newLetter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">ToUpper</span>(<span class="params"><span class="keyword">char</span> c</span>)</span> =&gt; c.IsLowerLetter() ? (<span class="keyword">char</span>)(c - LetterUpperLowerDistance) : c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">ToLower</span>(<span class="params"><span class="keyword">char</span> c</span>)</span> =&gt; c.IsUpperLetter() ? (<span class="keyword">char</span>)(c + LetterUpperLowerDistance) : c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NamingStyle</span><br><span class="line">&#123;</span><br><span class="line">    NonStandard,</span><br><span class="line">    UpperCamel,</span><br><span class="line">    LowerCamel,</span><br><span class="line">    AllUpper,</span><br><span class="line">    AllLower,</span><br><span class="line">    FirstUpper</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码仓库</category>
      </categories>
      <tags>
        <tag>风格转化</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>一木禾网盘文件下载地址批量获取实现</title>
    <url>/posts/19316.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>流程清晰之后，我们就可以制作软件来对网盘地址链接批量处理得到下载链接。</p><a id="more"></a><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>我们的整个操作流程类似模拟浏览器操作，最好的解决方法其实是使用Selenium直接操作浏览器抓取。不过这方面我还没什么研究，就直接用最近发现的<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZpc2hsZWUubmV0Lw==" title="https://blog.fishlee.net/">木鱼<i class="fa fa-external-link"></i></span>大牛的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljY2Zpc2gvZnNsaWIubmV0d29yaw==" title="https://github.com/iccfish/fslib.network">FSLib.Network<i class="fa fa-external-link"></i></span> 库来实现。这个类库是实现了HTTP访问过程中对Cookie的自动处理，在大多数情况下都可以模拟浏览器。<br>使用nuget在项目中安装 <strong>FSLib.Network</strong> 包:</p><blockquote><p><strong>Install-Package network.fishlee.net</strong></p></blockquote><h2 id="获取流程实现"><a href="#获取流程实现" class="headerlink" title="获取流程实现"></a>获取流程实现</h2><p>下面来依据流程完成通过页面地址来获得文件下载连接的方法：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">GetDownLoadUrl</span>(<span class="params"><span class="keyword">string</span> fileUrl</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//建立HTTP客户端</span></span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    <span class="comment">//用于接收验证码</span></span><br><span class="line">    StringBuilder Result;</span><br><span class="line">    <span class="comment">//验证码的字符数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes;</span><br><span class="line">    <span class="comment">//用于接收下载链接</span></span><br><span class="line">    <span class="keyword">string</span> downPath = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="comment">//通过正则匹配到链接中的 fileid</span></span><br><span class="line">   <span class="keyword">int</span> id = Convert.ToInt32(Extract(fileUrl, <span class="string">"\\d&#123;7,&#125;"</span>));</span><br><span class="line">    <span class="comment">//有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测</span></span><br><span class="line">    fileUrl = fileUrl.Replace(<span class="string">"ymhwp"</span>, <span class="string">"yimuhe"</span>);</span><br><span class="line">    <span class="comment">//创建展示页面请求</span></span><br><span class="line">    <span class="keyword">var</span> filecontext = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">await</span> filecontext.SendTask();</span><br><span class="line">    <span class="keyword">if</span> (filecontext.IsValid())<span class="comment">//如果请求成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//替换链接中的fil为down，使其成为下载页面地址</span></span><br><span class="line">        fileUrl = fileUrl.Replace(<span class="string">"file"</span>, <span class="string">"down"</span>);</span><br><span class="line">        <span class="comment">//创建下载页面请求</span></span><br><span class="line">         <span class="keyword">var</span> downcontext = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class="line">        <span class="keyword">await</span> downcontext.SendTask();</span><br><span class="line">        <span class="keyword">if</span> (downcontext.IsValid())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//设置初始返回值为0，表示验证码输入错误，即识别失败</span></span><br><span class="line">            <span class="keyword">int</span> response = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (response == <span class="number">0</span>)<span class="comment">//循环识别，直到识别成功</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建验证码图片请求</span></span><br><span class="line">                   <span class="keyword">var</span> vcode = client.Create&lt;Byte[]&gt;(HttpMethod.Get, <span class="string">"http://www.yimuhe.com/n_downcode.php"</span>);</span><br><span class="line">                <span class="keyword">await</span> vcode.SendTask();</span><br><span class="line">                <span class="keyword">if</span> (vcode.IsValid())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//将获取到的验证码图片存入字节数组中</span></span><br><span class="line">                    bytes = vcode.Result;</span><br><span class="line">                    Result = <span class="keyword">new</span> StringBuilder(<span class="string">'\0'</span>, <span class="number">256</span>);</span><br><span class="line">                    <span class="comment">//识别验证码</span></span><br><span class="line">                    GetVcodeFromBuffer(<span class="number">1</span>, bytes, bytes.Length, Result);</span><br><span class="line">                    <span class="comment">//创建检验验证码请求</span></span><br><span class="line">                    <span class="keyword">var</span> resp = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Post,</span><br><span class="line">                        <span class="string">"http://www.yimuhe.com/n_downcode.php"</span>, data: <span class="string">"action=yz&amp;id="</span> + id + <span class="string">"&amp;code="</span> + Result);</span><br><span class="line">                    <span class="keyword">await</span> resp.SendTask();</span><br><span class="line">                    <span class="keyword">if</span> (resp.IsValid())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//返回验证码校验值、成功为1失败为0</span></span><br><span class="line">                        response = Convert.ToInt32(resp.Result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建获取下载地址请求</span></span><br><span class="line">            <span class="keyword">var</span> h1 = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Post,</span><br><span class="line">                    <span class="string">"http://www.yimuhe.com/n_dd.php?file_id="</span> + id + <span class="string">"&amp;ser=99"</span>, refer: <span class="string">"http://www.yimuhe.com/down-2546737.html"</span>, data: id.ToString());</span><br><span class="line">            <span class="keyword">await</span> h1.SendTask();</span><br><span class="line">            <span class="keyword">if</span> (h1.IsValid())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//通过HtmlAgilityPack库完成html解析，获得下载地址</span></span><br><span class="line">                   HtmlDocument html = <span class="keyword">new</span> HtmlDocument();</span><br><span class="line">                html.LoadHtml(h1.Result);</span><br><span class="line">                downPath = html.GetElementbyId(<span class="string">"downs"</span>).Attributes[<span class="string">"href"</span>].Value;</span><br><span class="line">                tBAfter.AppendText(downPath + NewLine);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量获取实现"><a href="#批量获取实现" class="headerlink" title="批量获取实现"></a>批量获取实现</h3><p>我的批量实现思路为将要获取的链接加入一个队列当中，线程从队头移出数据一条进行地址获取，获取成功不进行操作，失败则将地址添回到队尾。循环获取直到队列为空。另一个队列储存正在处理的数据，仅当两个线程均为空时才会陆续结束所有线程。线程执行的方法在上边的方法基础上又做了一些修改。</p><p>具体实现代码如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">GetDownLoadUrl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当链接队列和正在处理队列存在不为空时，循环执行以下代码</span></span><br><span class="line">    <span class="keyword">while</span> (_pathList.Count &gt; <span class="number">0</span> || _pathReady.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当链接队列不为空时</span></span><br><span class="line">        <span class="keyword">if</span> (_pathList.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从队头取出一条数据</span></span><br><span class="line">            <span class="keyword">string</span> fileUrl = _pathList[<span class="number">0</span>];</span><br><span class="line">            _pathList.RemoveAt(<span class="number">0</span>);</span><br><span class="line">            _pathReady.Add(fileUrl);</span><br><span class="line">            <span class="comment">//建立HTTP客户端</span></span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">            <span class="comment">//用于接收验证码</span></span><br><span class="line">            StringBuilder Result;</span><br><span class="line">            <span class="comment">//验证码的字符数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes;</span><br><span class="line">            <span class="comment">//用于接收下载链接</span></span><br><span class="line">            <span class="keyword">string</span> downPath = <span class="keyword">string</span>.Empty;</span><br><span class="line">            <span class="comment">//通过正则匹配到链接中的 fileid</span></span><br><span class="line">            <span class="keyword">int</span> id = Convert.ToInt32(Extract(fileUrl, <span class="string">"\\d&#123;7,&#125;"</span>));</span><br><span class="line">            <span class="comment">//有时会出现一级域名为ymhwp的情况，这里先做一下替换，以防不测</span></span><br><span class="line">            fileUrl = fileUrl.Replace(<span class="string">"ymhwp"</span>, <span class="string">"yimuhe"</span>);</span><br><span class="line">            <span class="comment">//创建展示页面请求</span></span><br><span class="line">            <span class="keyword">var</span> filecontext = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            <span class="keyword">await</span> filecontext.SendTask();</span><br><span class="line">            <span class="keyword">if</span> (filecontext.IsValid())<span class="comment">//如果请求成功</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//替换链接中的fil为down，使其成为下载页面地址</span></span><br><span class="line">                fileUrl = fileUrl.Replace(<span class="string">"file"</span>, <span class="string">"down"</span>);</span><br><span class="line">                <span class="comment">//创建下载页面请求</span></span><br><span class="line">                <span class="keyword">var</span> downcontext = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Get, fileUrl);</span><br><span class="line">                <span class="keyword">await</span> downcontext.SendTask();</span><br><span class="line">                <span class="keyword">if</span> (downcontext.IsValid())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//设置初始返回值为0，表示验证码输入错误，即识别失败</span></span><br><span class="line">                    <span class="keyword">int</span> response = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (response == <span class="number">0</span>)<span class="comment">//循环识别，直到识别成功</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//创建验证码图片请求</span></span><br><span class="line">                        <span class="keyword">var</span> vcode = client.Create&lt;Byte[]&gt;(HttpMethod.Get, <span class="string">"http://www.yimuhe.com/n_downcode.php"</span>);</span><br><span class="line">                        <span class="keyword">await</span> vcode.SendTask();</span><br><span class="line">                        <span class="keyword">if</span> (vcode.IsValid())</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//将获取到的验证码图片存入字节数组中</span></span><br><span class="line">                            bytes = vcode.Result;</span><br><span class="line">                            Result = <span class="keyword">new</span> StringBuilder(<span class="string">'\0'</span>, <span class="number">256</span>);</span><br><span class="line">                            <span class="comment">//识别验证码</span></span><br><span class="line">                            GetVcodeFromBuffer(<span class="number">1</span>, bytes, bytes.Length, Result);</span><br><span class="line">                            <span class="comment">//创建检验验证码请求</span></span><br><span class="line">                            <span class="keyword">var</span> resp = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Post,</span><br><span class="line">                                <span class="string">"http://www.yimuhe.com/n_downcode.php"</span>, data: <span class="string">"action=yz&amp;id="</span> + id + <span class="string">"&amp;code="</span> + Result);</span><br><span class="line">                            <span class="keyword">await</span> resp.SendTask();</span><br><span class="line">                            <span class="keyword">if</span> (resp.IsValid())</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="comment">//返回验证码校验值、成功为1失败为0</span></span><br><span class="line">                                response = Convert.ToInt32(resp.Result);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//创建获取下载地址请求</span></span><br><span class="line">                    <span class="keyword">var</span> h1 = client.Create&lt;<span class="keyword">string</span>&gt;(HttpMethod.Post,</span><br><span class="line">                            <span class="string">"http://www.yimuhe.com/n_dd.php?file_id="</span> + id + <span class="string">"&amp;ser=99"</span>, refer: <span class="string">"http://www.yimuhe.com/down-2546737.html"</span>, data: id.ToString());</span><br><span class="line">                    <span class="keyword">await</span> h1.SendTask();</span><br><span class="line">                    <span class="keyword">if</span> (h1.IsValid())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//通过HtmlAgilityPack库完成html解析，获得下载地址</span></span><br><span class="line">                        HtmlDocument html = <span class="keyword">new</span> HtmlDocument();</span><br><span class="line">                        html.LoadHtml(h1.Result);</span><br><span class="line">                        downPath = html.GetElementbyId(<span class="string">"downs"</span>).Attributes[<span class="string">"href"</span>].Value;</span><br><span class="line">                        <span class="comment">//将获取到的地址显示到界面</span></span><br><span class="line">                        tBAfter.AppendText(downPath + NewLine);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果downPath为空，则请求失败</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(downPath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将请求链接添回队尾</span></span><br><span class="line">                _pathList.Add(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//处理完毕，移出当前处理队列</span></span><br><span class="line">            _pathReady.Remove(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文旨在抛砖引玉，因为一些都懂得的原因，就不给出成品的下载地址了，有需要的童鞋可以自行完成。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net 使用GeoIP2获取IP的地理位置信息</title>
    <url>/posts/20420.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWF4bWluZC5jb20vemgvZ2VvaXAyLXNlcnZpY2VzLWFuZC1kYXRhYmFzZXM=" title="https://www.maxmind.com/zh/geoip2-services-and-databases">GeoIP® 数据库&amp;服务：业界领先的IP智能<i class="fa fa-external-link"></i></span>，MaxMind GeoIP2 服务能识别互联网用户的地点位置与其他特征，应用广泛，包括个性化定制内容、诈欺检测、广告定向、网站流量分析、执行规定、地理目标定位、地理围栏定位 (geo-fencing)以及数字版权管理。</p><a id="more"></a><p><img src="https://qiniucdn.wayneshao.com/20180221212532042/20180221093334576.png" alt></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1heG1pbmQuY29tLzIwMTQvMDEvMzEvd2hvLWhhcy10aGUtbW9zdC1hY2N1cmF0ZS1pcC1nZW9sb2NhdGlvbi1kYXRhLw==" title="https://blog.maxmind.com/2014/01/31/who-has-the-most-accurate-ip-geolocation-data/">MaxMind是IP地理定位准确性的行业领导者.<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWF4bWluZC5jb20vemgvZ2VvaXAyLWNpdHktZGF0YWJhc2UtYWNjdXJhY3k=" title="https://www.maxmind.com/zh/geoip2-city-database-accuracy">按照不同国家，比较MaxMind GeoIP2数据服务与数据库的准确性<i class="fa fa-external-link"></i></span>。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWF4bWluZC5jb20vemgvZ2VvaXAyLXByZWNpc2lvbi1zZXJ2aWNlcw==" title="https://www.maxmind.com/zh/geoip2-precision-services">GeoIP2精准版服务<i class="fa fa-external-link"></i></span>向您提供本公司最准确的数据，为您省去在您服务器上托管数据或部署更新项目的麻烦。 我们的精准版服务产品可通过API或文件手动上传方式使用，为您提供最新的数据。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWF4bWluZC5jb20vemgvZ2VvaXAyLWRhdGFiYXNlcw==" title="https://www.maxmind.com/zh/geoip2-databases">MaxMind的GeoIP2数据库<i class="fa fa-external-link"></i></span>为大容量环境提供IP智能数据。 通过在本地托管我们的数据库，您既可避免网络延迟问题，又可避免按每次查询计价的费用。</p><p>GeoIP 分为商业版和免费版，免费版比商业版精度差了许多，经测试对于城市定位确实有差距，能否接受看你的精度要求！</p><h2 id="免费版介绍"><a href="#免费版介绍" class="headerlink" title="免费版介绍"></a>免费版介绍</h2><p>免费版仅有数据库服务，目前有两个版本<br>1、GeoLite 版本，网上流传较广，数据库类型为 dat 格式文件，库文件较小、未进行精准度测试且不再更新。<br>2、GeoLite2版本，目前最新版本，数据库文件为 mmdb 格式或csv格式。<br><span class="exturl" data-url="aHR0cHM6Ly9kZXYubWF4bWluZC5jb20vZ2VvaXAvZ2VvaXAyL2dlb2lwMi1jaXR5LWNvdW50cnktY3N2LWRhdGFiYXNlcy8=" title="https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/"><strong>GeoLite2 特性</strong><i class="fa fa-external-link"></i></span></p><h2 id="下载数据库"><a href="#下载数据库" class="headerlink" title="下载数据库"></a>下载数据库</h2><h3 id="GeoIP数据库"><a href="#GeoIP数据库" class="headerlink" title="GeoIP数据库"></a>GeoIP数据库</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWF4bWluZC5jb20vemgvZ2VvaXAyLWRhdGFiYXNlcw==" title="https://www.maxmind.com/zh/geoip2-databases"><strong>GeoIP2数据库</strong><i class="fa fa-external-link"></i></span><br>本地维护的数据库适用于容量大、延迟性低的环境，购买机构可以获取站点许可证，即可在公司内进行无限次使用。</p><ul><li>对于选定地点，含有简体中文、法文、德文、日文、西班牙文、巴西葡萄牙文及俄文版的本地化名称</li><li>为多数常用语言提供开放源代码的API</li><li>可提供自动更新</li></ul><h3 id="GeoLite2-开源数据库"><a href="#GeoLite2-开源数据库" class="headerlink" title="GeoLite2 开源数据库"></a>GeoLite2 开源数据库</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubWF4bWluZC5jb20vZ2VvaXAvZ2VvaXAyL2dlb2xpdGUyLw==" title="https://dev.maxmind.com/geoip/geoip2/geolite2/">GeoLite2数据库<i class="fa fa-external-link"></i></span>是 GeoLite 数据库的开源版，GeoIP2的免费版，准确率稍低于付费版，其前身 GeoLite 现行数据库已<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1heG1pbmQuY29tL2dlb2xpdGUtbGVnYWN5LWRpc2NvbnRpbnVhdGlvbi1ub3RpY2Uv" title="https://support.maxmind.com/geolite-legacy-discontinuation-notice/">于 2019年1月2日 不再提供服务<i class="fa fa-external-link"></i></span>)</p><h4 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h4><p>MaxMind 不为免费数据库提供技术支持。如果您有问题请前往<span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvZ2VvaXA=" title="http://stackoverflow.com/questions/tagged/geoip">stackoverflow’s GeoIP问题以及解答。<i class="fa fa-external-link"></i></span></p><h4 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h4><p>GeoLite2使用的是开源许可证：<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzMuMC9kZWVkLnpoX1RX" title="https://creativecommons.org/licenses/by-sa/3.0/deed.zh_TW">Creative Commons Attribution-ShareAlike 3.0 Unported License<i class="fa fa-external-link"></i></span>. 您只需要在页面中添加如下代码即可：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">该产品使用MaxMind公司的GeoLite2数据，可以在此获取：</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.maxmind.com"</span>&gt;</span>http://www.maxmind.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure><p>官方提供 <span class="exturl" data-url="aHR0cDovL3d3dy5tYXhtaW5kLmNvbS96aC9nZW9saXRlMi1kZXZlbG9wZXItcGFja2FnZQ==" title="http://www.maxmind.com/zh/geolite2-developer-package">二次销售许可证<i class="fa fa-external-link"></i></span>.</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><table><thead><tr><th align="center">数据库</th><th align="center"><span class="exturl" data-url="aHR0cHM6Ly9tYXhtaW5kLmdpdGh1Yi5pby9NYXhNaW5kLURCLw==" title="https://maxmind.github.io/MaxMind-DB/">MaxMind DB<i class="fa fa-external-link"></i></span> 二进制格式, 压缩</th><th align="center"><span class="exturl" data-url="aHR0cHM6Ly9kZXYubWF4bWluZC5jb20vZ2VvaXAvZ2VvaXAyL2dlb2lwMi1jaXR5LWNvdW50cnktY3N2LWRhdGFiYXNlcy8=" title="https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/">CSV 格式<i class="fa fa-external-link"></i></span>, 压缩</th></tr></thead><tbody><tr><td align="center">GeoLite2 城市</td><td align="center"><span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNpdHkudGFyLmd6" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz">Download<i class="fa fa-external-link"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNpdHkudGFyLmd6Lm1kNQ==" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz.md5">md5 校验<i class="fa fa-external-link"></i></span>)</td><td align="center"><span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNpdHktQ1NWLnppcA==" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip">Download<i class="fa fa-external-link"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNpdHktQ1NWLnppcC5tZDU=" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-City-CSV.zip.md5">md5 校验<i class="fa fa-external-link"></i></span>)</td></tr><tr><td align="center">GeoLite2 国家</td><td align="center"><span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNvdW50cnkudGFyLmd6" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz">Download<i class="fa fa-external-link"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNvdW50cnkudGFyLmd6Lm1kNQ==" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz.md5">md5 校验<i class="fa fa-external-link"></i></span>)</td><td align="center"><span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNvdW50cnktQ1NWLnppcA==" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip">Download<i class="fa fa-external-link"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUNvdW50cnktQ1NWLnppcC5tZDU=" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country-CSV.zip.md5">md5 校验<i class="fa fa-external-link"></i></span>)</td></tr><tr><td align="center">GeoLite2 ASN（<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFOCU4NyVBQSVFNiVCMiVCQiVFNyVCMyVCQiVFNyVCQiU5Rg==" title="https://zh.wikipedia.org/zh-cn/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F">自治系统<i class="fa fa-external-link"></i></span>）</td><td align="center"><span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUFTTi50YXIuZ3o=" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz">Download<i class="fa fa-external-link"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUFTTi50YXIuZ3oubWQ1" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz.md5">md5 校验<i class="fa fa-external-link"></i></span>)</td><td align="center"><span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUFTTi1DU1Yuemlw" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN-CSV.zip">Download<i class="fa fa-external-link"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly9nZW9saXRlLm1heG1pbmQuY29tL2Rvd25sb2FkL2dlb2lwL2RhdGFiYXNlL0dlb0xpdGUyLUFTTi1DU1YuemlwLm1kNQ==" title="https://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN-CSV.zip.md5">md5 校验<i class="fa fa-external-link"></i></span>)</td></tr></tbody></table><h4 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h4><p>你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXYubWF4bWluZC5jb20vemgtaGFucy9nZW9pcC9nZW9pcHVwZGF0ZS8=" title="https://dev.maxmind.com/zh-hans/geoip/geoipupdate/">GeoIP 更新<i class="fa fa-external-link"></i></span>来自动更新您的数据库。</p><h4 id="MaxMind-API-接口"><a href="#MaxMind-API-接口" class="headerlink" title="MaxMind API 接口"></a>MaxMind API 接口</h4><p>参阅 <span class="exturl" data-url="aHR0cHM6Ly9kZXYubWF4bWluZC5jb20vemgtaGFucy9nZW9pcC9nZW9pcDIvZG93bmxvYWRhYmxlLyNNYXhNaW5kX0FQSXM=" title="https://dev.maxmind.com/zh-hans/geoip/geoip2/downloadable/#MaxMind_APIs">GeoIP2 可下载数据库<i class="fa fa-external-link"></i></span> 以下载API。付费版和免费版API互通。</p><h2 id="Net调用MaxMind-API"><a href="#Net调用MaxMind-API" class="headerlink" title=".Net调用MaxMind API"></a>.Net调用MaxMind API</h2><p>.Net调用MaxMind API可以使用官方发布的<span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL01heE1pbmQuR2VvSVAyLw==" title="https://www.nuget.org/packages/MaxMind.GeoIP2/">nuget包<i class="fa fa-external-link"></i></span>，官方提供了<span class="exturl" data-url="aHR0cDovL21heG1pbmQuZ2l0aHViLmlvL0dlb0lQMi1kb3RuZXQv" title="http://maxmind.github.io/GeoIP2-dotnet/">文档<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21heG1pbmQvR2VvSVAyLWRvdG5ldA==" title="https://github.com/maxmind/GeoIP2-dotnet">源码地址<i class="fa fa-external-link"></i></span>。</p><h3 id="安装Nuget包"><a href="#安装Nuget包" class="headerlink" title="安装Nuget包"></a>安装Nuget包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Package MaxMind.GeoIP2</span><br></pre></td></tr></table></figure><h3 id="代码调用"><a href="#代码调用" class="headerlink" title="代码调用"></a>代码调用</h3><p>因GeoLite2只提供了City和Country两个数据库版本。<br>故只能进行这两种调用方式，调用方式非常简单</p><h4 id="City"><a href="#City" class="headerlink" title="City"></a>City</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> DatabaseReader(<span class="string">"GeoLite2-City.mmdb"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> city = reader.City(<span class="string">"65.49.134.29"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>city即为查询结果，结构如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"city"</span>: &#123;</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">5125591</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"Macedon"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"continent"</span>: &#123;</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"NA"</span>,</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">6255149</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"de"</span>: <span class="string">"Nordamerika"</span>,</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"North America"</span>,</span><br><span class="line">            <span class="string">"es"</span>: <span class="string">"Norteamérica"</span>,</span><br><span class="line">            <span class="string">"fr"</span>: <span class="string">"Amérique du Nord"</span>,</span><br><span class="line">            <span class="string">"ja"</span>: <span class="string">"北アメリカ"</span>,</span><br><span class="line">            <span class="string">"pt-BR"</span>: <span class="string">"América do Norte"</span>,</span><br><span class="line">            <span class="string">"ru"</span>: <span class="string">"Северная Америка"</span>,</span><br><span class="line">            <span class="string">"zh-CN"</span>: <span class="string">"北美洲"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"country"</span>: &#123;</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">6252001</span>,</span><br><span class="line">        <span class="string">"is_in_european_union"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"iso_code"</span>: <span class="string">"US"</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"de"</span>: <span class="string">"USA"</span>,</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"United States"</span>,</span><br><span class="line">            <span class="string">"es"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"fr"</span>: <span class="string">"États-Unis"</span>,</span><br><span class="line">            <span class="string">"ja"</span>: <span class="string">"アメリカ合衆国"</span>,</span><br><span class="line">            <span class="string">"pt-BR"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"ru"</span>: <span class="string">"США"</span>,</span><br><span class="line">            <span class="string">"zh-CN"</span>: <span class="string">"美国"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"location"</span>: &#123;</span><br><span class="line">        <span class="string">"accuracy_radius"</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">"latitude"</span>: <span class="number">43.1089</span>,</span><br><span class="line">        <span class="string">"longitude"</span>: <span class="number">-77.3226</span>,</span><br><span class="line">        <span class="string">"metro_code"</span>: <span class="number">538</span>,</span><br><span class="line">        <span class="string">"time_zone"</span>: <span class="string">"America/New_York"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"maxmind"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"postal"</span>: &#123;</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"14502"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"registered_country"</span>: &#123;</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">6252001</span>,</span><br><span class="line">        <span class="string">"is_in_european_union"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"iso_code"</span>: <span class="string">"US"</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"de"</span>: <span class="string">"USA"</span>,</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"United States"</span>,</span><br><span class="line">            <span class="string">"es"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"fr"</span>: <span class="string">"États-Unis"</span>,</span><br><span class="line">            <span class="string">"ja"</span>: <span class="string">"アメリカ合衆国"</span>,</span><br><span class="line">            <span class="string">"pt-BR"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"ru"</span>: <span class="string">"США"</span>,</span><br><span class="line">            <span class="string">"zh-CN"</span>: <span class="string">"美国"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"represented_country"</span>: &#123;</span><br><span class="line">        <span class="string">"is_in_european_union"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"subdivisions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"geoname_id"</span>: <span class="number">5128638</span>,</span><br><span class="line">            <span class="string">"iso_code"</span>: <span class="string">"NY"</span>,</span><br><span class="line">            <span class="string">"names"</span>: &#123;</span><br><span class="line">                <span class="string">"de"</span>: <span class="string">"New York"</span>,</span><br><span class="line">                <span class="string">"en"</span>: <span class="string">"New York"</span>,</span><br><span class="line">                <span class="string">"es"</span>: <span class="string">"Nueva York"</span>,</span><br><span class="line">                <span class="string">"fr"</span>: <span class="string">"New York"</span>,</span><br><span class="line">                <span class="string">"ja"</span>: <span class="string">"ニューヨーク州"</span>,</span><br><span class="line">                <span class="string">"pt-BR"</span>: <span class="string">"Nova Iorque"</span>,</span><br><span class="line">                <span class="string">"ru"</span>: <span class="string">"Нью-Йорк"</span>,</span><br><span class="line">                <span class="string">"zh-CN"</span>: <span class="string">"纽约州"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"traits"</span>: &#123;</span><br><span class="line">        <span class="string">"ip_address"</span>: <span class="string">"66.66.66.66"</span>,</span><br><span class="line">        <span class="string">"is_anonymous"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_anonymous_proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_anonymous_vpn"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_hosting_provider"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_legitimate_proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_public_proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_satellite_provider"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_tor_exit_node"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中包含了比较详细的信息，有具体的经纬度。</p><h4 id="Country"><a href="#Country" class="headerlink" title="Country"></a>Country</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> DatabaseReader(<span class="string">"GeoLite2-Country.mmdb"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> country = reader.Country(<span class="string">"66.66.66.66"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>country即为查询结果，结构如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"continent"</span>: &#123;</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"NA"</span>,</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">6255149</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"de"</span>: <span class="string">"Nordamerika"</span>,</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"North America"</span>,</span><br><span class="line">            <span class="string">"es"</span>: <span class="string">"Norteamérica"</span>,</span><br><span class="line">            <span class="string">"fr"</span>: <span class="string">"Amérique du Nord"</span>,</span><br><span class="line">            <span class="string">"ja"</span>: <span class="string">"北アメリカ"</span>,</span><br><span class="line">            <span class="string">"pt-BR"</span>: <span class="string">"América do Norte"</span>,</span><br><span class="line">            <span class="string">"ru"</span>: <span class="string">"Северная Америка"</span>,</span><br><span class="line">            <span class="string">"zh-CN"</span>: <span class="string">"北美洲"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"country"</span>: &#123;</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">6252001</span>,</span><br><span class="line">        <span class="string">"is_in_european_union"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"iso_code"</span>: <span class="string">"US"</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"de"</span>: <span class="string">"USA"</span>,</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"United States"</span>,</span><br><span class="line">            <span class="string">"es"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"fr"</span>: <span class="string">"États-Unis"</span>,</span><br><span class="line">            <span class="string">"ja"</span>: <span class="string">"アメリカ合衆国"</span>,</span><br><span class="line">            <span class="string">"pt-BR"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"ru"</span>: <span class="string">"США"</span>,</span><br><span class="line">            <span class="string">"zh-CN"</span>: <span class="string">"美国"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"maxmind"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"registered_country"</span>: &#123;</span><br><span class="line">        <span class="string">"geoname_id"</span>: <span class="number">6252001</span>,</span><br><span class="line">        <span class="string">"is_in_european_union"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"iso_code"</span>: <span class="string">"US"</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;</span><br><span class="line">            <span class="string">"de"</span>: <span class="string">"USA"</span>,</span><br><span class="line">            <span class="string">"en"</span>: <span class="string">"United States"</span>,</span><br><span class="line">            <span class="string">"es"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"fr"</span>: <span class="string">"États-Unis"</span>,</span><br><span class="line">            <span class="string">"ja"</span>: <span class="string">"アメリカ合衆国"</span>,</span><br><span class="line">            <span class="string">"pt-BR"</span>: <span class="string">"Estados Unidos"</span>,</span><br><span class="line">            <span class="string">"ru"</span>: <span class="string">"США"</span>,</span><br><span class="line">            <span class="string">"zh-CN"</span>: <span class="string">"美国"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"represented_country"</span>: &#123;</span><br><span class="line">        <span class="string">"is_in_european_union"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"names"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"traits"</span>: &#123;</span><br><span class="line">        <span class="string">"ip_address"</span>: <span class="string">"66.66.66.66"</span>,</span><br><span class="line">        <span class="string">"is_anonymous"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_anonymous_proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_anonymous_vpn"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_hosting_provider"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_legitimate_proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_public_proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_satellite_provider"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"is_tor_exit_node"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>country数据库中的信息的详细程度较之city就差了很多，但数据库大小仅为city的 1/20，视使用场景来决定使用对应的数据库。</p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>IP</tag>
        <tag>GeoIP2</tag>
      </tags>
  </entry>
  <entry>
    <title>面试·网站后台开发工程师·总结</title>
    <url>/posts/61268.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>关于2018年3月9日面试某公司网站后台开发工程师的一些总结。</p><a id="more"></a><h2 id="面试问题总结"><a href="#面试问题总结" class="headerlink" title="面试问题总结"></a>面试问题总结</h2><p>　　面试官非常nice，可能是因为之前通过同学跟他有过一些间接交流，所以开场时问了我：“我让XXX告诉你去学习一下.NET Core，你学的怎么样了。”<br>　　瞬间整个人就不那么紧张了。之后面试官首先问了我一些我目前主要使用的C#桌面软件开发的一些知识，之后在逐渐的把问题转到.NET Core，从中可以感觉得出面试官对于基础知识即为擅长，问的问题大量的都是非常细节性的，由于我在.NET Core上并没有付出很多的学习时间，而且主要是“自定向下”的学习，主要学习怎么使用，这些细节就了解的不那么清楚了，所以整个面试确实有不少问题没能回答得上来。<br>　　下面是具体没能答上来问题的具体分析。</p><h3 id="桌面开发"><a href="#桌面开发" class="headerlink" title="桌面开发"></a>桌面开发</h3><h4 id="Winform-多线程状态下应该怎样保持界面响应"><a href="#Winform-多线程状态下应该怎样保持界面响应" class="headerlink" title="Winform 多线程状态下应该怎样保持界面响应"></a>Winform 多线程状态下应该怎样保持界面响应</h4><p>　　当时回答了可以使用.Net Framework 4.5版本以上支持的语法糖await\asnyc来进行多线程请求，或者是新开线程完成操作，或者使用Application.DoEvent()这样的函数强行保持界面响应。<br>　　当时应该是有些紧张，没有准确get到面试官真正想要问的问题，事后思考感觉面试官真正想问的应该是<a href="cjepod20f002mh8kbydftcdjw.html">使用委托解决方法的跨线程调用问题</a>这种类型的委托问题，所以这道题也算是没有回答好。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="数据库横表、纵表转换"><a href="#数据库横表、纵表转换" class="headerlink" title="数据库横表、纵表转换"></a>数据库横表、纵表转换</h4><p>　　这道题确实是忘记了大学学习的知识，也没反应过来横纵表转换到底是什么概念，下面直接写一个例子吧。</p><p><strong>横表结构: ** *</strong>Achievement***</p><blockquote><table><thead><tr><th align="center">ID</th><th align="center">姓名</th><th align="center">语文</th><th align="center">数学</th><th align="center">英语</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">张三</td><td align="center">80</td><td align="center">90</td><td align="center">70</td></tr><tr><td align="center">2</td><td align="center">李四</td><td align="center">90</td><td align="center">85</td><td align="center">95</td></tr><tr><td align="center">3</td><td align="center">王五</td><td align="center">88</td><td align="center">75</td><td align="center">90</td></tr></tbody></table></blockquote><p><strong>转换后的表结构</strong></p><blockquote><table><thead><tr><th align="center">ID</th><th align="center">姓名</th><th align="center">科目</th><th align="center">成绩</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">张三</td><td align="center">语文</td><td align="center">80</td></tr><tr><td align="center">2</td><td align="center">张三</td><td align="center">数学</td><td align="center">90</td></tr><tr><td align="center">3</td><td align="center">张三</td><td align="center">英语</td><td align="center">70</td></tr><tr><td align="center">4</td><td align="center">李四</td><td align="center">语文</td><td align="center">90</td></tr><tr><td align="center">5</td><td align="center">李四</td><td align="center">数学</td><td align="center">80</td></tr><tr><td align="center">6</td><td align="center">李四</td><td align="center">英语</td><td align="center">99</td></tr><tr><td align="center">7</td><td align="center">王五</td><td align="center">语文</td><td align="center">85</td></tr><tr><td align="center">8</td><td align="center">王五</td><td align="center">数学</td><td align="center">96</td></tr><tr><td align="center">9</td><td align="center">王五</td><td align="center">英语</td><td align="center">88</td></tr></tbody></table></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>　姓名,<span class="string">'语文'</span>　<span class="keyword">AS</span>　科目,语文　<span class="keyword">AS</span>　成绩　<span class="keyword">FROM</span>　Achievement　<span class="keyword">UNION</span>　<span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span>　姓名,<span class="string">'数学'</span>　<span class="keyword">AS</span>　科目,数学　<span class="keyword">AS</span>　成绩　<span class="keyword">FROM</span>　Achievement　<span class="keyword">UNION</span>　<span class="keyword">ALL</span>　</span><br><span class="line"><span class="keyword">SELECT</span>　姓名,<span class="string">'英语'</span>　<span class="keyword">AS</span>　科目,英语　<span class="keyword">AS</span>　成绩　<span class="keyword">FROM</span>　Achievement</span><br><span class="line"><span class="keyword">ORDER</span>　<span class="keyword">BY</span>　姓名,科目　<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p>　　下面题目中的一些.NET Core的细节，我会引用来自本人购买的 张剑桥 先生的《ASP.NET Core 跨平台开发从入门到实战》一书中的内容，如果希望获得更多的知识请直接在各大平台购买本书，若侵犯了您的权利，请联系删除。</p><h4 id="NET-Core-程序增加中间件在什么位置"><a href="#NET-Core-程序增加中间件在什么位置" class="headerlink" title=".NET Core 程序增加中间件在什么位置"></a>.NET Core 程序增加中间件在什么位置</h4><blockquote><p>　　在 ASP.NET Core 中，你可以使用中间件构建你的请求处理管道。ASP.NET Core 中间件为一个HttpContext 执行异步逻辑，然后按顺序调用下一个中间件或者直接终止请求。一般来说，要使用一个中间件，只需在Configure方法里调用 IApplicationBuilder 上一个对应的扩展方法即可。</p></blockquote><h4 id="静态文件访问开启"><a href="#静态文件访问开启" class="headerlink" title="静态文件访问开启"></a>静态文件访问开启</h4><blockquote><p>　　为了能够使用静态文件服务，必须配置中间件，把静态文件中间件加入到管道内。静态文件中间件可通过下述方法来配置：在项目中增加 Microsoft.AspNetCore.StaticFiles包依赖，然后从 Startup.Configure 中调用.UseStaticFiles扩展方法：</p></blockquote><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置使用Session"><a href="#配置使用Session" class="headerlink" title="配置使用Session"></a>配置使用Session</h4><p>　　与上面的静态文件相同，需要首先依赖 Microsoft.AspNetCore.Session 包，然后从Startup.Configure 中调用.UseSession方法。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EF-Core如何启用懒加载"><a href="#EF-Core如何启用懒加载" class="headerlink" title="EF Core如何启用懒加载"></a>EF Core如何启用懒加载</h4><p>EF6中是默认开启懒加载的，可以通过修改配置文件来进行修改，而到了EF Core中，则可以在 DbContext 的 OnConfiguring 方法中添加对 UseLazyLoadingProxies() 扩展方法调用即可。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WayneContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> sqlConnectionStringBuilder = <span class="keyword">new</span> SqlConnectionStringBuilder &#123;</span><br><span class="line">            DataSource = <span class="string">"****"</span>,</span><br><span class="line">            InitialCatalog = <span class="string">"Wayne"</span>,</span><br><span class="line">            UserID = <span class="string">"sa"</span>,</span><br><span class="line">            Password = <span class="string">"sa"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);</span><br><span class="line"></span><br><span class="line">        optionsBuilder.UseLazyLoadingProxies();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.OnConfiguring(optionsBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Asp-NET-Core的热部署是怎么实现的"><a href="#Asp-NET-Core的热部署是怎么实现的" class="headerlink" title="Asp.NET Core的热部署是怎么实现的"></a>Asp.NET Core的热部署是怎么实现的</h4><p>　　以MVC模板为例，其实是在 Program 类中的 CreateWebHostBuilder 方法中实现的。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TestCore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">                .UseStartup&lt;Startup&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　第十四行，WebHost.CreateDefaultBuilder(args)方法中巨硬封装了读取配置文件的操作。F12反编译转到源码。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   Initializes a new instance of the <span class="doctag">&lt;see cref="T:Microsoft.AspNetCore.Hosting.WebHostBuilder" /&gt;</span> class with pre-configured defaults.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   The following defaults are applied to the returned <span class="doctag">&lt;see cref="T:Microsoft.AspNetCore.Hosting.WebHostBuilder" /&gt;</span>:</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     use Kestrel as the web server and configure it using the application's configuration providers,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     set the <span class="doctag">&lt;see cref="P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath" /&gt;</span> to the result of <span class="doctag">&lt;see cref="M:System.IO.Directory.GetCurrentDirectory" /&gt;</span>,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     load <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /&gt;</span> from 'appsettings.json' and 'appsettings.[<span class="doctag">&lt;see cref="P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName" /&gt;</span>].json',</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     load <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /&gt;</span> from User Secrets when <span class="doctag">&lt;see cref="P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName" /&gt;</span> is 'Development' using the entry assembly,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     load <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /&gt;</span> from environment variables,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     load <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /&gt;</span> from supplied command line args,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     configures the <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /&gt;</span> to log to the console and debug output,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     enables IIS integration,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>     and enables the ability for frameworks to bind their options to their default configuration sections.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="args"&gt;</span>The command line args.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The initialized <span class="doctag">&lt;see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /&gt;</span>.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateDefaultBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IWebHostBuilder hostBuilder = <span class="keyword">new</span> WebHostBuilder().UseKestrel((Action&lt;WebHostBuilderContext, KestrelServerOptions&gt;)((builderContext, options) =&gt; options.Configure((IConfiguration)builderContext.Configuration.GetSection(<span class="string">"Kestrel"</span>)))).UseContentRoot(Directory.GetCurrentDirectory()).ConfigureAppConfiguration((Action&lt;WebHostBuilderContext, IConfigurationBuilder&gt;)((hostingContext, config) =&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		IHostingEnvironment hostingEnvironment = hostingContext.HostingEnvironment;</span><br><span class="line">		config.AddJsonFile(<span class="string">"appsettings.json"</span>, <span class="literal">true</span>, <span class="literal">true</span>).AddJsonFile(<span class="keyword">string</span>.Format(<span class="string">"appsettings.&#123;0&#125;.json"</span>, (<span class="keyword">object</span>)hostingEnvironment.EnvironmentName), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">		<span class="keyword">if</span> (hostingEnvironment.IsDevelopment())</span><br><span class="line">		&#123;</span><br><span class="line">			Assembly assembly = Assembly.Load(<span class="keyword">new</span> AssemblyName(hostingEnvironment.ApplicationName));</span><br><span class="line">			<span class="keyword">if</span> (assembly != (Assembly)<span class="literal">null</span>)</span><br><span class="line">				config.AddUserSecrets(assembly, <span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		config.AddEnvironmentVariables();</span><br><span class="line">		<span class="keyword">if</span> (args == <span class="literal">null</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">		config.AddCommandLine(args);</span><br><span class="line">	&#125;))</span><br><span class="line">	.ConfigureLogging((Action&lt;WebHostBuilderContext, ILoggingBuilder&gt;)((hostingContext, logging) =&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		logging.AddConfiguration((IConfiguration)hostingContext.Configuration.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">		logging.AddConsole();</span><br><span class="line">		logging.AddDebug();</span><br><span class="line">	&#125;))</span><br><span class="line">	.UseIISIntegration().UseDefaultServiceProvider((Action&lt;WebHostBuilderContext, ServiceProviderOptions&gt;)((context, options) =&gt; options.ValidateScopes = context.HostingEnvironment.IsDevelopment()));</span><br><span class="line">    <span class="keyword">if</span> (args != <span class="literal">null</span>)</span><br><span class="line">        hostBuilder.UseConfiguration((IConfiguration)<span class="keyword">new</span> ConfigurationBuilder().AddCommandLine(args).Build());</span><br><span class="line">    <span class="keyword">return</span> hostBuilder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第23行 中</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">config.AddJsonFile(<span class="string">"appsettings.json"</span>, <span class="literal">true</span>, <span class="literal">true</span>).AddJsonFile(<span class="keyword">string</span>.Format(<span class="string">"appsettings.&#123;0&#125;.json"</span>, (<span class="keyword">object</span>)hostingEnvironment.EnvironmentName), <span class="literal">true</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>继续查看config扩展方法AddJsonFile的源码</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Adds the JSON configuration provider at <span class="doctag">&lt;paramref name="path" /&gt;</span> to <span class="doctag">&lt;paramref name="builder" /&gt;</span>.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="builder"&gt;</span>The <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /&gt;</span> to add to.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="path"&gt;</span>Path relative to the base path stored in</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /&gt;</span> of <span class="doctag">&lt;paramref name="builder" /&gt;</span>.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="optional"&gt;</span>Whether the file is optional.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reloadOnChange"&gt;</span>Whether the configuration should be reloaded if the file changes.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The <span class="doctag">&lt;see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /&gt;</span>.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IConfigurationBuilder <span class="title">AddJsonFile</span>(<span class="params"><span class="keyword">this</span> IConfigurationBuilder builder, <span class="keyword">string</span> path, <span class="keyword">bool</span> optional, <span class="keyword">bool</span> reloadOnChange</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> builder.AddJsonFile((IFileProvider) <span class="literal">null</span>, path, optional, reloadOnChange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参中的第四个参数为</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reloadOnChange"&gt;</span>Whether the configuration should be reloaded if the file changes.<span class="doctag">&lt;/param&gt;</span></span></span><br></pre></td></tr></table></figure><p>当这个参数被设置为 <strong>true</strong> 时即可实现热更新。</p><h4 id="怎样修改绑定的地址"><a href="#怎样修改绑定的地址" class="headerlink" title="怎样修改绑定的地址"></a>怎样修改绑定的地址</h4><p>在 Program 类的 CreateWebHostBuilder 中增加 UseUrls 方法的调用</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">                .UseUrls(<span class="string">"http://localhost:5001"</span>)</span><br><span class="line">                .UseStartup&lt;Startup&gt;();</span><br></pre></td></tr></table></figure><h4 id="更改实体类后怎样同步更改到数据库"><a href="#更改实体类后怎样同步更改到数据库" class="headerlink" title="更改实体类后怎样同步更改到数据库"></a>更改实体类后怎样同步更改到数据库</h4><p><strong>主要要使用EF的cli命令</strong><br>提交更改</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">dotnet ef migrations Add InitialCreate</span><br></pre></td></tr></table></figure><p>同步到数据库</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><p>回滚到之前的某一次提交</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">dotnet ef migrations update InitialCreate</span><br></pre></td></tr></table></figure><p>回滚后同步代码回滚</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">dotnet ef migrations remove</span><br></pre></td></tr></table></figure><p>将更改生成SQL脚本（一般是为了方便部署到正式环境）</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">dotnet ef migrations script</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net 百度语音Demo(语音识别、语音合成）</title>
    <url>/posts/628.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>百度语音，面向广大开发者永久免费开放语音合成技术。所采用的离在线融合技术，根据当前网络状况，自动判断使用本地引擎或者云端引擎，进行语音合成，再也不用担心流量消耗了！</p></blockquote><p>本Demo将使用官方提供的C#版本RestApi SDK制作一个Winfrom软件，实现以下两个功能。</p><ul><li>TTS语音合成：可选择语速、音调、音量及发言人</li><li>ASR语音识别：使用NAudio进行语音录制并识别<a id="more"></a></li></ul><h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><p>在正式使用之前，我们需要在百度语音获取API key以及SDK文件。</p><h3 id="获取API-Key"><a href="#获取API-Key" class="headerlink" title="获取API Key"></a>获取API Key</h3><p>在百度语音<span class="exturl" data-url="aHR0cDovL3l1eWluLmJhaWR1LmNvbS9hcHAv" title="http://yuyin.baidu.com/app/">应用管理<i class="fa fa-external-link"></i></span>页面创建新应用。<br>按照创建引导一步步来即可，注意在选择服务时同时勾选语音识别和语音合成，这样API Key就可以同时用于TTS和ASR了。</p><h3 id="下载离线SDK"><a href="#下载离线SDK" class="headerlink" title="下载离线SDK"></a>下载离线SDK</h3><p>下载<span class="exturl" data-url="aHR0cDovL2FpLmJhaWR1LmNvbS9kb3dubG9hZD9zZGtJZD0zNw==" title="http://ai.baidu.com/download?sdkId=37">C#版本<i class="fa fa-external-link"></i></span>的RestApi SDK。<br><img src="https://qiniucdn.wayneshao.com/20180222133806577/20180222083859597.png" alt></p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>使用Nuget安装Newtonsoft.Json和NAudio、手动引用官方提供的ApiSdk.dll文件。</p><p>接下来查看官方Demo中有关语音的SpeechDemo.cs文件</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Baidu.Aip.Speech;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Baidu.Aip.Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SpeechDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Asr _asrClient;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Tts _ttsClient;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SpeechDemo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _asrClient = <span class="keyword">new</span> Asr(<span class="string">"Api Key"</span>, <span class="string">"Secret Key"</span>);</span><br><span class="line">            _ttsClient = <span class="keyword">new</span> Tts(<span class="string">"Api Key"</span>, <span class="string">"Secret Key"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 识别本地文件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AsrData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> data = File.ReadAllBytes(<span class="string">"语音pcm文件地址"</span>);</span><br><span class="line">            <span class="keyword">var</span> result = _asrClient.Recognize(data, <span class="string">"pcm"</span>, <span class="number">16000</span>);</span><br><span class="line">            Console.Write(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 识别URL中的语音文件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AsrUrl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = _asrClient.Recoginze(</span><br><span class="line">                <span class="string">"http://xxx.com/待识别的pcm文件地址"</span>, </span><br><span class="line">                <span class="string">"http://xxx.com/识别结果回调地址"</span>, </span><br><span class="line">                <span class="string">"pcm"</span>, </span><br><span class="line">                <span class="number">16000</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合成</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Tts</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 可选参数</span></span><br><span class="line">            <span class="keyword">var</span> option = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;<span class="string">"spd"</span>, <span class="number">5</span>&#125;, <span class="comment">// 语速</span></span><br><span class="line">                &#123;<span class="string">"vol"</span>, <span class="number">7</span>&#125;, <span class="comment">// 音量</span></span><br><span class="line">                &#123;<span class="string">"per"</span>, <span class="number">4</span>&#125;  <span class="comment">// 发音人，4：情感度丫丫童声</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> result = _ttsClient.Synthesis(<span class="string">"众里寻他千百度"</span>, option);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.ErrorCode == <span class="number">0</span>)  <span class="comment">// 或 result.Success</span></span><br><span class="line">            &#123;</span><br><span class="line">                File.WriteAllBytes(<span class="string">"合成的语音文件本地存储地址.mp3"</span>, result.Data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码示例中，我们可以看出语音识别API需要的源语音文件为pcm格式，我们使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25hdWRpby9OQXVkaW8=" title="https://github.com/naudio/NAudio"><strong>NAudio</strong><i class="fa fa-external-link"></i></span>来获取麦克风数据并保存为pcm格式以使用API，同样的也使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25hdWRpby9OQXVkaW8=" title="https://github.com/naudio/NAudio"><strong>NAudio</strong><i class="fa fa-external-link"></i></span>实时预览录制的数据和播放TTS合成的数据。</p><h3 id="将官方Demo封装成SpeechHelper"><a href="#将官方Demo封装成SpeechHelper" class="headerlink" title="将官方Demo封装成SpeechHelper"></a>将官方Demo封装成SpeechHelper</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Baidu.Aip.Speech;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BaiduSpeechDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SpeechHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Asr AsrClient;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Tts TtsClient;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">SpeechHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            AsrClient = <span class="keyword">new</span> Asr(<span class="string">"BWf8AWrvS5h6Y45NAOP3zaGp"</span>, <span class="string">"490737eca7a6ff4d20375d1696c7e548"</span>);</span><br><span class="line">            TtsClient = <span class="keyword">new</span> Tts(<span class="string">"BWf8AWrvS5h6Y45NAOP3zaGp"</span>, <span class="string">"490737eca7a6ff4d20375d1696c7e548"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 识别本地文件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsrResult <span class="title">AsrData</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> data = File.ReadAllBytes(path);</span><br><span class="line">            <span class="keyword">var</span> result = AsrClient.Recognize(data, <span class="string">"pcm"</span>, <span class="number">8000</span>);</span><br><span class="line">            <span class="keyword">return</span> result.ToObject&lt;AsrResult&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 识别URL中的语音文件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsrResult <span class="title">AsrUrl</span>(<span class="params"><span class="keyword">string</span> url, <span class="keyword">string</span> callback = <span class="string">""</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = AsrClient.Recoginze(</span><br><span class="line">                url,</span><br><span class="line">                callback,</span><br><span class="line">                <span class="string">"pcm"</span>,</span><br><span class="line">                <span class="number">16000</span>);</span><br><span class="line">            <span class="keyword">return</span> result.ToObject&lt;AsrResult&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合成</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Tts</span>(<span class="params"><span class="keyword">string</span> input, <span class="keyword">string</span> path, <span class="keyword">int</span> spd = <span class="number">5</span>, <span class="keyword">int</span> pit = <span class="number">5</span>, <span class="keyword">int</span> vol = <span class="number">6</span>, <span class="keyword">int</span> per = <span class="number">4</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 可选参数</span></span><br><span class="line">            <span class="keyword">var</span> option = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;<span class="string">"spd"</span>, spd&#125;, <span class="comment">// 语速，取值0-9，默认为5中语速</span></span><br><span class="line">                &#123;<span class="string">"pit"</span>, pit&#125;, <span class="comment">// 音调，取值0-9，默认为5中语调</span></span><br><span class="line">                &#123;<span class="string">"vol"</span>, vol&#125;, <span class="comment">// 音量，取值0-15，默认为5中音量</span></span><br><span class="line">                &#123;<span class="string">"per"</span>, per&#125;  <span class="comment">// 发音人选择, 0为普通女声，1为普通男生，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为普通女声</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> result = TtsClient.Synthesis(input, option);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.Success) File.WriteAllBytes(path, result.Data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Console.WriteLine(result.Serialize());</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result.Success;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NAudio录制麦克风数据为pcm格式并实时预览"><a href="#NAudio录制麦克风数据为pcm格式并实时预览" class="headerlink" title="NAudio录制麦克风数据为pcm格式并实时预览"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25hdWRpby9OQXVkaW8=" title="https://github.com/naudio/NAudio">NAudio<i class="fa fa-external-link"></i></span>录制麦克风数据为pcm格式并实时预览</h3><p>NAudio提供了<span class="exturl" data-url="aHR0cDovL21hcmtoZWF0aC5uZXQvcG9zdC9ob3ctdG8tcmVjb3JkLWFuZC1wbGF5LWF1ZGlvLWF0LXNhbWUw" title="http://markheath.net/post/how-to-record-and-play-audio-at-same0">同时进行录制和播放的Demo<i class="fa fa-external-link"></i></span>，其中的SavingWaveProvider可以直接拿来使用，只要传入合适的参数即可将保存文件的格式由示例中的wav改为pcm，下面是修改后的调用代码。<br>具体则是修改WaveIn的声明：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置记录器</span></span><br><span class="line"><span class="comment">// WaveFormat.CreateCustomFormat 参数依次为 格式\采样率\声道\每秒平均码率\单位采样点的字节数\采样位数</span></span><br><span class="line">_recorder = <span class="keyword">new</span> WaveIn &#123; WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, <span class="number">8000</span>, <span class="number">1</span>, <span class="number">16000</span>, <span class="number">2</span>, <span class="number">16</span>) &#125;;</span><br></pre></td></tr></table></figure><p>下面给出修改后的开始录制和结束录制的代码</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> WaveIn _recorder;</span><br><span class="line"><span class="keyword">private</span> BufferedWaveProvider _bufferedWaveProvider;</span><br><span class="line"><span class="keyword">private</span> SavingWaveProvider _savingWaveProvider;</span><br><span class="line"><span class="keyword">private</span> WaveOut _player;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnStartRecordingClick</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置记录器</span></span><br><span class="line">    <span class="comment">// 参数依次为 格式\采样率\声道\每秒平均码率\单位采样点的字节数\采样位数</span></span><br><span class="line">    _recorder = <span class="keyword">new</span> WaveIn &#123; WaveFormat = WaveFormat.CreateCustomFormat(WaveFormatEncoding.Pcm, <span class="number">8000</span>, <span class="number">1</span>, <span class="number">16000</span>, <span class="number">2</span>, <span class="number">16</span>) &#125;;</span><br><span class="line">    _recorder.DataAvailable += RecorderOnDataAvailable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立我们的信号链</span></span><br><span class="line">    _bufferedWaveProvider = <span class="keyword">new</span> BufferedWaveProvider(_recorder.WaveFormat);</span><br><span class="line"></span><br><span class="line">    _fileName = Path.Combine(<span class="string">"temp"</span>, Guid.NewGuid() + <span class="string">".pcm"</span>);</span><br><span class="line">    _savingWaveProvider = <span class="keyword">new</span> SavingWaveProvider(_bufferedWaveProvider, _fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置播放</span></span><br><span class="line">    _player = <span class="keyword">new</span> WaveOut();</span><br><span class="line">    _player.Init(_savingWaveProvider);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始播放和录制</span></span><br><span class="line">    _player.Play();</span><br><span class="line">    _recorder.StartRecording();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RecorderOnDataAvailable</span>(<span class="params"><span class="keyword">object</span> sender, WaveInEventArgs waveInEventArgs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _bufferedWaveProvider.AddSamples(waveInEventArgs.Buffer, <span class="number">0</span>, waveInEventArgs.BytesRecorded);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnStopRecordingClick</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 停止录制</span></span><br><span class="line">    _recorder.StopRecording();</span><br><span class="line">    <span class="comment">// 停止播放</span></span><br><span class="line">    _player.Stop();</span><br><span class="line">    <span class="comment">// 最终完成 WAV 文件</span></span><br><span class="line">    _savingWaveProvider.Dispose();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求百度ASR API</span></span><br><span class="line">    <span class="keyword">var</span> a = SpeechHelper.AsrData(_fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TTS完成"><a href="#TTS完成" class="headerlink" title="TTS完成"></a>TTS完成</h3><p>窗体界面拖好TTS选项的布局<br><img src="https://qiniucdn.wayneshao.com/20180222133806577/20180222094352273.png" alt><br>完成按钮点击事件的逻辑</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnTts_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 临时保存路径</span></span><br><span class="line">    <span class="keyword">var</span> musicPath = Path.Combine(<span class="string">"temp"</span>, Guid.NewGuid() + <span class="string">".mp3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发言人</span></span><br><span class="line">    <span class="keyword">var</span> per = cbPer.SelectedIndex &gt;= <span class="number">2</span> ? cbPer.SelectedIndex + <span class="number">1</span> : cbPer.SelectedIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用Baidu TTS Api</span></span><br><span class="line">    <span class="keyword">if</span> (!SpeechHelper.Tts(tbContext.Text, musicPath, (<span class="keyword">int</span>)nudSpd.Value, (<span class="keyword">int</span>)nudPit.Value, (<span class="keyword">int</span>)nudVol.Value, per)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//播放请求得到的结果</span></span><br><span class="line">    IWavePlayer waveOutDevice = <span class="keyword">new</span> WaveOut();</span><br><span class="line">    <span class="keyword">var</span> audioFileReader = <span class="keyword">new</span> AudioFileReader(musicPath);</span><br><span class="line">    waveOutDevice.Init(audioFileReader);</span><br><span class="line">    waveOutDevice.Play();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//播放结束后销毁播放对象</span></span><br><span class="line">    waveOutDevice.PlaybackStopped += <span class="keyword">delegate</span></span><br><span class="line">    &#123;</span><br><span class="line">        waveOutDevice?.Stop();</span><br><span class="line">        waveOutDevice?.Dispose();</span><br><span class="line">        waveOutDevice = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Complete"><a href="#Complete" class="headerlink" title="Complete"></a>Complete</h2><p>最终成品如下：<br><img src="https://qiniucdn.wayneshao.com/20180222133806577/20180222094601387.png" alt><br><strong>完整代码托管在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dheW5lU2hhby9CYWlkdVNwZWVjaERlbW8=" title="https://github.com/WayneShao/BaiduSpeechDemo">GitHub<i class="fa fa-external-link"></i></span></strong></p><p><strong>代码中我自己的Api Key并没有删除，望手下留情，别给我搞封了。</strong></p>]]></content>
      <categories>
        <category>踩坑笔记</category>
      </categories>
      <tags>
        <tag>ASR</tag>
        <tag>TTS</tag>
        <tag>NAudio</tag>
        <tag>语音识别</tag>
      </tags>
  </entry>
  <entry>
    <title>【MVC学习笔记】7.使用极验验证来制作更高逼格的验证码</title>
    <url>/posts/47398.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在之前的项目中，如果有需要使用验证码，基本都是自己用GDI+画图出来，简单好用，但是却也存在了一些小问题，首先若较少干扰线，则安全性不是很高，验证码容易被机器识别，若多画太多干扰线条，机器人识别率下降的同时，人眼的识别率也同步下降（震惊哭）。更为重要的是，GDI+绘制的验证码一般来说也不会很美观，如果做一个炫酷的登陆界面却配了这样一个验证码，画风诡异，丑到极致。</p><p>再后来浏览网页的过程中，发现很多很多网站项目中都使用了一种叫极验验证的验证码，采用移动滑块的方式进行验证，方便美观。而一番搜索之后了解到，官方提供的免费版也足以应付我手头的大多数项目了，不禁想把在MVC学习过程中试着使用极验验证来作为登录的验证码。</p><a id="more"></a><p>极验官方提供了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZVRlYW0vZ3QtY3NoYXJwLXNkaw==" title="https://github.com/GeeTeam/gt-csharp-sdk">C#的SDK和Demo<i class="fa fa-external-link"></i></span>供开发者参考，不过是Webform版本的，可读性不是很高，而现在使用Webform进行网站开发的也基本消失了，我将在官方Webform代码的基础上，将其用在ASP.NET MVC程序中。</p><h2 id="注册极验"><a href="#注册极验" class="headerlink" title="注册极验"></a>注册极验</h2><p>到极验官网注册账号之后进入后台管理界面，点击添加验证<br><img src="https://qiniucdn.wayneshao.com/20180218223716/20180218103931147.png" alt><br>添加后我们可以得到ID和KEY<br><img src="https://qiniucdn.wayneshao.com/20180218223716/20180218103949448.png" alt></p><h2 id="完成验证逻辑"><a href="#完成验证逻辑" class="headerlink" title="完成验证逻辑"></a>完成验证逻辑</h2><h3 id="首先我们需要引入官方的Geetestlib类"><a href="#首先我们需要引入官方的Geetestlib类" class="headerlink" title="首先我们需要引入官方的Geetestlib类"></a>首先我们需要引入官方的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZVRlYW0vZ3QtY3NoYXJwLXNkay9ibG9iL21hc3Rlci9zcmMvR2VldGVzdFNESy9HZWV0ZXN0U0RLL0dlZXRlc3RMaWIuY3M=" title="https://github.com/GeeTeam/gt-csharp-sdk/blob/master/src/GeetestSDK/GeetestSDK/GeetestLib.cs">Geetestlib类<i class="fa fa-external-link"></i></span></h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PMS.WebApp.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> GeetestLib 极验验证C# SDK基本库</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GeetestLib</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> SDK版本号</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String version = <span class="string">"3.2.0"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> SDK开发语言</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String sdkLang = <span class="string">"csharp"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 极验验证API URL</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">const</span> String apiUrl = <span class="string">"http://api.geetest.com"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> register url</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">const</span> String registerUrl = <span class="string">"/register.php"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> validate url</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">const</span> String validateUrl = <span class="string">"/validate.php"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 极验验证API服务状态Session Key</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String gtServerStatusSessionKey = <span class="string">"gt_server_status"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 极验验证二次验证表单数据 Chllenge</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String fnGeetestChallenge = <span class="string">"geetest_challenge"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 极验验证二次验证表单数据 Validate</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String fnGeetestValidate = <span class="string">"geetest_validate"</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 极验验证二次验证表单数据 Seccode</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String fnGeetestSeccode = <span class="string">"geetest_seccode"</span>;</span><br><span class="line">        <span class="keyword">private</span> String userID = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">private</span> String responseStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">private</span> String captchaID = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">private</span> String privateKey = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 验证成功结果字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> successResult = <span class="number">1</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 证结失败验果字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> failResult = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 判定为机器人结果字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> String forbiddenResult = <span class="string">"forbidden"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> GeetestLib构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="publicKey"&gt;</span>极验验证公钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="privateKey"&gt;</span>极验验证私钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GeetestLib</span>(<span class="params">String publicKey, String privateKey</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.privateKey = privateKey;</span><br><span class="line">            <span class="keyword">this</span>.captchaID = publicKey;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRandomNum</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Random rand =<span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> randRes = rand.Next(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> randRes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 验证初始化预处理</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>初始化结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Byte <span class="title">preProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.captchaID == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"publicKey is null!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                String challenge = <span class="keyword">this</span>.registerChallenge();</span><br><span class="line">                <span class="keyword">if</span> (challenge.Length == <span class="number">32</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.getSuccessPreProcessRes(challenge);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.getFailPreProcessRes();</span><br><span class="line">                    Console.WriteLine(<span class="string">"Server regist challenge failed!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Byte <span class="title">preProcess</span>(<span class="params">String userID</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.captchaID == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"publicKey is null!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.userID = userID;</span><br><span class="line">                String challenge = <span class="keyword">this</span>.registerChallenge();</span><br><span class="line">                <span class="keyword">if</span> (challenge.Length == <span class="number">32</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.getSuccessPreProcessRes(challenge);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.getFailPreProcessRes();</span><br><span class="line">                    Console.WriteLine(<span class="string">"Server regist challenge failed!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getResponseStr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.responseStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 预处理失败后的返回格式串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getFailPreProcessRes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> rand1 = <span class="keyword">this</span>.getRandomNum();</span><br><span class="line">            <span class="keyword">int</span> rand2 = <span class="keyword">this</span>.getRandomNum();</span><br><span class="line">            String md5Str1 = <span class="keyword">this</span>.md5Encode(rand1 + <span class="string">""</span>);</span><br><span class="line">            String md5Str2 = <span class="keyword">this</span>.md5Encode(rand2 + <span class="string">""</span>);</span><br><span class="line">            String challenge = md5Str1 + md5Str2.Substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">this</span>.responseStr = <span class="string">"&#123;"</span> + <span class="keyword">string</span>.Format(</span><br><span class="line">                 <span class="string">"\"success\":&#123;0&#125;,\"gt\":\"&#123;1&#125;\",\"challenge\":\"&#123;2&#125;\""</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="keyword">this</span>.captchaID, challenge) + <span class="string">"&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 预处理成功后的标准串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getSuccessPreProcessRes</span>(<span class="params">String challenge</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            challenge = <span class="keyword">this</span>.md5Encode(challenge + <span class="keyword">this</span>.privateKey);</span><br><span class="line">            <span class="keyword">this</span>.responseStr =<span class="string">"&#123;"</span> + <span class="keyword">string</span>.Format(</span><br><span class="line">                <span class="string">"\"success\":&#123;0&#125;,\"gt\":\"&#123;1&#125;\",\"challenge\":\"&#123;2&#125;\""</span>, <span class="number">1</span>, </span><br><span class="line">                <span class="keyword">this</span>.captchaID, challenge) + <span class="string">"&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> failback模式的验证方式</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="challenge"&gt;</span>failback模式下用于与validate一起解码答案， 判断验证是否正确<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="validate"&gt;</span>failback模式下用于与challenge一起解码答案， 判断验证是否正确<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="seccode"&gt;</span>failback模式下，其实是个没用的参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>验证结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">failbackValidateRequest</span>(<span class="params">String challenge, String validate, String seccode</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.requestIsLegal(challenge, validate, seccode)) <span class="keyword">return</span> GeetestLib.failResult;</span><br><span class="line">            String[] validateStr = validate.Split(<span class="string">'_'</span>);</span><br><span class="line">            String encodeAns = validateStr[<span class="number">0</span>];</span><br><span class="line">            String encodeFullBgImgIndex = validateStr[<span class="number">1</span>];</span><br><span class="line">            String encodeImgGrpIndex = validateStr[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> decodeAns = <span class="keyword">this</span>.decodeResponse(challenge, encodeAns);</span><br><span class="line">            <span class="keyword">int</span> decodeFullBgImgIndex = <span class="keyword">this</span>.decodeResponse(challenge, encodeFullBgImgIndex);</span><br><span class="line">            <span class="keyword">int</span> decodeImgGrpIndex = <span class="keyword">this</span>.decodeResponse(challenge, encodeImgGrpIndex);</span><br><span class="line">            <span class="keyword">int</span> validateResult = <span class="keyword">this</span>.validateFailImage(decodeAns, decodeFullBgImgIndex, decodeImgGrpIndex);</span><br><span class="line">            <span class="keyword">return</span> validateResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">validateFailImage</span>(<span class="params"><span class="keyword">int</span> ans, <span class="keyword">int</span> full_bg_index, <span class="keyword">int</span> img_grp_index</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> thread = <span class="number">3</span>;</span><br><span class="line">            String full_bg_name = <span class="keyword">this</span>.md5Encode(full_bg_index + <span class="string">""</span>).Substring(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">            String bg_name = md5Encode(img_grp_index + <span class="string">""</span>).Substring(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">            String answer_decode = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) answer_decode += full_bg_name.ElementAt(i);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) answer_decode += bg_name.ElementAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            String x_decode = answer_decode.Substring(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">int</span> x_int = Convert.ToInt32(x_decode, <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">int</span> result = x_int % <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">if</span> (result &lt; <span class="number">40</span>) result = <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">if</span> (Math.Abs(ans - result) &lt; thread) <span class="keyword">return</span> GeetestLib.successResult;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> GeetestLib.failResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Boolean <span class="title">requestIsLegal</span>(<span class="params">String challenge, String validate, String seccode</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (challenge.Equals(<span class="keyword">string</span>.Empty) || validate.Equals(<span class="keyword">string</span>.Empty) || seccode.Equals(<span class="keyword">string</span>.Empty)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向gt-server进行二次验证</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="challenge"&gt;</span>本次验证会话的唯一标识<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="validate"&gt;</span>拖动完成后server端返回的验证结果标识字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="seccode"&gt;</span>验证结果的校验码，如果gt-server返回的不与这个值相等则表明验证失败<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>二次验证结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">enhencedValidateRequest</span>(<span class="params">String challenge, String validate, String seccode</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.requestIsLegal(challenge, validate, seccode)) <span class="keyword">return</span> GeetestLib.failResult;</span><br><span class="line">            <span class="keyword">if</span> (validate.Length &gt; <span class="number">0</span> &amp;&amp; checkResultByPrivate(challenge, validate))</span><br><span class="line">            &#123;</span><br><span class="line">                String query = <span class="string">"seccode="</span> + seccode + <span class="string">"&amp;sdk=csharp_"</span> + GeetestLib.version;</span><br><span class="line">                String response = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    response = postValidate(query);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response.Equals(md5Encode(seccode)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> GeetestLib.successResult;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> GeetestLib.failResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">enhencedValidateRequest</span>(<span class="params">String challenge, String validate, String seccode, String userID</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.requestIsLegal(challenge, validate, seccode)) <span class="keyword">return</span> GeetestLib.failResult;</span><br><span class="line">            <span class="keyword">if</span> (validate.Length &gt; <span class="number">0</span> &amp;&amp; checkResultByPrivate(challenge, validate))</span><br><span class="line">            &#123;</span><br><span class="line">                String query = <span class="string">"seccode="</span> + seccode + <span class="string">"&amp;user_id="</span> + userID + <span class="string">"&amp;sdk=csharp_"</span> + GeetestLib.version;</span><br><span class="line">                String response = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    response = postValidate(query);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response.Equals(md5Encode(seccode)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> GeetestLib.successResult;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> GeetestLib.failResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">readContentFromGet</span>(<span class="params">String url</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line">                request.Timeout = <span class="number">20000</span>;</span><br><span class="line">                HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">                Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">                StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(<span class="string">"utf-8"</span>));</span><br><span class="line">                String retString = myStreamReader.ReadToEnd();</span><br><span class="line">                myStreamReader.Close();</span><br><span class="line">                myResponseStream.Close();</span><br><span class="line">                <span class="keyword">return</span> retString;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">catch</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">""</span>;     </span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">registerChallenge</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            String url = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.Empty.Equals(<span class="keyword">this</span>.userID))</span><br><span class="line">            &#123;</span><br><span class="line">                url = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;&#123;1&#125;?gt=&#123;2&#125;"</span>, GeetestLib.apiUrl, GeetestLib.registerUrl, <span class="keyword">this</span>.captchaID);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                url = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;&#123;1&#125;?gt=&#123;2&#125;&amp;user_id=&#123;3&#125;"</span>, GeetestLib.apiUrl, GeetestLib.registerUrl, <span class="keyword">this</span>.captchaID, <span class="keyword">this</span>.userID);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">string</span> retString = <span class="keyword">this</span>.readContentFromGet(url);</span><br><span class="line">            <span class="keyword">return</span> retString;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Boolean <span class="title">checkResultByPrivate</span>(<span class="params">String origin, String validate</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            String encodeStr = md5Encode(privateKey + <span class="string">"geetest"</span> + origin);</span><br><span class="line">            <span class="keyword">return</span> validate.Equals(encodeStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">postValidate</span>(<span class="params">String data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            String url = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;&#123;1&#125;"</span>, GeetestLib.apiUrl, GeetestLib.validateUrl);</span><br><span class="line">            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line">            request.Method = <span class="string">"POST"</span>;</span><br><span class="line">            request.ContentType = <span class="string">"application/x-www-form-urlencoded"</span>;</span><br><span class="line">            request.ContentLength = Encoding.UTF8.GetByteCount(data);</span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            Stream myRequestStream = request.GetRequestStream();</span><br><span class="line">            <span class="keyword">byte</span>[] requestBytes = System.Text.Encoding.ASCII.GetBytes(data);</span><br><span class="line">            myRequestStream.Write(requestBytes, <span class="number">0</span>, requestBytes.Length);</span><br><span class="line">            myRequestStream.Close();</span><br><span class="line"></span><br><span class="line">            HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">            <span class="comment">// 读取返回信息</span></span><br><span class="line">            Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">            StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(<span class="string">"utf-8"</span>));</span><br><span class="line">            <span class="keyword">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line">            myStreamReader.Close();</span><br><span class="line">            myResponseStream.Close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> retString;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">decodeRandBase</span>(<span class="params">String challenge</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            String baseStr = challenge.Substring(<span class="number">32</span>, <span class="number">2</span>);</span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; tempList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; baseStr.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tempAscii = (<span class="keyword">int</span>)baseStr[i];</span><br><span class="line">                tempList.Add((tempAscii &gt; <span class="number">57</span>) ? (tempAscii - <span class="number">87</span>)</span><br><span class="line">                    : (tempAscii - <span class="number">48</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> result = tempList.ElementAt(<span class="number">0</span>) * <span class="number">36</span> + tempList.ElementAt(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">decodeResponse</span>(<span class="params">String challenge, String str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.Length&gt;<span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span>[] shuzi = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>&#125;;</span><br><span class="line">            String chongfu = <span class="string">""</span>;</span><br><span class="line">            Hashtable key = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;challenge.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                String item = challenge.ElementAt(i) + <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span> (chongfu.Contains(item)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> <span class="keyword">value</span> = shuzi[count % <span class="number">5</span>];</span><br><span class="line">                    chongfu += item;</span><br><span class="line">                    count++;</span><br><span class="line">                    key.Add(item, <span class="keyword">value</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++) res += (<span class="keyword">int</span>)key[str[i]+<span class="string">""</span>];</span><br><span class="line">            res = res - <span class="keyword">this</span>.decodeRandBase(challenge);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">md5Encode</span>(<span class="params">String plainText</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MD5CryptoServiceProvider md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">            <span class="keyword">string</span> t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(plainText)));</span><br><span class="line">            t2 = t2.Replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">            t2 = t2.ToLower();</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h3><p>引入Jquery库</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/Content/plugins/jquery/jquery-1.8.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加用于放置验证码的div（需要放到form表单中）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"geetest-container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加JS代码用于获取验证码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, processGeeTest);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">processGeeTest</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取id，challenge，success（是否启用failback）</span></span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/Login/GeekTest"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="actionscript">            dataType: <span class="string">"json"</span>, <span class="comment">// 使用jsonp格式</span></span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 使用initGeetest接口</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1：配置参数，与创建Geetest实例时接受的参数一致</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件</span></span></span><br><span class="line">                initGeetest(&#123;</span><br><span class="line">                    gt: data.gt,</span><br><span class="line">                    challenge: data.challenge,</span><br><span class="line"><span class="actionscript">                    product: <span class="string">"float"</span>, <span class="comment">// 产品形式</span></span></span><br><span class="line">                    offline: !data.success</span><br><span class="line">                &#125;,</span><br><span class="line">                    handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> <span class="params">(captchaObj)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将验证码加到id为captcha的元素里</span></span></span><br><span class="line"><span class="actionscript">        captchaObj.appendTo(<span class="string">"#geetest-container"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        captchaObj.onSuccess = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>processGeeTest方法中我们异步请求的地址“/Login/GeekTest”就是获取验证码是后台需要执行的方法</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">GeekTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Content(GetCaptcha(),<span class="string">"application/json"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">GetCaptcha</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geetest = <span class="keyword">new</span> GeetestLib(<span class="string">"3594e0d834df77cedc7351a02b5b06a4"</span>, <span class="string">"b961c8081ce88af7e32a3f45d00dff84"</span>);</span><br><span class="line">    <span class="keyword">var</span> gtServerStatus = geetest.preProcess();</span><br><span class="line">    Session[GeetestLib.gtServerStatusSessionKey] = gtServerStatus;</span><br><span class="line">    <span class="keyword">return</span> geetest.getResponseStr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="校验验证码"><a href="#校验验证码" class="headerlink" title="校验验证码"></a>校验验证码</h3><p>注意，当提交form表单时，会将三个和极验有关的参数传到后台方法（geetest_challenge、geetest_validate、geetest_seccode），若验证码未验证成功，则参数为空值。</p><p>后台验证方法为：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">CheckGeeTestResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geetest = <span class="keyword">new</span> GeetestLib(<span class="string">"3594e0d834df77cedc7351a02b5b06a4"</span>, <span class="string">"b961c8081ce88af7e32a3f45d00dff84 "</span>);</span><br><span class="line">    <span class="keyword">var</span> gtServerStatusCode = (<span class="keyword">byte</span>)Session[GeetestLib.gtServerStatusSessionKey];</span><br><span class="line">    <span class="keyword">var</span> userId = (<span class="keyword">string</span>)Session[<span class="string">"userID"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> challenge = Request.Form.Get(GeetestLib.fnGeetestChallenge);</span><br><span class="line">    <span class="keyword">var</span> validate = Request.Form.Get(GeetestLib.fnGeetestValidate);</span><br><span class="line">    <span class="keyword">var</span> seccode = Request.Form.Get(GeetestLib.fnGeetestSeccode);</span><br><span class="line">    <span class="keyword">var</span> result = gtServerStatusCode == <span class="number">1</span> ? geetest.enhencedValidateRequest(challenge, validate, seccode, userId) : geetest.failbackValidateRequest(challenge, validate, seccode);</span><br><span class="line">    <span class="keyword">return</span> result == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在表单中判断验证码是否成功校验：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CheckGeeTestResult())</span><br><span class="line">        <span class="keyword">return</span> Content(<span class="string">"no:请先完成验证操作。"</span>);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 和 GitFolw 的一些总结</title>
    <url>/posts/40738.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>总结一下 Git 日常开发使用常用指令，以及一个常见的 GitFlow 实践模型。</p><a id="more"></a><h1 id="工具准备-Chocolatey"><a href="#工具准备-Chocolatey" class="headerlink" title="工具准备 - Chocolatey"></a>工具准备 - Chocolatey</h1><p>因为日常主要在 Windows 平台做开发，本文又设计了一些软件工具，故而先行引入一个 Windows 平台的包管理工具，<span class="exturl" data-url="aHR0cHM6Ly9jaG9jb2xhdGV5Lm9yZy8=" title="https://chocolatey.org/">Chocolatey<i class="fa fa-external-link"></i></span>，使用Powershell运行以下脚本即可成功安装 Chocolatey 的开源免费版本：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; iex ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure><p>之后用的的软件工具都会直接以 Chocolatey 的方式安装，当然也可以Google搜索直接下载安装软件包。<br>没装 Git 环境的可以直接使用 Chocolatey 安装：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install <span class="literal">-y</span> git</span><br></pre></td></tr></table></figure><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219054013913.png" alt></p><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="variable">$</span> git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="variable">$</span> git init [<span class="type">project</span>-<span class="type">name</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="variable">$</span> git clone [<span class="type">url</span>]</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line"><span class="variable">$</span> git config -<span class="literal">-list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line"><span class="variable">$</span> git config <span class="literal">-e</span> [--<span class="type">global</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line"><span class="variable">$</span> git config [--<span class="type">global</span>] user.name <span class="string">"[name]"</span></span><br><span class="line"><span class="variable">$</span> git config [--<span class="type">global</span>] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line"><span class="variable">$</span> git add [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="variable">$</span> git add [<span class="type">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="variable">$</span> git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="variable">$</span> git add <span class="literal">-p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="variable">$</span> git rm [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="variable">$</span> git rm -<span class="literal">-cached</span> [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="variable">$</span> git mv [<span class="type">file</span>-<span class="type">original</span>] [<span class="type">file</span>-<span class="type">renamed</span>]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="variable">$</span> git commit [<span class="type">file1</span>] [<span class="type">file2</span>] ... <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="variable">$</span> git commit -<span class="literal">-amend</span> <span class="literal">-m</span> [<span class="type">message</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="variable">$</span> git commit -<span class="literal">-amend</span> [<span class="type">file1</span>] [<span class="type">file2</span>] ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line"><span class="variable">$</span> git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-r</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="variable">$</span> git branch [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> [<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="variable">$</span> git branch [<span class="type">branch</span>] [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="variable">$</span> git branch -<span class="literal">-track</span> [<span class="type">branch</span>] [<span class="type">remote</span>-<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="variable">$</span> git checkout [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line"><span class="variable">$</span> git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="variable">$</span> git branch -<span class="literal">-set</span><span class="literal">-upstream</span> [<span class="type">branch</span>] [<span class="type">remote</span>-<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line"><span class="variable">$</span> git merge [<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="variable">$</span> git cherry<span class="literal">-pick</span> [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-d</span> [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line"><span class="variable">$</span> git push origin -<span class="literal">-delete</span> [<span class="type">branch</span>-<span class="type">name</span>]</span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-dr</span> [<span class="type">remote</span>/<span class="type">branch</span>]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line"><span class="variable">$</span> git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line"><span class="variable">$</span> git tag [<span class="type">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line"><span class="variable">$</span> git tag [<span class="type">tag</span>] [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line"><span class="variable">$</span> git tag <span class="literal">-d</span> [<span class="type">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line"><span class="variable">$</span> git push origin :refs/tags/[<span class="type">tagName</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line"><span class="variable">$</span> git show [<span class="type">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] [<span class="type">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] -<span class="literal">-tags</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> [<span class="type">branch</span>] [<span class="type">tag</span>]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line"><span class="variable">$</span> git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line"><span class="variable">$</span> git log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="variable">$</span> git log -<span class="literal">-stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="variable">$</span> git log <span class="literal">-S</span> [<span class="type">keyword</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="variable">$</span> git log [<span class="type">tag</span>] HEAD -<span class="literal">-pretty</span>=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line"><span class="variable">$</span> git log [<span class="type">tag</span>] HEAD -<span class="literal">-grep</span> feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="variable">$</span> git log -<span class="literal">-follow</span> [<span class="type">file</span>]</span><br><span class="line"><span class="variable">$</span> git whatchanged [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="variable">$</span> git log <span class="literal">-p</span> [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line"><span class="variable">$</span> git log <span class="literal">-5</span> -<span class="literal">-pretty</span> -<span class="literal">-oneline</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="variable">$</span> git shortlog <span class="literal">-sn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="variable">$</span> git blame [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="variable">$</span> git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="variable">$</span> git diff -<span class="literal">-cached</span> [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="variable">$</span> git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line"><span class="variable">$</span> git diff [<span class="type">first</span>-<span class="type">branch</span>]...[<span class="type">second</span>-<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line"><span class="variable">$</span> git diff -<span class="literal">-shortstat</span> <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="variable">$</span> git show [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="variable">$</span> git show -<span class="literal">-name</span><span class="literal">-only</span> [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="variable">$</span> git show [<span class="type">commit</span>]:[<span class="type">filename</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="variable">$</span> git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$</span> git fetch [<span class="type">remote</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$</span> git remote <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$</span> git remote show [<span class="type">remote</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$</span> git remote add [<span class="type">shortname</span>] [<span class="type">url</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$</span> git pull [<span class="type">remote</span>] [<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] [<span class="type">branch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] -<span class="literal">-force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$</span> git push [<span class="type">remote</span>] -<span class="literal">-all</span></span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="variable">$</span> git checkout [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="variable">$</span> git checkout [<span class="type">commit</span>] [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="variable">$</span> git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="variable">$</span> git reset [<span class="type">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="variable">$</span> git reset -<span class="literal">-hard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="variable">$</span> git reset [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="variable">$</span> git reset -<span class="literal">-hard</span> [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="variable">$</span> git reset -<span class="literal">-keep</span> [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="variable">$</span> git revert [<span class="type">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="variable">$</span> git stash</span><br><span class="line"><span class="variable">$</span> git stash pop</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$</span> git archive</span><br></pre></td></tr></table></figure><h1 id="GitFlow（Git分支管理策略）"><a href="#GitFlow（Git分支管理策略）" class="headerlink" title="GitFlow（Git分支管理策略）"></a>GitFlow（Git分支管理策略）</h1><p><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219055349496.png" alt><br>本文描述的是 <span class="exturl" data-url="aHR0cHM6Ly9udmllLmNvbS9hYm91dC8=" title="https://nvie.com/about/">Vincent Driessen<i class="fa fa-external-link"></i></span> 提出的一种比较成功的<span class="exturl" data-url="aHR0cHM6Ly9udmllLmNvbS9wb3N0cy9hLXN1Y2Nlc3NmdWwtZ2l0LWJyYW5jaGluZy1tb2RlbC8=" title="https://nvie.com/posts/a-successful-git-branching-model/">分支管理模型<i class="fa fa-external-link"></i></span>，非常适合借鉴甚至直接拿来使用。</p><h2 id="两条主要分支"><a href="#两条主要分支" class="headerlink" title="两条主要分支"></a>两条主要分支</h2><p><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219055444447.png" alt></p><h3 id="主分支-master"><a href="#主分支-master" class="headerlink" title="主分支 master"></a>主分支 master</h3><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。<br>Git版本库初始化以后，自动建立的默认分支叫做 master，我们通常把它作为主分支。</p><h3 id="开发分支-develop"><a href="#开发分支-develop" class="headerlink" title="开发分支 develop"></a>开发分支 develop</h3><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 develop。<br>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在 master 分支上，对 develop 分支进行”合并”（merge）。<br>由 master 分支创建 develop 分支：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">-b</span> develop master</span><br></pre></td></tr></table></figure><p>将 develop 分支发布到 master分支：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 master 分支</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 develop 分支进行合并</span></span><br><span class="line">git merge -<span class="literal">-no</span><span class="literal">-ff</span> develop</span><br></pre></td></tr></table></figure><p>这里稍微解释一下，上一条命令中的–no-ff参数是什么意思。<br>默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将 master 分支指向 develop 分支。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219060532991.png" alt><br>使用 –no-ff 参数后，会在合并时在 master 分支上生成一个新节点。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219062956530.png" alt><br>为了保证版本演进的清晰，我们希望采用这种做法。<br>关于合并的更多解释，请参考Benjamin Sandofsky的《<span class="exturl" data-url="aHR0cDovL3NhbmRvZnNreS5jb20vYmxvZy9naXQtd29ya2Zsb3cuaHRtbA==" title="http://sandofsky.com/blog/git-workflow.html">Understanding the Git Workflow<i class="fa fa-external-link"></i></span>》。</p><h2 id="三条辅助分支"><a href="#三条辅助分支" class="headerlink" title="三条辅助分支"></a>三条辅助分支</h2><p>在主要分支 master 和 develop 之外，我们的开发模型使用各种辅助分支来帮助团队成员之间的并行开发，简化特性的跟踪，为生产版本做准备，并协助快速解决生产问题。<br>临时性分支主要有三种：</p><ul><li>特性（feature）分支</li><li>预发布（release）分支</li><li>热修复（hotfix）分支</li></ul><p>与主要分支不同，这些辅助分支总是有一个有限的生命期，使用完以后，应该马上删除，使得代码库的常设分支始终只有 master 和develop。</p><h3 id="特性分支（feature）"><a href="#特性分支（feature）" class="headerlink" title="特性分支（feature）"></a>特性分支（feature）</h3><p>特性分支是为了开发某种特定功能，从 develop 分支上面分离出来，开发完成后，要再并入 develop。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219062016929.png" alt><br>特性分支(主题分支/功能分支)用于开发新的功能。<br>当开始开发一个功能时，包含这个功能的正式版本发布时间是不确定的。<br>特性分支的本质是，只要特性还在开发中，它就一直存在，最终会被合并回到 develop 中或者被删除。<br>特性分支的名字，可以采用feature-*的形式命名。</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>创建一个特性分支：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由 develop 分支 检出新的特性分支 "feature-x"</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> feature<span class="literal">-x</span> develop</span><br></pre></td></tr></table></figure><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>开发完成后，将特性分支合并到develop分支：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到分支 'develop'</span></span><br><span class="line"><span class="variable">$</span> git checkout develop</span><br><span class="line"><span class="comment"># 非直进式合并</span></span><br><span class="line"><span class="variable">$</span> git merge -<span class="literal">-no</span><span class="literal">-ff</span> feature<span class="literal">-x</span></span><br></pre></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>删除特性分支</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-d</span> feature<span class="literal">-x</span></span><br><span class="line">Deleted branch feature<span class="literal">-x</span> (was <span class="number">05</span>e9557).</span><br><span class="line"><span class="comment"># 推送源码到服务器</span></span><br><span class="line"><span class="variable">$</span> git push origin develop</span><br></pre></td></tr></table></figure><p>– no-ff 标志使 merge 即使可以通过快进执行 merge也始终创建一个新的提交对象。 这样可以避免丢失关于特性分支和特性组合在一起的历史存在的信息，这些特性组合在一起添加了特性。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219062831705.png" alt><br>直进式合并下不可能从 Git 历史记录中看到哪些提交对象一起实现了某个特性，如果一定需要，那就必须手动读取所有的日志消息，还原整个特性(即一组提交)是一件真正令人头疼的事情，而如果使用 – no-ff 标志，则很容易实现。<br>虽然它会创建更额外的空的提交对象，但是收益比成本大得多。</p><h3 id="预发布分支（release）"><a href="#预发布分支（release）" class="headerlink" title="预发布分支（release）"></a>预发布分支（release）</h3><p>预发布分支用来完成正式版本发布的准备工作。 可以在预发布分支上修复较小的错误，并为发行版准备元数据(版本号、构建日期等)。<br>当 develop (几乎)反映了新版本的期望状态，即针对即将构建的发行版的所有特性都已经合并到 develop 时，从 develop 分支检出一个预发布分支。<br>从发布分支的开始，即将发布的版本才会被分配一个版本号。<br>在此之前，开发分支反映了“下一个版本”的变化，但是在发布分支启动之前，还不清楚“下一个版本”最终会变成0.3还是1.0。<br>这个决定是在发布分支的开始时做出的，并根据项目中关于版本号碰撞的规则执行。<br>预发布分支是 develop 分支上面分出来的，预发布结束以后，必须合并进 develop 和 master分支。<br>它的命名，可以采用release-*的形式。</p><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p>假设1.1.5版本是当前的产品版本，我们即将发布一个大的版本。<br>开发的状态已经为“下一个版本”做好了准备，我们已经决定这将成为1.2版本(而不是1.1.6或2.0)。<br>PS：假设存在脚本 bump-version.sh 接收一个版本号参数，功能是修改项目的版本号相关文件以切换最终发布产品的版本。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由 develop 分支 检出新的预发布分支 "release-1.2"</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> release<span class="literal">-1</span>.<span class="number">2</span> develop</span><br><span class="line"><span class="comment"># 版本升级到 1.2</span></span><br><span class="line"><span class="variable">$</span> ./bump<span class="literal">-version</span>.sh <span class="number">1.2</span></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-a</span> <span class="literal">-m</span> <span class="string">"Bumped version number to 1.2"</span></span><br><span class="line"></span><br><span class="line">[<span class="type">release</span>-<span class="number">1.2</span> <span class="number">74</span><span class="type">d9424</span>] Bumped version number to <span class="number">1.2</span></span><br><span class="line"><span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</span><br></pre></td></tr></table></figure><p>预发布分支存在的时间区间为：从完成下一个版本所有特性开发，到正式发布版本。<br>在此期间，可以在这个分支(而不是在 develop 分支)中提交 bug 修复。<br>这里严禁添加大型的新特性，大型新特性必须合并到 develop，已经在预发布阶段的情况下，新的大型新特性最好归入下一个版本。</p><h4 id="完成-1"><a href="#完成-1" class="headerlink" title="完成"></a>完成</h4><p>当发布分支的状态准备好成为真正的发布时，需要执行一些操作。<br>首先，将发布分支合并到 master 中(<strong>根据定义，master 上的每个提交都是一个新版本，请牢记这一点</strong>)。<br>接下来，必须对 master 上的提交进行标记（tip），以便将来参考这个历史版本。<br>最后，需要将在发行版分支上所做的更改合并回到 develop 中，以便将来的发行版也包含这些错误修复。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到分支 'master'</span></span><br><span class="line"><span class="variable">$</span> git checkout master</span><br><span class="line"><span class="comment"># 非直进式合并</span></span><br><span class="line"><span class="variable">$</span> git merge -<span class="literal">-no</span><span class="literal">-ff</span> release<span class="literal">-1</span>.<span class="number">2</span></span><br><span class="line">(Summary of changes)</span><br><span class="line"><span class="comment"># 打上标记</span></span><br><span class="line"><span class="variable">$</span> git tag <span class="literal">-a</span> <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到分支 'develop'</span></span><br><span class="line"><span class="variable">$</span> git checkout develop</span><br><span class="line"><span class="comment"># 将预发布分支合并回分支 'develop'</span></span><br><span class="line"><span class="variable">$</span> git merge -<span class="literal">-no</span><span class="literal">-ff</span> release<span class="literal">-1</span>.<span class="number">2</span></span><br><span class="line">(Summary of changes)</span><br></pre></td></tr></table></figure><p>这一步很可能导致合并冲突，毕竟我们已经更改了版本号。 需要修复并提交。<br>到这里我们完成了预发布流程，发布分支可以直接删除:</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> git branch <span class="literal">-d</span> release<span class="literal">-1</span>.<span class="number">2</span></span><br><span class="line">Deleted branch release<span class="literal">-1</span>.<span class="number">2</span> (was ff452fe).</span><br></pre></td></tr></table></figure><h3 id="热修复分支（hotfix）"><a href="#热修复分支（hotfix）" class="headerlink" title="热修复分支（hotfix）"></a>热修复分支（hotfix）</h3><p>热修复分支非常类似于预发布分支，因为它们也意味着为新的产品发布做准备，尽管是计划外的。<br>它们产生于生产版本发现的问题有立即采取行动的必要性时。<br>当生产版本中的关键错误必须立即解决时，从标记生产版本的主分支上的相应标记分检出新的热修复分支。<br>通常修复不会涉及所有团队成员，团队成员在开发分支上的工作可以继续，bug 涉及的成员在热修复分支上做快速修复。<br>修补bug分支是从 master 分支上面分出来的。修补结束以后，再合并进 master 和 develop 分支。<br>它的命名，可以采用hotfix-*的形式。</p><h4 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h4><p>假设版本1.2是当前正在运行的生产版本，并且由于一个严重的 bug 而导致了问题。<br>但是 develop 分支上的变化仍然是不稳定的。<br>这时我们可以由 master 分支检出一个 hotfix 分支并开始修复问题:<br>** 热修复通常意味着需要发布生产版本，所以同样需要更改版本号 **</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检出热修复分支 "hotfix-1.2.1"</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> hotfix<span class="literal">-1</span>.<span class="number">2.1</span> master</span><br><span class="line"><span class="comment"># 版本升级到 1.2.1</span></span><br><span class="line"><span class="variable">$</span> ./bump<span class="literal">-version</span>.sh <span class="number">1.2</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-a</span> <span class="literal">-m</span> <span class="string">"Bumped version number to 1.2.1"</span></span><br><span class="line">[<span class="type">hotfix</span>-<span class="number">1.2</span><span class="type">.1</span> <span class="number">41</span><span class="type">e61bb</span>] Bumped version number to <span class="number">1.2</span>.<span class="number">1</span></span><br><span class="line"><span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</span><br></pre></td></tr></table></figure><p>接下来，经过紧锣密鼓的排查，我们找到了错误点并做出了修复：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> git commit <span class="literal">-m</span> <span class="string">"Fixed severe production problem"</span></span><br><span class="line">[<span class="type">hotfix</span>-<span class="number">1.2</span><span class="type">.1</span> <span class="type">abbe5d6</span>] Fixed severe production problem</span><br><span class="line"><span class="number">5</span> files changed, <span class="number">32</span> insertions(+), <span class="number">17</span> deletions(-)</span><br></pre></td></tr></table></figure><h4 id="完成-2"><a href="#完成-2" class="headerlink" title="完成"></a>完成</h4><p>当修复完成时，bug 修复合并回 master 中的同时也需要合并回 develop 中，以保证 bug 修复也包含在下一个版本中。<br>这与发布分支的完成方式完全相似。</p><p>首先，更新主版本并标记发布版本。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到分支 'master'</span></span><br><span class="line"><span class="variable">$</span> git checkout master</span><br><span class="line"><span class="comment"># 非直进式合并</span></span><br><span class="line"><span class="variable">$</span> git merge -<span class="literal">-no</span><span class="literal">-ff</span> hotfix<span class="literal">-1</span>.<span class="number">2.1</span></span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br><span class="line"><span class="comment"># 打上标记</span></span><br><span class="line"><span class="variable">$</span> git tag <span class="literal">-a</span> <span class="number">1.2</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>接下来，更新开发版本:</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到分支 'develop'</span></span><br><span class="line"><span class="variable">$</span> git checkout develop</span><br><span class="line"><span class="comment"># 非直进式合并</span></span><br><span class="line"><span class="variable">$</span> git merge -<span class="literal">-no</span><span class="literal">-ff</span> hotfix<span class="literal">-1</span>.<span class="number">2.1</span></span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br></pre></td></tr></table></figure><p>这里还存在一种特殊情况，就是<strong>当预发布分支存在时，热修复应当合并到热修复分支而不是开发分支</strong>。</p><p>最后，删除临时分支:</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> git branch <span class="literal">-d</span> hotfix<span class="literal">-1</span>.<span class="number">2.1</span></span><br><span class="line">Deleted branch hotfix<span class="literal">-1</span>.<span class="number">2.1</span> (was abbe5d6).</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-使用非直进式合并（git-merge-–no-ff）"><a href="#1-使用非直进式合并（git-merge-–no-ff）" class="headerlink" title="1. 使用非直进式合并（git merge –no-ff）"></a>1. 使用非直进式合并（git merge –no-ff）</h3><p>默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将 master 分支指向 develop 分支。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219060532991.png" alt><br>使用 –no-ff 参数后，会在合并时在 master 分支上生成一个新节点。<br><img src="https://qiniucdn.wayneshao.com/%E5%85%B3%E4%BA%8EGit%E7%9A%84%E6%96%B9%E6%96%B9%E9%9D%A2%E9%9D%A2/20191219062956530.png" alt><br>非直进式合并始终创建一个新的提交对象。 这样可以避免丢失关于特性分支和特性组合在一起的历史存在的信息，这些特性组合在一起添加了特性。<br>直进式合并下不可能从 Git 历史记录中看到哪些提交对象一起实现了某个特性，如果一定需要，那就必须手动读取所有的日志消息，还原整个特性(即一组提交)是一件真正令人头疼的事情，而如果使用 –no-ff 标志，则很容易实现。<br>虽然它会创建更额外的空的提交对象，但是收益比成本大得多。<br>为了保证版本演进的清晰，我们希望采用这种做法。</p><p>Tips：可以通过修改全局配置实现</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pull操作时禁止 --no-ff</span></span><br><span class="line">git config -<span class="literal">-global</span> pull.ff only</span><br><span class="line"><span class="comment"># merge操作时配置为 --no-ff</span></span><br><span class="line">git config -<span class="literal">-global</span> merge.ff false</span><br></pre></td></tr></table></figure><h3 id="2-使用变基式拉取（git-pull-–rebase）"><a href="#2-使用变基式拉取（git-pull-–rebase）" class="headerlink" title="2. 使用变基式拉取（git pull –rebase）"></a>2. 使用变基式拉取（git pull –rebase）</h3><p>多人同时在同一分支开发的情况下，推荐在拉取代码时使用 –rebase,<br>这是因为默认的 git pull 操作相当于<strong>git fetch + git merge FETCH_HEAD</strong>，会经过一次合并，生成一个新的节点，之前的提交分开显示。<br>而 git pull –rebase 则相当于 <strong>git fetch + git rebase FETCH_HEAD</strong>，不会生成新的节点，是将两个分支融合成一个线性的提交。<br>想要更好的提交树，使用rebase操作会更好一点。<br>这样可以线性的看到每一次提交，并且没有增加提交节点。</p><p>merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。</p><p>而rebase 操作的话，会中断rebase,同时会提示去解决冲突。<br>解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</p><p>Tips: 可以配置为总是使用 pull-rebase</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 pull 操作时总是使用 -rebase</span></span><br><span class="line">git config -<span class="literal">-global</span> pull.rebase true</span><br></pre></td></tr></table></figure><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><h2 id="TortoiseGit"><a href="#TortoiseGit" class="headerlink" title="TortoiseGit"></a>TortoiseGit</h2><p><span class="exturl" data-url="aHR0cHM6Ly90b3J0b2lzZWdpdC5vcmc=" title="https://tortoisegit.org">TortoiseGit<i class="fa fa-external-link"></i></span> 是一个提供给 Git的 Windows Shell 界面程序，基于 TortoiseSVN。它是开源的，可以完全免费使用。</p><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://tortoisegit.org/docs/tortoisegit/images/ContextMenuDirControl.png" alt><br><img src="https://tortoisegit.org/about/screenshots/sendmail.png" alt><br><img src="https://tortoisegit.org/docs/tortoisegit/images/Overlays.png" alt><br><img src="https://tortoisegit.org/docs/tortoisegit/images/Commit.png" alt><br><img src="https://tortoisegit.org/docs/tortoisegit/images/LogMessages.png" alt><br>……</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC50b3J0b2lzZWdpdC5vcmcvdGdpdC8yLjkuMC4wL1RvcnRvaXNlR2l0LTIuOS4wLjAtNjRiaXQubXNp" title="https://download.tortoisegit.org/tgit/2.9.0.0/TortoiseGit-2.9.0.0-64bit.msi">TortoiseGit-2.9.0.0-64bit.msi<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC50b3J0b2lzZWdpdC5vcmcvdGdpdC8yLjkuMC4wL1RvcnRvaXNlR2l0LUxhbmd1YWdlUGFjay0yLjkuMC4wLTY0Yml0LXpoX0NOLm1zaQ==" title="https://download.tortoisegit.org/tgit/2.9.0.0/TortoiseGit-LanguagePack-2.9.0.0-64bit-zh_CN.msi">TortoiseGit-LanguagePack-2.9.0.0-64bit-zh_CN.msi<i class="fa fa-external-link"></i></span></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install <span class="literal">-y</span> TortoiseGit</span><br></pre></td></tr></table></figure><h2 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v" title="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/<i class="fa fa-external-link"></i></span><br>Sourcetree 是一个针对 Windows 和 Mac 的免费 Git 客户端，简化了与 Git 仓库的交互，这样你就可以专注于编码。<br>通过 Sourcetree 的 Git GUI 可以可视化和管理存储库。</p><h3 id="界面-1"><a href="#界面-1" class="headerlink" title="界面"></a>界面</h3><p><img src="https://www.sourcetreeapp.com/dam/jcr:580c367b-c240-453d-aa18-c7ced44324f9/hero-mac-screenshot.png?cdnVersion=731" alt><br><img src="https://www.sourcetreeapp.com/dam/jcr:c7337d19-a8c3-4a4b-a810-91ff5c6b035d/left_image.png?cdnVersion=731" alt><br><img src="https://www.sourcetreeapp.com/dam/jcr:b6ec8a39-5a98-4e28-842b-f9198824fe74/commit_with_confidence.png?cdnVersion=731" alt></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><span class="exturl" data-url="aHR0cHM6Ly9wcm9kdWN0LWRvd25sb2Fkcy5hdGxhc3NpYW4uY29tL3NvZnR3YXJlL3NvdXJjZXRyZWUvd2luZG93cy9nYS9Tb3VyY2VUcmVlU2V0dXAtMy4zLjYuZXhl" title="https://product-downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-3.3.6.exe">SourceTreeSetup-3.3.6.exe<i class="fa fa-external-link"></i></span></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install <span class="literal">-y</span> SourceTree</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><span class="exturl" data-url="aHR0cHM6Ly9udmllLmNvbS9wb3N0cy9hLXN1Y2Nlc3NmdWwtZ2l0LWJyYW5jaGluZy1tb2RlbC8=" title="https://nvie.com/posts/a-successful-git-branching-model/">［1］Vincent Driessen.A successful Git branching model［OL］.nvie.com，2010.<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMTIvZ2l0LXdvcmtmbG93Lmh0bWw=" title="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">［2］阮一峰.Git 工作流程［OL］.www.ruanyifeng.com，2015.<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMDcvZ2l0Lmh0bWw=" title="http://www.ruanyifeng.com/blog/2012/07/git.html">［3］阮一峰.Git分支管理策略［OL］.www.ruanyifeng.com，2012.<i class="fa fa-external-link"></i></span></p>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>【微服务学习】Polly：熔断降级组件</title>
    <url>/posts/15090.html</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="何为熔断降级"><a href="#何为熔断降级" class="headerlink" title="何为熔断降级"></a>何为熔断降级</h2><p>　　“熔断器如同电力过载保护器。它可以实现快速失败，如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作，使得应用程序继续执行而不用等待修正错误，或者浪费时间去等到长时间的超时产生。”<br>　　降级的目的是当某个服务提供者发生故障的时候，向调用方返回一个替代响应。<br>　　简单一句话概括，降级就是在调用的下游服务A出现问题（常见超时），提供PLAN-B，返回的效果可能没有服务A好，但是聊胜于无。而熔断器的存在就是要保障何时走到降级方法，何时恢复，以什么样的策略恢复。</p><a id="more"></a><h2 id="NET-Core-熔断降级实践"><a href="#NET-Core-熔断降级实践" class="headerlink" title=".NET Core 熔断降级实践"></a>.NET Core 熔断降级实践</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>　　Polly是一种.NET弹性和瞬态故障处理库，允许我们以非常顺畅和线程安全的方式来执诸如行重试，断路，超时，故障恢复等策略。<br>　　Polly当前版本可以工作在 .NET Standard 1.1 (包括: .NET Framework 4.5-4.6.1, .NET Core 1.0, Mono, Xamarin, UWP, WP8.1+) 和 .NET Standard 2.0+ (包括: .NET Framework 4.6.1, .NET Core 2.0+, 新版本的 Mono, Xamarin and UWP targets).上，同时也为旧版本的.NET Framework提供了一些可用的旧版本，具体版本对应如下：</p><table><thead><tr><th>目标框架</th><th>最低适配版本</th><th>最高适配版本</th></tr></thead><tbody><tr><td>.NET&nbsp;Standard&nbsp;2.1<br>for use with IHttpClientFactory</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzYuMC4x" title="https://www.nuget.org/packages/Polly/6.0.1">6.0.1<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL3BvbGx5" title="https://www.nuget.org/packages/polly">Current<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Standard&nbsp;2.0 (dedicated&nbsp;target)</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzYuMC4x" title="https://www.nuget.org/packages/Polly/6.0.1">6.0.1<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL3BvbGx5" title="https://www.nuget.org/packages/polly">Current<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Standard&nbsp;2.0</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzUuMC4z" title="https://www.nuget.org/packages/Polly/5.0.3">5.0.3<i class="fa fa-external-link"></i></span> via .Net&nbsp;Standard&nbsp;1.0 (upward compatible)</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL3BvbGx5" title="https://www.nuget.org/packages/polly">Current<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Standard&nbsp;1.1</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzUuMC4z" title="https://www.nuget.org/packages/Polly/5.0.3">5.0.3<i class="fa fa-external-link"></i></span> via .Net&nbsp;Standard&nbsp;1.0 (upward compatible)</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL3BvbGx5" title="https://www.nuget.org/packages/polly">Current<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Standard&nbsp;1.0</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzUuMC4z" title="https://www.nuget.org/packages/Polly/5.0.3">5.0.3<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzUuMS4w" title="https://www.nuget.org/packages/Polly/5.1.0">5.1.0<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Framework&nbsp;4.5</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzEuMC4w" title="https://www.nuget.org/packages/Polly/1.0.0">1.0.0<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL3BvbGx5" title="https://www.nuget.org/packages/polly">Current<i class="fa fa-external-link"></i></span>&nbsp;(via&nbsp;.Net&nbsp;Standard);<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzUuOS4w" title="https://www.nuget.org/packages/Polly/5.9.0">5.9.0<i class="fa fa-external-link"></i></span>&nbsp;(as&nbsp;dedicated&nbsp;target)</td></tr><tr><td>.NET&nbsp;Framework&nbsp;4.0<br>with Async support</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5Lk5ldDQwQXN5bmMvNC4yLjI=" title="https://www.nuget.org/packages/Polly.Net40Async/4.2.2">4.2.2<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5Lk5ldDQwQXN5bmMvNS45LjA=" title="https://www.nuget.org/packages/Polly.Net40Async/5.9.0">5.9.0<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Framework&nbsp;4.0</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzEuMC4w" title="https://www.nuget.org/packages/Polly/1.0.0">1.0.0<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5Lk5ldDQwQXN5bmMvNS45LjA=" title="https://www.nuget.org/packages/Polly.Net40Async/5.9.0">5.9.0<i class="fa fa-external-link"></i></span></td></tr><tr><td>.NET&nbsp;Framework&nbsp;3.5</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzEuMC4w" title="https://www.nuget.org/packages/Polly/1.0.0">1.0.0<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzQuMy4w" title="https://www.nuget.org/packages/Polly/4.3.0">4.3.0<i class="fa fa-external-link"></i></span></td></tr><tr><td>Various PCL targets</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzIuMC4w" title="https://www.nuget.org/packages/Polly/2.0.0">2.0.0<i class="fa fa-external-link"></i></span></td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL3BvbGx5" title="https://www.nuget.org/packages/polly">Current<i class="fa fa-external-link"></i></span>&nbsp;(via&nbsp;.Net&nbsp;Standard);<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL1BvbGx5LzQuMy4w" title="https://www.nuget.org/packages/Polly/4.3.0">4.3.0<i class="fa fa-external-link"></i></span>&nbsp;(as&nbsp;dedicated&nbsp;PCL&nbsp;target)</td></tr></tbody></table><p>　　该项目作者现已成为.NET基金会一员，项目一直在不停迭代和更新，项目地址<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseQ==" title="https://github.com/App-vNext/Polly">【https://github.com/App-vNext/Polly】<i class="fa fa-external-link"></i></span>。</p><h3 id="七种恢复策略"><a href="#七种恢复策略" class="headerlink" title="七种恢复策略"></a>七种恢复策略</h3><table><thead><tr><th>策略</th><th>前置条件</th><th align="center">例</th><th>此策略解决什么问题?</th></tr></thead><tbody><tr><td><strong>重试策略（Retry）</strong><br>(policy family)<br><sub>(<a href="#retry">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1JldHJ5" title="https://github.com/App-vNext/Polly/wiki/Retry">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>重试策略针对的前置条件是短暂的故障延迟且在短暂的延迟之后能够自我纠正。</td><td align="center">“也许这只是昙花一现”</td><td>允许我们做的是能够自动配置重试机制。</td></tr><tr><td><strong>断路器（Circuit-breaker）</strong><br>(policy family)<br><sub>(<a href="#circuit-breaker">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0NpcmN1aXQtQnJlYWtlcg==" title="https://github.com/App-vNext/Polly/wiki/Circuit-Breaker">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>断路器策略针对的前置条件是当系统繁忙时，快速响应失败总比让用户一直等待更好。<br><br>保护系统故障免受过载，Polly可以帮其恢复。</td><td align="center">“痛了，自然就会放下”<br><br>“让它歇一下”</td><td>当故障超过某个预先配置的阈值时, 中断电路 (块执行) 一段时间。</td></tr><tr><td><strong>超时（Timeout）</strong><br><sub>(<a href="#timeout">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1RpbWVvdXQ=" title="https://github.com/App-vNext/Polly/wiki/Timeout">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>超时策略针对的前置条件是超过一定的等待时间，想要得到成功的结果是不可能的。</td><td align="center">“你不必等待，她不会再来”</td><td>保证调用者不必等待太长时间。</td></tr><tr><td><strong>隔板隔离（Bulkhead Isolation）</strong><br><sub>(<a href="#bulkhead">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0J1bGtoZWFk" title="https://github.com/App-vNext/Polly/wiki/Bulkhead">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>隔板隔离针对的前置条件是当进程出现故障时，多个失败一直在主机中对资源（例如线程/ CPU）一直占用。下游系统故障也可能导致上游失败。<br><br>这两个风险都将造成严重的后果。</td><td align="center">“一颗老鼠屎坏了一锅汤”</td><td>将受管制的操作限制在固定的资源池中，避免其他资源受其影响。</td></tr><tr><td><strong>缓存（Cache）</strong><br><sub>(<a href="#cache">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0NhY2hl" title="https://github.com/App-vNext/Polly/wiki/Cache">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>数据不会很频繁的进行更新，相同请求的响应是相似的。</td><td align="center">“听说<br>你还会再来<br>我翘首以盼”</td><td>首次加载数据时将响应数据进行缓存，请求时若缓存中存在则直接从缓存中读取。</td></tr><tr><td><strong>回退（Fallback）</strong><br><sub>(<a href="#fallback">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0ZhbGxiYWNr" title="https://github.com/App-vNext/Polly/wiki/Fallback">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>操作将仍然失败 - 但是你可以实现准备好失败后要做的补救措施。</td><td align="center">“你若安好，我备胎到老。”</td><td>定义失败时要返回 (或要执行的操作) 的替代值。.</td></tr><tr><td><strong>策略包装（PolicyWrap）</strong><br><sub>(<a href="#policywrap">快速开始</a>&nbsp;;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1BvbGljeVdyYXA=" title="https://github.com/App-vNext/Polly/wiki/PolicyWrap">深入学习<i class="fa fa-external-link"></i></span>)</sub></td><td>不同的故障需要不同的策略，也就意味着弹性灵活使用组合。</td><td align="center">“谋定而后动”</td><td>允许灵活地组合上述任何策略。</td></tr></tbody></table><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="故障处理（被动策略）"><a href="#故障处理（被动策略）" class="headerlink" title="故障处理（被动策略）"></a>故障处理（被动策略）</h3><p>故障处理策略处理通过策略执行的代码所引发的特定的异常或返回结果。</p><h4 id="第一步：指定希望处理的异常（可选-指定要处理的返回结果）"><a href="#第一步：指定希望处理的异常（可选-指定要处理的返回结果）" class="headerlink" title="第一步：指定希望处理的异常（可选-指定要处理的返回结果）"></a>第一步：指定希望处理的异常（可选-指定要处理的返回结果）</h4><h5 id="指定希望处理的异常："><a href="#指定希望处理的异常：" class="headerlink" title="指定希望处理的异常："></a>指定希望处理的异常：</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单一异常种类</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;HttpRequestException&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带条件判断的单一异常</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SqlException&gt;(ex =&gt; ex.Number == <span class="number">1205</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多种异常</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;HttpRequestException&gt;()</span><br><span class="line">  .Or&lt;OperationCanceledException&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带条件判断的多种异常</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SqlException&gt;(ex =&gt; ex.Number == <span class="number">1205</span>)</span><br><span class="line">  .Or&lt;ArgumentException&gt;(ex =&gt; ex.ParamName == <span class="string">"example"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通异常或聚合异常的内部异常, 可以带有条件</span></span><br><span class="line">Policy</span><br><span class="line">  .HandleInner&lt;HttpRequestException&gt;()</span><br><span class="line">  .OrInner&lt;OperationCanceledException&gt;(ex =&gt; ex.CancellationToken != myToken)</span><br></pre></td></tr></table></figure><h5 id="指定要处理的返回结果"><a href="#指定要处理的返回结果" class="headerlink" title="指定要处理的返回结果"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseSNoYW5kaW5nLXJldHVybi12YWx1ZXMtYW5kLXBvbGljeXRyZXN1bHQ=" title="https://github.com/App-vNext/Polly#handing-return-values-and-policytresult">指定要处理的返回结果<i class="fa fa-external-link"></i></span></h5><p>从Polly v4.3.0起，包含返回TResult的调用的策略也可以处理TResult返回值</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带条件判断的单种返回值处理</span></span><br><span class="line">Policy</span><br><span class="line">  .HandleResult&lt;HttpResponseMessage&gt;(r =&gt; r.StatusCode == HttpStatusCode.NotFound)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带条件判断的多种返回值处理</span></span><br><span class="line">Policy</span><br><span class="line">  .HandleResult&lt;HttpResponseMessage&gt;(r =&gt; r.StatusCode == HttpStatusCode.InternalServerError)</span><br><span class="line">  .OrResult(r =&gt; r.StatusCode == HttpStatusCode.BadGateway)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始返回值处理 (隐式调用 .Equals())</span></span><br><span class="line">Policy</span><br><span class="line">  .HandleResult&lt;HttpStatusCode&gt;(HttpStatusCode.InternalServerError)</span><br><span class="line">  .OrResult(HttpStatusCode.BadGateway)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在一个策略中同时处理异常和返回值</span></span><br><span class="line">HttpStatusCode[] httpStatusCodesWorthRetrying = &#123;</span><br><span class="line">   HttpStatusCode.RequestTimeout, <span class="comment">// 408</span></span><br><span class="line">   HttpStatusCode.InternalServerError, <span class="comment">// 500</span></span><br><span class="line">   HttpStatusCode.BadGateway, <span class="comment">// 502</span></span><br><span class="line">   HttpStatusCode.ServiceUnavailable, <span class="comment">// 503</span></span><br><span class="line">   HttpStatusCode.GatewayTimeout <span class="comment">// 504</span></span><br><span class="line">&#125;; </span><br><span class="line">HttpResponseMessage result = <span class="keyword">await</span> Policy</span><br><span class="line">  .Handle&lt;HttpRequestException&gt;()</span><br><span class="line">  .OrResult&lt;HttpResponseMessage&gt;(r =&gt; httpStatusCodesWorthRetrying.Contains(r.StatusCode))</span><br><span class="line">  .RetryAsync(...)</span><br><span class="line">  .ExecuteAsync( <span class="comment">/* Func&lt;Task&lt;HttpResponseMessage&gt;&gt; */</span> )</span><br></pre></td></tr></table></figure><h4 id="第二步：指定策略应如何处理这些错误"><a href="#第二步：指定策略应如何处理这些错误" class="headerlink" title="第二步：指定策略应如何处理这些错误"></a>第二步：指定策略应如何处理这些错误</h4><h5 id="重试（Retry）"><a href="#重试（Retry）" class="headerlink" title="重试（Retry）"></a>重试（Retry）</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重试一次</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .Retry()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试多次</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .Retry(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试多次，每次重试触发事件（参数为此次异常和当前重试次数）</span></span><br><span class="line">Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .Retry(<span class="number">3</span>, onRetry: (exception, retryCount) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something </span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试多次，每次重试触发事件（参数为此次异常、当前重试次数和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .Retry(<span class="number">3</span>, onRetry: (exception, retryCount, context) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something </span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h5 id="不断重试直到成功（Retry-forever-until-succeeds）"><a href="#不断重试直到成功（Retry-forever-until-succeeds）" class="headerlink" title="不断重试直到成功（Retry forever until succeeds）"></a>不断重试直到成功（Retry forever until succeeds）</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不断重试</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .RetryForever()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断重试，每次重试触发事件（参数为此次异常） </span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .RetryForever(onRetry: exception =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="comment">// do something       </span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断重试，每次重试触发事件（参数为此次异常和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .RetryForever(onRetry: (exception, context) =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="comment">// do something       </span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h5 id="等待并重试（Wait-and-retry）"><a href="#等待并重试（Wait-and-retry）" class="headerlink" title="等待并重试（Wait and retry）"></a>等待并重试（Wait and retry）</h5><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1JldHJ5I3JldHJ5YWZ0ZXItd2hlbi10aGUtcmVzcG9uc2Utc3BlY2lmaWVzLWhvdy1sb25nLXRvLXdhaXQ=" title="https://github.com/App-vNext/Polly/wiki/Retry#retryafter-when-the-response-specifies-how-long-to-wait">WaitAndRetry策略处理HTTP状态代码429的重试后状态<i class="fa fa-external-link"></i></span></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重试多次, 每次重试之间等待指定的持续时间。(失败之后触发等待, 然后再进行下一次尝试。)</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(<span class="keyword">new</span>[]</span><br><span class="line">  &#123;</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">1</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">2</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">3</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试并触发事件多次, 每次重试之间等待指定的持续时间。（事件参数为当前异常和时间间隔）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(<span class="keyword">new</span>[]</span><br><span class="line">  &#123;</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">1</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">2</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">3</span>)</span><br><span class="line">  &#125;, (exception, timeSpan) =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something    </span></span><br><span class="line">  &#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试并触发事件多次, 每次重试之间等待指定的持续时间。（事件参数为当前异常、时间间隔和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(<span class="keyword">new</span>[]</span><br><span class="line">  &#123;</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">1</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">2</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">3</span>)</span><br><span class="line">  &#125;, (exception, timeSpan, context) =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something    </span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试并触发事件多次, 每次重试之间等待指定的持续时间。（事件参数为当前异常、时间间隔、当前重试次数和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(<span class="keyword">new</span>[]</span><br><span class="line">  &#123;</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">1</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">2</span>),</span><br><span class="line">    TimeSpan.FromSeconds(<span class="number">3</span>)</span><br><span class="line">  &#125;, (exception, timeSpan, retryCount, context) =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something    </span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试指定的次数, 根据当前重试次数计算等待时间 (允许指数回退)</span></span><br><span class="line"><span class="comment">// 当前这种情况下, 等待时间为:</span></span><br><span class="line"><span class="comment">//  2 ^ 1 = 2 s</span></span><br><span class="line"><span class="comment">//  2 ^ 2 = 4 s</span></span><br><span class="line"><span class="comment">//  2 ^ 3 = 8 s</span></span><br><span class="line"><span class="comment">//  2 ^ 4 = 16 s</span></span><br><span class="line"><span class="comment">//  2 ^ 5 = 32 s</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(<span class="number">5</span>, retryAttempt =&gt; </span><br><span class="line">	TimeSpan.FromSeconds(Math.Pow(<span class="number">2</span>, retryAttempt)) </span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试指定的次数，每次重试时触发事件，根据当前重试次数计算等待时间。（事件参数为当前异常、时间间隔和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(</span><br><span class="line">    <span class="number">5</span>, </span><br><span class="line">    retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(<span class="number">2</span>, retryAttempt)), </span><br><span class="line">    (exception, timeSpan, context) =&gt; &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试指定的次数，每次重试时触发事件，根据当前重试次数计算等待时间。（事件参数为当前异常、时间间隔、当前重试次数和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetry(</span><br><span class="line">    <span class="number">5</span>, </span><br><span class="line">    retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(<span class="number">2</span>, retryAttempt)), </span><br><span class="line">    (exception, timeSpan, retryCount, context) =&gt; &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h5 id="不断等待并重试直到成功（Wait-and-retry-forever-until-succeeds）"><a href="#不断等待并重试直到成功（Wait-and-retry-forever-until-succeeds）" class="headerlink" title="不断等待并重试直到成功（Wait and retry forever until succeeds）"></a>不断等待并重试直到成功（Wait and retry forever until succeeds）</h5><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1JldHJ5" title="https://github.com/App-vNext/Polly/wiki/Retry">如果所有重试都失败, 重试策略将重新引发最后一个异常返回到调用代码。<i class="fa fa-external-link"></i></span></p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不断等待并重试</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetryForever(retryAttempt =&gt; </span><br><span class="line">	TimeSpan.FromSeconds(Math.Pow(<span class="number">2</span>, retryAttempt))</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断等待并重试，每次重试时触发事件。（事件参数为当前异常、时间间隔）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetryForever(</span><br><span class="line">    retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(<span class="number">2</span>, retryAttempt)),    </span><br><span class="line">    (exception, timespan) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something       </span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断等待并重试，每次重试时触发事件。（事件参数为当前异常、时间间隔和当前执行的上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">  .WaitAndRetryForever(</span><br><span class="line">    retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(<span class="number">2</span>, retryAttempt)),    </span><br><span class="line">    (exception, timespan, context) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something       </span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h5 id="断路器（Circuit-breaker）"><a href="#断路器（Circuit-breaker）" class="headerlink" title="断路器（Circuit-breaker）"></a>断路器（Circuit-breaker）</h5><p>断路器策略通过在程序出错时抛出<strong>BrokenCircuitException</strong>来屏蔽其他异常。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0NpcmN1aXQtQnJlYWtlcg==" title="https://github.com/App-vNext/Polly/wiki/Circuit-Breaker">文档<i class="fa fa-external-link"></i></span><br>请注意, 断路器策略将<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0NpcmN1aXQtQnJlYWtlciNleGNlcHRpb24taGFuZGxpbmc=" title="https://github.com/App-vNext/Polly/wiki/Circuit-Breaker#exception-handling">重新引发所有异常<i class="fa fa-external-link"></i></span>, 甚至是已处理的异常。所以使用时通常会将<strong>重试策略</strong>和断路器策略<strong>组合使用</strong>。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在指定数量的连续异常后断开程序执行并在之后的一段时间内保持程序执行断开。</span></span><br><span class="line">Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .CircuitBreaker(<span class="number">2</span>, TimeSpan.FromMinutes(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定数量的连续异常后断开程序执行并在之后的一段时间内保持程序执行断开。当程序执行断开或者重新启用时触发事件。（程序执行断开事件参数为当前异常和间隔时间，重新启用事件无参数）</span></span><br><span class="line">Action&lt;Exception, TimeSpan&gt; onBreak = (exception, timespan) =&gt; &#123; ... &#125;;</span><br><span class="line">Action onReset = () =&gt; &#123; ... &#125;;</span><br><span class="line">CircuitBreakerPolicy breaker = Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .CircuitBreaker(<span class="number">2</span>, TimeSpan.FromMinutes(<span class="number">1</span>), onBreak, onReset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定数量的连续异常后断开程序执行并在之后的一段时间内保持程序执行断开。当程序执行断开或者重新启用时触发事件。（程序执行断开事件参数为当前异常、间隔时间和当前执行上下文，重新启用事件参数为当前执行上下文）</span></span><br><span class="line">Action&lt;Exception, TimeSpan, Context&gt; onBreak = (exception, timespan, context) =&gt; &#123; ... &#125;;</span><br><span class="line">Action&lt;Context&gt; onReset = context =&gt; &#123; ... &#125;;</span><br><span class="line">CircuitBreakerPolicy breaker = Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .CircuitBreaker(<span class="number">2</span>, TimeSpan.FromMinutes(<span class="number">1</span>), onBreak, onReset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序运行状态, 运行状况。</span></span><br><span class="line">CircuitState state = breaker.CircuitState;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CircuitState.Closed - 断路器未触发，允许操作执行。</span></span><br><span class="line"><span class="comment">CircuitState.Open - 断路器开启，阻止操作执行。</span></span><br><span class="line"><span class="comment">CircuitState.HalfOpen - 断路器开启指定时间后重新关闭，此状态允许操作执行，之后的开启或关闭取决于继续执行的结果。</span></span><br><span class="line"><span class="comment">CircuitState.Isolated - 断路器被主动开启，阻止操作执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动打开 (并保持打开) 断路器（例如需要主动隔离下游服务时）</span></span><br><span class="line">breaker.Isolate(); </span><br><span class="line"><span class="comment">// 重置断路器为关闭状态, 再次开始允许操作执行。</span></span><br><span class="line">breaker.Reset(); </span><br><span class="line">`</span><br></pre></td></tr></table></figure><h5 id="高级断路器（Advanced-Circuit-Breaker）"><a href="#高级断路器（Advanced-Circuit-Breaker）" class="headerlink" title="高级断路器（Advanced Circuit Breaker）"></a>高级断路器（Advanced Circuit Breaker）</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在采样持续时间内, 如果已处理异常的操作的比例超过故障阈值且该时间段内通过请求操作数达到最小吞吐量，主动启动断路器。</span></span><br><span class="line"></span><br><span class="line">Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .AdvancedCircuitBreaker(</span><br><span class="line">        failureThreshold: <span class="number">0.5</span>, <span class="comment">// 当&gt;=50%的操作会导致已处理的异常时中断程序。</span></span><br><span class="line">        samplingDuration: TimeSpan.FromSeconds(<span class="number">10</span>), <span class="comment">// 采样时间区间为10秒</span></span><br><span class="line">        minimumThroughput: <span class="number">8</span>, <span class="comment">// ... 在采样时间区间内进行了至少8次操作。</span></span><br><span class="line">        durationOfBreak: TimeSpan.FromSeconds(<span class="number">30</span>) <span class="comment">// 断路30秒.</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用状态更改委托的配置重载同样可用于高级断路器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 电路状态监控和手动控制同样也可用于高级断路器。</span></span><br></pre></td></tr></table></figure><p>更多相关资料请参考: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0FkdmFuY2VkLUNpcmN1aXQtQnJlYWtlcg==" title="https://github.com/App-vNext/Polly/wiki/Advanced-Circuit-Breaker">文档<i class="fa fa-external-link"></i></span></p><p>有关断路器模式的更多信息, 请参见：</p><ul><li><span class="exturl" data-url="aHR0cDovL3RlY2hibG9nLm5ldGZsaXguY29tLzIwMTEvMTIvbWFraW5nLW5ldGZsaXgtYXBpLW1vcmUtcmVzaWxpZW50Lmh0bWw=" title="http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html"><strong>改造 Netflix API 增加接口弹性</strong><i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL21hcnRpbmZvd2xlci5jb20vYmxpa2kvQ2lyY3VpdEJyZWFrZXIuaHRtbA==" title="http://martinfowler.com/bliki/CircuitBreaker.html"><strong>断路器浅谈 (马丁·福勒)</strong><i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9kbjU4OTc4NC5hc3B4" title="https://msdn.microsoft.com/en-us/library/dn589784.aspx"><strong>断路器模式 (Microsoft)</strong><i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTYwMTA2MjAzOTUxL2h0dHA6Ly90aGF0ZXh0cmFtaWxlLmJlL2Jsb2cvMjAwOC8wNS90aGUtY2lyY3VpdC1icmVha2Vy" title="https://web.archive.org/web/20160106203951/http://thatextramile.be/blog/2008/05/the-circuit-breaker"><strong>原始断路器链</strong><i class="fa fa-external-link"></i></span></li></ul><h5 id="回退策略（Fallback）"><a href="#回退策略（Fallback）" class="headerlink" title="回退策略（Fallback）"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0ZhbGxiYWNr" title="https://github.com/App-vNext/Polly/wiki/Fallback">回退策略（Fallback）<i class="fa fa-external-link"></i></span></h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行错误时提供替代值。</span></span><br><span class="line">Policy</span><br><span class="line">   .Handle&lt;Whatever&gt;()</span><br><span class="line">   .Fallback&lt;UserAvatar&gt;(UserAvatar.Blank)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行错误时使用回调函数提供替代值。</span></span><br><span class="line">Policy</span><br><span class="line">   .Handle&lt;Whatever&gt;()</span><br><span class="line">   .Fallback&lt;UserAvatar&gt;(() =&gt; UserAvatar.GetRandomAvatar()) <span class="comment">// where: public UserAvatar GetRandomAvatar() &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行错误时提供替代值的同时触发事件。（事件参数为当前异常信息和当前运行上下文）</span></span><br><span class="line">Policy</span><br><span class="line">   .Handle&lt;Whatever&gt;()</span><br><span class="line">   .Fallback&lt;UserAvatar&gt;(UserAvatar.Blank, onFallback: (exception, context) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="第三步：执行策略"><a href="#第三步：执行策略" class="headerlink" title="第三步：执行策略"></a>第三步：执行策略</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line"><span class="keyword">var</span> policy = Policy</span><br><span class="line">              .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">              .Retry();</span><br><span class="line"></span><br><span class="line">policy.Execute(() =&gt; DoSomething());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行传递任意上下文数据的操作</span></span><br><span class="line"><span class="keyword">var</span> policy = Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .Retry(<span class="number">3</span>, (exception, retryCount, context) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> methodThatRaisedException = context[<span class="string">"methodName"</span>];</span><br><span class="line">		Log(exception, methodThatRaisedException);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">policy.Execute(</span><br><span class="line">	() =&gt; DoSomething(),</span><br><span class="line">	<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;() &#123;&#123; <span class="string">"methodName"</span>, <span class="string">"some method"</span> &#125;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行返回结果的函数</span></span><br><span class="line"><span class="keyword">var</span> policy = Policy</span><br><span class="line">              .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">              .Retry();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = policy.Execute(() =&gt; DoSomething());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行传递任意上下文数据且返回结果的操作</span></span><br><span class="line"><span class="keyword">var</span> policy = Policy</span><br><span class="line">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class="line">    .Retry(<span class="number">3</span>, (exception, retryCount, context) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">object</span> methodThatRaisedException = context[<span class="string">"methodName"</span>];</span><br><span class="line">        Log(exception, methodThatRaisedException)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = policy.Execute(</span><br><span class="line">    () =&gt; DoSomething(),</span><br><span class="line">    <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;() &#123;&#123; <span class="string">"methodName"</span>, <span class="string">"some method"</span> &#125;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 综合使用</span></span><br><span class="line">Policy</span><br><span class="line">  .Handle&lt;SqlException&gt;(ex =&gt; ex.Number == <span class="number">1205</span>)</span><br><span class="line">  .Or&lt;ArgumentException&gt;(ex =&gt; ex.ParamName == <span class="string">"example"</span>)</span><br><span class="line">  .Retry()</span><br><span class="line">  .Execute(() =&gt; DoSomething());</span><br></pre></td></tr></table></figure><p>为了简单起见, 上面的示例显示了策略定义, 然后是策略执行。<br>但是在代码库和应用程序生命周期中, 策略定义和执行可能同样经常被<strong>分离</strong>。<br>例如, 可以选择在启动时定义策略, 然后通过<strong>依赖注入</strong>将其提供给使用点。</p><h3 id="故障处理（主动策略）"><a href="#故障处理（主动策略）" class="headerlink" title="故障处理（主动策略）"></a>故障处理（主动策略）</h3><p>主动策略添加了不基于当策略被引发或返回时才处理错误的弹性策略。</p><h4 id="第一步：配置"><a href="#第一步：配置" class="headerlink" title="第一步：配置"></a>第一步：配置</h4><h5 id="超时（Timeout）"><a href="#超时（Timeout）" class="headerlink" title="超时（Timeout）"></a>超时（Timeout）</h5><h6 id="乐观超时（Optimistic-timeout）"><a href="#乐观超时（Optimistic-timeout）" class="headerlink" title="乐观超时（Optimistic timeout）"></a>乐观超时（Optimistic timeout）</h6><p>乐观超时<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1RpbWVvdXQjb3B0aW1pc3RpYy10aW1lb3V0" title="https://github.com/App-vNext/Polly/wiki/Timeout#optimistic-timeout">通过 CancellationToken 运行<i class="fa fa-external-link"></i></span>, 并假定您执行支持合作取消的委托。您必须使用 <code>Execute/Async(...)</code> 重载以获取 <code>CancellationToken</code>, 并且执行的委托必须遵守该 <code>CancellationToken</code>。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果执行的委托尚未完成，在调用30秒后超时并返回 。 乐观超时: 委托应采取并遵守 CancellationToken。</span></span><br><span class="line">Policy</span><br><span class="line">  .Timeout(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 TimeSpan 配置超时。</span></span><br><span class="line">Policy</span><br><span class="line">  .Timeout(TimeSpan.FromMilliseconds(<span class="number">2500</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过方法提供可变的超时。</span></span><br><span class="line">Policy</span><br><span class="line">  .Timeout(() =&gt; myTimeoutProvider)) <span class="comment">// Func&lt;TimeSpan&gt; myTimeoutProvider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超时后触发事件。（事件参数为当前执行上下文、执行间隔、当前执行的TASK）</span></span><br><span class="line">Policy</span><br><span class="line">  .Timeout(<span class="number">30</span>, onTimeout: (context, timespan, task) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something </span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：在超时后记录日志</span></span><br><span class="line">Policy</span><br><span class="line">  .Timeout(<span class="number">30</span>, onTimeout: (context, timespan, task) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        logger.Warn(<span class="string">$"<span class="subst">&#123;context.PolicyKey&#125;</span> at <span class="subst">&#123;context.ExecutionKey&#125;</span>: execution timed out after <span class="subst">&#123;timespan.TotalSeconds&#125;</span> seconds."</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：在超时任务完成时捕获该任务中的任何异常</span></span><br><span class="line">Policy</span><br><span class="line">  .Timeout(<span class="number">30</span>, onTimeout: (context, timespan, task) =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        task.ContinueWith(t =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.IsFaulted) logger.Error(<span class="string">$"<span class="subst">&#123;context.PolicyKey&#125;</span> at <span class="subst">&#123;context.ExecutionKey&#125;</span>: execution timed out after <span class="subst">&#123;timespan.TotalSeconds&#125;</span> seconds, with: <span class="subst">&#123;t.Exception&#125;</span>."</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>示例执行:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Policy timeoutPolicy = Policy.TimeoutAsync(<span class="number">30</span>);</span><br><span class="line">HttpResponseMessage httpResponse = <span class="keyword">await</span> timeoutPolicy</span><br><span class="line">    .ExecuteAsync(</span><br><span class="line">      <span class="keyword">async</span> ct =&gt; <span class="keyword">await</span> httpClient.GetAsync(endpoint, ct), <span class="comment">// 执行一个有参数且响应 CancellationToken 的委托。</span></span><br><span class="line">      CancellationToken.None <span class="comment">// 在这种情况下, CancellationToken.None 将被传递到执行中, 这表明您没有将期望的令牌控制通过超时策略添加。 自定义 CancellationToken 也可以通过，详情请参阅 wiki 中的例子。</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure><h6 id="悲观超时（Pessimistic-timeout）"><a href="#悲观超时（Pessimistic-timeout）" class="headerlink" title="悲观超时（Pessimistic timeout）"></a>悲观超时（Pessimistic timeout）</h6><p>悲观超时允许调用代码 “离开” 等待执行完成的委托, 即使它不支持取消。<br>在同步执行中, 这是以牺牲一个额外的线程为代价的。有关更多细节, 请参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1RpbWVvdXQjcGVzc2ltaXN0aWMtdGltZW91dA==" title="https://github.com/App-vNext/Polly/wiki/Timeout#pessimistic-timeout">文档<i class="fa fa-external-link"></i></span>。<br>示例执行:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Policy timeoutPolicy = Policy.TimeoutAsync(<span class="number">30</span>, TimeoutStrategy.Pessimistic);</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> timeoutPolicy</span><br><span class="line">    .ExecuteAsync(</span><br><span class="line">      <span class="keyword">async</span> () =&gt; <span class="keyword">await</span> FooNotHonoringCancellationAsync(), <span class="comment">// 执行不接受取消令牌且不响应取消的委托。</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure><p>超时策略在发生超时时引发 <code>TimeoutRejectedException</code>。<br>更多详情参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1RpbWVvdXQ=" title="https://github.com/App-vNext/Polly/wiki/Timeout">文档<i class="fa fa-external-link"></i></span>。</p><h5 id="隔板（Bulkhead）"><a href="#隔板（Bulkhead）" class="headerlink" title="隔板（Bulkhead）"></a>隔板（Bulkhead）</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过该策略将执行限制为最多12个并发操作。</span></span><br><span class="line">Policy</span><br><span class="line">  .Bulkhead(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将通过策略执行的操作限制为最多12个并发操作, 如果插槽都被占满, 最多可以有两个操作被等待执行。</span></span><br><span class="line">Policy</span><br><span class="line">  .Bulkhead(<span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制并发执行, 如果执行被拒绝, 则调用触发事件。（事件参数为当前执行上下文）</span></span><br><span class="line">Policy</span><br><span class="line">  .Bulkhead(<span class="number">12</span>, context =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// do something </span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看隔板可用容量, 例如健康负荷。</span></span><br><span class="line"><span class="keyword">var</span> bulkhead = Policy.Bulkhead(<span class="number">12</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">int</span> freeExecutionSlots = bulkhead.BulkheadAvailableCount;</span><br><span class="line"><span class="keyword">int</span> freeQueueSlots     = bulkhead.QueueAvailableCount;</span><br></pre></td></tr></table></figure><p>当隔板策略的插槽全部被正在执行的操作占满是，会引发 <code>BulkheadRejectedException</code>。<br>更多详情参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0J1bGtoZWFk" title="https://github.com/App-vNext/Polly/wiki/Bulkhead">文档<i class="fa fa-external-link"></i></span>。</p><h5 id="缓存-Cache"><a href="#缓存-Cache" class="headerlink" title="缓存(Cache)"></a>缓存(Cache)</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> memoryCache = <span class="keyword">new</span> MemoryCache(<span class="keyword">new</span> MemoryCacheOptions());</span><br><span class="line"><span class="keyword">var</span> memoryCacheProvider = <span class="keyword">new</span> MemoryCacheProvider(memoryCache);</span><br><span class="line"><span class="keyword">var</span> cachePolicy = Policy.Cache(memoryCacheProvider, TimeSpan.FromMinutes(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// .NET Core CacheProviders DI 示例 请参照以下文章  https://github.com/App-vNext/Polly/wiki/Cache#working-with-cacheproviders :</span></span><br><span class="line"><span class="comment">// - https://github.com/App-vNext/Polly.Caching.MemoryCache</span></span><br><span class="line"><span class="comment">// - https://github.com/App-vNext/Polly.Caching.IDistributedCache </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义每天午夜绝对过期的缓存策略。</span></span><br><span class="line"><span class="keyword">var</span> cachePolicy = Policy.Cache(memoryCacheProvider, <span class="keyword">new</span> AbsoluteTtl(DateTimeOffset.Now.Date.AddDays(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义超时过期的缓存策略: 每次使用缓存项时, 项目的有效期为5分钟。</span></span><br><span class="line"><span class="keyword">var</span> cachePolicy = Policy.Cache(memoryCacheProvider, <span class="keyword">new</span> SlidingTtl(TimeSpan.FromMinutes(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义缓存策略, 并捕获任何缓存提供程序错误以进行日志记录。</span></span><br><span class="line"><span class="keyword">var</span> cachePolicy = Policy.Cache(myCacheProvider, TimeSpan.FromMinutes(<span class="number">5</span>), </span><br><span class="line">   (context, key, ex) =&gt; &#123; </span><br><span class="line">       logger.Error(<span class="string">$"Cache provider, for key <span class="subst">&#123;key&#125;</span>, threw exception: <span class="subst">&#123;ex&#125;</span>."</span>); <span class="comment">// (for example) </span></span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以直通缓存的身份执行缓存: 首先检查缓存;如果未找到, 请执行基础委托并将结果存储在缓存中。 </span></span><br><span class="line"><span class="comment">// 用于特定执行的缓存的键是通过在传递给执行的上下文实例上设置操作键 (v6 之前: 执行键) 来指定的。使用下面显示的窗体的重载 (或包含相同元素的更丰富的重载)。</span></span><br><span class="line"><span class="comment">// 示例: "fookey" 是将在下面的执行中使用的缓存密钥。</span></span><br><span class="line">TResult result = cachePolicy.Execute(context =&gt; getFoo(), <span class="keyword">new</span> Context(<span class="string">"FooKey"</span>));</span><br></pre></td></tr></table></figure><p>有关使用其他缓存提供程序的更丰富的选项和详细信息, 请参阅:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0NhY2hl" title="https://github.com/App-vNext/Polly/wiki/Cache">文档<i class="fa fa-external-link"></i></span></p><h5 id="策略包装（PolicyWrap）"><a href="#策略包装（PolicyWrap）" class="headerlink" title="策略包装（PolicyWrap）"></a>策略包装（PolicyWrap）</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义由以前定义的策略构建的组合策略。</span></span><br><span class="line"><span class="keyword">var</span> policyWrap = Policy</span><br><span class="line">  .Wrap(fallback, cache, retry, breaker, timeout, bulkhead);</span><br><span class="line"><span class="comment">// (包装策略执行任何被包装的策略: fallback outermost ... bulkhead innermost)</span></span><br><span class="line">policyWrap.Execute(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义标准的弹性策略</span></span><br><span class="line">PolicyWrap commonResilience = Policy.Wrap(retry, breaker, timeout);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 然后包装在额外的策略特定于一个请求类型:</span></span><br><span class="line">Avatar avatar = Policy</span><br><span class="line">   .Handle&lt;Whatever&gt;()</span><br><span class="line">   .Fallback&lt;Avatar&gt;(Avatar.Blank)</span><br><span class="line">   .Wrap(commonResilience)</span><br><span class="line">   .Execute(() =&gt; &#123; <span class="comment">/* get avatar */</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享通用弹性, 但将不同的策略包装在另一个请求类型中:</span></span><br><span class="line">Reputation reps = Policy</span><br><span class="line">   .Handle&lt;Whatever&gt;()</span><br><span class="line">   .Fallback&lt;Reputation&gt;(Reputation.NotAvailable)</span><br><span class="line">   .Wrap(commonResilience)</span><br><span class="line">   .Execute(() =&gt; &#123; <span class="comment">/* get reputation */</span> &#125;);</span><br></pre></td></tr></table></figure><p>更多详情参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1BvbGljeVdyYXA=" title="https://github.com/App-vNext/Polly/wiki/PolicyWrap">文档<i class="fa fa-external-link"></i></span></p><h5 id="无策略-NoOp"><a href="#无策略-NoOp" class="headerlink" title="无策略(NoOp)"></a>无策略(NoOp)</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个策略, 该策略将简单地导致传递给执行的委托 "按原样" 执行。</span></span><br><span class="line"><span class="comment">// 适用于在单元测试中或在应用程序中可能需要策略, 但您只是希望在没有策略干预的情况下通过执行的应用程序。</span></span><br><span class="line">NoOpPolicy noOp = Policy.NoOp();</span><br></pre></td></tr></table></figure><p>更多详情参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL05vT3A=" title="https://github.com/App-vNext/Polly/wiki/NoOp">文档<i class="fa fa-external-link"></i></span></p><h4 id="第二步：执行策略"><a href="#第二步：执行策略" class="headerlink" title="第二步：执行策略"></a>第二步：执行策略</h4><p><a href="#">同上</a></p><h3 id="执行后：捕获结果或任何最终异常"><a href="#执行后：捕获结果或任何最终异常" class="headerlink" title="执行后：捕获结果或任何最终异常"></a>执行后：捕获结果或任何最终异常</h3><p>使用 ExecuteAndCapture(…) 方法可以捕获执行的结果: 这些方法返回一个执行结果实例, 该实例描述的是成功执行还是错误。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> policyResult = <span class="keyword">await</span> Policy</span><br><span class="line">              .Handle&lt;HttpRequestException&gt;()</span><br><span class="line">              .RetryAsync()</span><br><span class="line">              .ExecuteAndCaptureAsync(() =&gt; DoSomethingAsync());</span><br><span class="line"><span class="comment">/*              </span></span><br><span class="line"><span class="comment">policyResult.Outcome - 调用是成功还是失败         </span></span><br><span class="line"><span class="comment">policyResult.FinalException - 最后一个异常。如果调用成功, 则捕获的最后一个异常将为 null</span></span><br><span class="line"><span class="comment">policyResult.ExceptionType - 定义为要处理的策略的最后一个异常 (如上面的 HttpRequestException) 或未处理的异常  (如 Exception). 如果调用成功, 则为 null。</span></span><br><span class="line"><span class="comment">policyResult.Result - 如果执行 func, 调用成功则返回执行结果, 否则为类型的默认值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="处理返回值和-Policy-lt-TResult-gt"><a href="#处理返回值和-Policy-lt-TResult-gt" class="headerlink" title="处理返回值和 Policy&lt;TResult&gt;"></a>处理返回值和 <code>Policy&lt;TResult&gt;</code></h3><p>如步骤1b 所述, 从 polly v4.3.0 开始, 策略可以组合处理返回值和异常:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在一个策略中处理异常和返回值</span></span><br><span class="line">HttpStatusCode[] httpStatusCodesWorthRetrying = &#123;</span><br><span class="line">   HttpStatusCode.RequestTimeout, <span class="comment">// 408</span></span><br><span class="line">   HttpStatusCode.InternalServerError, <span class="comment">// 500</span></span><br><span class="line">   HttpStatusCode.BadGateway, <span class="comment">// 502</span></span><br><span class="line">   HttpStatusCode.ServiceUnavailable, <span class="comment">// 503</span></span><br><span class="line">   HttpStatusCode.GatewayTimeout <span class="comment">// 504</span></span><br><span class="line">&#125;; </span><br><span class="line">HttpResponseMessage result = <span class="keyword">await</span> Policy</span><br><span class="line">  .Handle&lt;HttpRequestException&gt;()</span><br><span class="line">  .OrResult&lt;HttpResponseMessage&gt;(r =&gt; httpStatusCodesWorthRetrying.Contains(r.StatusCode))</span><br><span class="line">  .RetryAsync(...)</span><br><span class="line">  .ExecuteAsync( <span class="comment">/* some Func&lt;Task&lt;HttpResponseMessage&gt;&gt; */</span> )</span><br></pre></td></tr></table></figure><p>要处理的异常和返回结果可以以任意顺序流畅的表达。</p><h4 id="强类型-Policy-lt-TResult-gt"><a href="#强类型-Policy-lt-TResult-gt" class="headerlink" title="强类型 Policy&lt;TResult&gt;"></a>强类型 <code>Policy&lt;TResult&gt;</code></h4><p><code>配置策略 .HandleResult&lt;TResult&gt;(...) 或.OrResult&lt;TResult&gt;(...) 生成特定强类型策略 Policy&lt;TResult&gt;，例如 Retry&lt;TResult&gt;, AdvancedCircuitBreaker&lt;TResult&gt;</code>。<br>这些策略必须用于执行返回 TResult 的委托, 即:</p><ul><li><code>Execute(Func&lt;TResult&gt;) (and related overloads)</code></li><li><code>ExecuteAsync(Func&lt;CancellationToken, Task&lt;TResult&gt;&gt;) (and related overloads)</code></li></ul><h4 id="ExecuteAndCapture-lt-TResult-gt"><a href="#ExecuteAndCapture-lt-TResult-gt" class="headerlink" title="ExecuteAndCapture&lt;TResult&gt;()"></a><code>ExecuteAndCapture&lt;TResult&gt;()</code></h4><p>.ExecuteAndCapture(…) 在非泛型策略上返回具有属性的 PolicyResult：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">policyResult.Outcome - 调用是成功还是失败         </span><br><span class="line">policyResult.FinalException - 最后一个异常。如果调用成功, 则捕获的最后一个异常将为 <span class="literal">null</span></span><br><span class="line">policyResult.ExceptionType - 定义为要处理的策略的最后一个异常 (如上面的 HttpRequestException) 或未处理的异常  (如 Exception). 如果调用成功, 则为 <span class="literal">null</span>。</span><br><span class="line">policyResult.Result - 如果执行 func, 调用成功则返回执行结果, 否则为类型的默认值</span><br></pre></td></tr></table></figure><p><code>.ExecuteAndCapture&lt;TResult&gt;(Func&lt;TResult&gt;)</code>在强类型策略上添加了两个属性:</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">policyResult.FaultType - 最终的故障是处理异常还是由策略处理的结果？如果委托执行成功, 则为 <span class="literal">null</span>。</span><br><span class="line">policyResult.FinalHandledResult - 处理的最终故障结果;如果调用成功将为空或类型的默认值。</span><br></pre></td></tr></table></figure><h4 id="Policy-lt-TResult-gt-策略的状态更改事件"><a href="#Policy-lt-TResult-gt-策略的状态更改事件" class="headerlink" title="Policy&lt;TResult&gt;策略的状态更改事件"></a><code>Policy&lt;TResult&gt;</code>策略的状态更改事件</h4><p>在仅处理异常的非泛型策略中, 状态更改事件 (如 onRetry 和 onBreak ) 提供 Exception 参数。<br>在处理 TResult 返回值的通用性策略中, 状态更改委托是相同的, 除非它们采用 DelegateResult<tresult>参数代替异常。DelegateResult<tresult>具有两个属性:</tresult></tresult></p><ul><li><strong>Exception</strong> // 如果策略正在处理异常则为则刚刚引发异常(否则为空),</li><li><strong>Result</strong> // 如果策略正在处理结果则为刚刚引发的 TResult (否则为 default(TResult))</li></ul><h4 id="BrokenCircuitException-lt-TResult-gt"><a href="#BrokenCircuitException-lt-TResult-gt" class="headerlink" title="BrokenCircuitException&lt;TResult&gt;"></a><code>BrokenCircuitException&lt;TResult&gt;</code></h4><p>非通用的循环断路器策略在断路时抛出一个BrokenCircuitException。此 BrokenCircuitException 包含最后一个异常 (导致中断的异常) 作为 InnerException。<br>关于 <code>CircuitBreakerPolicy&lt;TResult&gt;</code> 策略:</p><ul><li>由于异常而中断将引发一个 BrokenCircuitException, 并将 InnerException 设置为触发中断的异常 (如以前一样)。</li><li>由于处理结果而中断会引发 ‘<code>BrokenCircuitException&lt;TResult&gt;</code>‘, 其 Result 属性设置为导致电路中断的结果.</li></ul><h3 id="Policy-Keys-与-Context-data"><a href="#Policy-Keys-与-Context-data" class="headerlink" title="Policy Keys 与 Context data"></a>Policy Keys 与 Context data</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用扩展方法 WithPolicyKey() 使用 PolicyKey 识别策略, </span></span><br><span class="line"><span class="comment">// (例如, 对于日志或指标中的相关性)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> policy = Policy</span><br><span class="line">    .Handle&lt;DataAccessException&gt;()</span><br><span class="line">    .Retry(<span class="number">3</span>, onRetry: (exception, retryCount, context) =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           logger.Error(<span class="string">$"Retry <span class="subst">&#123;retryCount&#125;</span> of <span class="subst">&#123;context.PolicyKey&#125;</span> at <span class="subst">&#123;context.ExecutionKey&#125;</span>, due to: <span class="subst">&#123;exception&#125;</span>."</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">    .WithPolicyKey(<span class="string">"MyDataAccessPolicy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上下文中传递 ExecutionKey , 并使用 ExecutionKey 标识呼叫站点</span></span><br><span class="line"><span class="keyword">var</span> customerDetails = policy.Execute(myDelegate, <span class="keyword">new</span> Context(<span class="string">"GetCustomerDetails"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// "MyDataAccessPolicy" -&gt; context.PolicyKey </span></span><br><span class="line"><span class="comment">// "GetCustomerDetails  -&gt; context.ExecutionKey</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其他自定义信息从调用站点传递到执行上下文中 </span></span><br><span class="line"><span class="keyword">var</span> policy = Policy</span><br><span class="line">    .Handle&lt;DataAccessException&gt;()</span><br><span class="line">    .Retry(<span class="number">3</span>, onRetry: (exception, retryCount, context) =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           logger.Error(<span class="string">$"Retry <span class="subst">&#123;retryCount&#125;</span> of <span class="subst">&#123;context.PolicyKey&#125;</span> at <span class="subst">&#123;context.ExecutionKey&#125;</span>, getting <span class="subst">&#123;context[<span class="string">"Type"</span>]&#125;</span> of id <span class="subst">&#123;context[<span class="string">"Id"</span>]&#125;</span>, due to: <span class="subst">&#123;exception&#125;</span>."</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">    .WithPolicyKey(<span class="string">"MyDataAccessPolicy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id = ... <span class="comment">// 客户id</span></span><br><span class="line"><span class="keyword">var</span> customerDetails = policy.Execute(context =&gt; GetCustomer(id), </span><br><span class="line">    <span class="keyword">new</span> Context(<span class="string">"GetCustomerDetails"</span>, <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;() &#123;&#123;<span class="string">"Type"</span>,<span class="string">"Customer"</span>&#125;,&#123;<span class="string">"Id"</span>,id&#125;&#125;</span><br></pre></td></tr></table></figure><p>更多资料参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL0tleXMtQW5kLUNvbnRleHQtRGF0YQ==" title="https://github.com/App-vNext/Polly/wiki/Keys-And-Context-Data">文档<i class="fa fa-external-link"></i></span></p><h3 id="PolicyRegistry"><a href="#PolicyRegistry" class="headerlink" title="PolicyRegistry"></a>PolicyRegistry</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建策略注册表 (例如在应用程序启动时) </span></span><br><span class="line">PolicyRegistry registry = <span class="keyword">new</span> PolicyRegistry();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用策略填充注册表</span></span><br><span class="line">registry.Add(<span class="string">"StandardHttpResilience"</span>, myStandardHttpResiliencePolicy);</span><br><span class="line"><span class="comment">// 或者:</span></span><br><span class="line">registry[<span class="string">"StandardHttpResilience"</span>] = myStandardHttpResiliencePolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 DI 将注册表实例传递给使用站点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceGateway</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyServiceGateway</span>(<span class="params">..., IReadOnlyPolicyRegistry&lt;<span class="keyword">string</span>&gt; registry, ...</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (或者, 如果您更喜欢环境上下文模式, 请使用线程安全的单例)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用注册表中的策略</span></span><br><span class="line">registry.Get&lt;IAsyncPolicy&lt;HttpResponseMessage&gt;&gt;(<span class="string">"StandardHttpResilience"</span>)</span><br><span class="line">    .ExecuteAsync&lt;HttpResponseMessage&gt;(...)</span><br></pre></td></tr></table></figure><p>策略注册表具有一系列进一步的类似字典的语义, 例如 .ContainsKey(…), .TryGet<tpolicy>(…), .Count, .Clear(), 和 Remove(…)，适用于 v5.2.0 以上版本</tpolicy></p><p>有关详细信息, 请参阅: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FwcC12TmV4dC9Qb2xseS93aWtpL1BvbGljeVJlZ2lzdHJ5" title="https://github.com/App-vNext/Polly/wiki/PolicyRegistry">文档<i class="fa fa-external-link"></i></span></p><h3 id="NET-Core-使用Polly重试机制"><a href="#NET-Core-使用Polly重试机制" class="headerlink" title=".NET Core 使用Polly重试机制"></a>.NET Core 使用Polly重试机制</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PollyController</span> : <span class="title">ApiController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> RetryPolicy&lt;HttpResponseMessage&gt; _httpRequestPolicy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PollyController</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _httpRequestPolicy = Policy.HandleResult&lt;HttpResponseMessage&gt;(</span><br><span class="line">        r =&gt; r.StatusCode == HttpStatusCode.InternalServerError)</span><br><span class="line">        .WaitAndRetryAsync(<span class="number">3</span>,</span><br><span class="line">        retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IHttpActionResult&gt; <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="keyword">var</span> requestEndpoint = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line"></span><br><span class="line">        HttpResponseMessage httpResponse = <span class="keyword">await</span> _httpRequestPolicy.ExecuteAsync(() =&gt; httpClient.GetAsync(requestEndpoint));</span><br><span class="line"></span><br><span class="line">        IEnumerable&lt;<span class="keyword">string</span>&gt; numbers = <span class="keyword">await</span> httpResponse.Content.ReadAsAsync&lt;IEnumerable&lt;<span class="keyword">string</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Polly</tag>
        <tag>熔断降级</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
</search>
